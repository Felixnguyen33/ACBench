[
    {
        "source": "toolalpaca",
        "conversations": [
            {
                "role": "system",
                "content": "You are a helpful task planner.\nFirst I will give you the task description and tools list you can use to finish the task, and your task is to plan a sequence of nodes which are subtasks to achieve the task. Each node of workflow is a subtask, and you can use the tools to complete the subtask.\nAfter you construct the plan, since some subtasks may not be dependent on each other, while others may have dependencies. Please convert these nodes of subtasks into a topology diagram based on the task relevance in the workflow. The Graph should start with START node, and end with END node. \nKeep your output in foramt:\nNode:\n1.{subtask_1}\n2.{subtask_2}\n...\nEdges:\n(START,1)\n...\n(n,END))"
            },
            {
                "role": "user",
                "content": "Task: I want to compare the performance of Coca-Cola and PepsiCo stocks. Can you get me the real-time market data for both of them? Also, I'd like to see their historical market data for the past year, with monthly intervals.\nThe api list you can use: [{'name': 'getRealTimeMarketData', 'description': 'Retrieve real-time market data for multiple exchanges around the world.', 'parameters': {'symbols': 'Required. string. Comma-separated list of stock symbols or indices.', 'exchange': 'string. The stock exchange to retrieve data from.', 'limit': 'integer. The number of results to return per request.'}, 'output': 'An array of objects containing real-time market data for the specified symbols.', 'format': 'application/json', 'path': '/realtime', 'method': 'get'}, {'name': 'getHistoricalMarketData', 'description': 'Retrieve historical market data for a set of specific stocks or indices.', 'parameters': {'symbols': 'Required. string. Comma-separated list of stock symbols or indices.', 'date_from': 'Required. string. The start date for the historical data in YYYY-MM-DD format.', 'date_to': 'Required. string. The end date for the historical data in YYYY-MM-DD format.', 'interval': \"string. The time interval for the historical data (e.g., '1min', '1hour', '1day').\"}, 'output': 'An array of objects containing historical market data for the specified symbols and date range.', 'format': 'application/json', 'path': '/historical', 'method': 'get'}, {'name': 'getTechnicalIndicators', 'description': 'Retrieve a variety of technical indicators to help analyze market trends.', 'parameters': {'symbol': 'Required. string. The stock symbol or index to analyze.', 'indicators': \"Required. string. Comma-separated list of technical indicators to retrieve (e.g., 'SMA', 'EMA', 'RSI').\", 'interval': \"string. The time interval for the technical indicators (e.g., '1min', '1hour', '1day').\"}, 'output': 'An array of objects containing the specified technical indicators for the given symbol and time interval.', 'format': 'application/json', 'path': '/indicators', 'method': 'get'}, {'name': 'searchStockSymbols', 'description': 'Search for stock symbols based on a given query.', 'parameters': {'query': 'Required. string. The search query to find matching stock symbols.', 'exchange': 'string. The stock exchange to search within.', 'limit': 'integer. The number of results to return per request.'}, 'output': 'An array of objects containing matching stock symbols.', 'format': 'application/json', 'path': '/search', 'method': 'get'}, {'name': 'listExchanges', 'description': 'Retrieve a list of supported stock exchanges.', 'parameters': {'limit': 'integer. The number of results to return per request.'}, 'output': 'An array of objects containing information about supported stock exchanges.', 'format': 'application/json', 'path': '/exchanges', 'method': 'get'}]"
            },
            {
                "role": "assistant",
                "content": "Node:\n1: Retrieve the real-time market data and historical market data with monthly intervals for the past year for Coca-Cola and PepsiCo stocks from the NYSE.\n2: Retrieve the historical market data for Coca-Cola and PepsiCo stocks for the past year, using monthly intervals, to compare their performance over time.\nEdge: (START,1) (1,2) (2,END)"
            }
        ],
        "target": "graph",
        "id": "toolalpaca_314",
        "category": "eval"
    },
    {
        "source": "toolalpaca",
        "conversations": [
            {
                "role": "system",
                "content": "You are a helpful task planner.\nFirst I will give you the task description and tools list you can use to finish the task, and your task is to plan a sequence of nodes which are subtasks to achieve the task. Each node of workflow is a subtask, and you can use the tools to complete the subtask.\nAfter you construct the plan, since some subtasks may not be dependent on each other, while others may have dependencies. Please convert these nodes of subtasks into a topology diagram based on the task relevance in the workflow. The Graph should start with START node, and end with END node. \nKeep your output in foramt:\nNode:\n1.{subtask_1}\n2.{subtask_2}\n...\nEdges:\n(START,1)\n...\n(n,END))"
            },
            {
                "role": "user",
                "content": "Task: I found this short link on a forum, and I'm curious about the original URL. Can you help me find out what it is? The short link is: https://short.link/abc123\nThe api list you can use: [{'name': 'generateShortLink', 'description': 'Generates a short link for a given long URL.', 'parameters': {'longUrl': 'Required. string. The long URL to be shortened.'}, 'output': 'The generated short link for the given long URL.', 'format': 'application/json', 'path': '/generateShortLink', 'method': 'post'}, {'name': 'getLongUrl', 'description': 'Retrieves the original long URL from a given short link.', 'parameters': {'shortLink': 'Required. string. The short link to retrieve the original long URL from.'}, 'output': 'The original long URL associated with the given short link.', 'format': 'application/json', 'path': '/getLongUrl', 'method': 'post'}, {'name': 'listUserShortLinks', 'description': 'Lists all shortened URLs associated with a specific user account.', 'parameters': {'userId': 'Required. string. The user ID to retrieve the list of associated short links.', 'page': 'integer. The page number for pagination.', 'perPage': 'integer. The number of short links to display per page.'}, 'output': 'An array of short links associated with the given user account, including their long URLs and creation dates.', 'format': 'application/json', 'path': '/listUserShortLinks', 'method': 'get'}]"
            },
            {
                "role": "assistant",
                "content": "Node:\n1: Retrieve the original URL from the provided short link \"https://short.link/abc123\".\n2: Check if the short link \"https://short.link/abc123\" is associated with any user account using the listUserShortLinks tool.\nEdge: (START,1) (1,2) (2,END)"
            }
        ],
        "target": "graph",
        "id": "toolalpaca_258",
        "category": "eval"
    },
    {
        "source": "toolalpaca",
        "conversations": [
            {
                "role": "system",
                "content": "You are a helpful task planner.\nFirst I will give you the task description and tools list you can use to finish the task, and your task is to plan a sequence of nodes which are subtasks to achieve the task. Each node of workflow is a subtask, and you can use the tools to complete the subtask.\nAfter you construct the plan, since some subtasks may not be dependent on each other, while others may have dependencies. Please convert these nodes of subtasks into a topology diagram based on the task relevance in the workflow. The Graph should start with START node, and end with END node. \nKeep your output in foramt:\nNode:\n1.{subtask_1}\n2.{subtask_2}\n...\nEdges:\n(START,1)\n...\n(n,END))"
            },
            {
                "role": "user",
                "content": "Task: Show me the statistics of my Clash Royale matches from last week.\nThe api list you can use: [{'name': 'getPlayer', 'description': 'Retrieve information about a specific player, including game progress, statistics, and deck composition.', 'parameters': {'playerTag': \"Required. string. The player's unique identifier, obtained from the game or other API functions.\"}, 'output': 'Successful response.', 'format': 'application/json', 'path': '/getPlayer', 'method': 'get'}, {'name': 'getClan', 'description': 'Retrieve detailed information about a specific clan, including member lists, war performance, and more.', 'parameters': {'clanTag': \"Required. string. The clan's unique identifier, obtained from the game or other API functions.\"}, 'output': 'Successful response.', 'format': 'application/json', 'path': '/getClan', 'method': 'get'}, {'name': 'getCard', 'description': 'Retrieve information about a specific card, including rarity, elixir cost, and statistics.', 'parameters': {'cardId': \"Required. string. The card's unique identifier, obtained from the game or other API functions.\"}, 'output': 'Successful response.', 'format': 'application/json', 'path': '/getCard', 'method': 'get'}]"
            },
            {
                "role": "assistant",
                "content": "Node:\n1: Ask the user for their Clash Royale player tag to access their match statistics from the previous week.\n2: Retrieve the game data for the user's Clash Royale account using the provided player tag \"#12345678\".\nEdge: (START,1) (1,2) (2,END)"
            }
        ],
        "target": "graph",
        "id": "toolalpaca_646",
        "category": "eval"
    },
    {
        "source": "toolalpaca",
        "conversations": [
            {
                "role": "system",
                "content": "You are a helpful task planner.\nFirst I will give you the task description and tools list you can use to finish the task, and your task is to plan a sequence of nodes which are subtasks to achieve the task. Each node of workflow is a subtask, and you can use the tools to complete the subtask.\nAfter you construct the plan, since some subtasks may not be dependent on each other, while others may have dependencies. Please convert these nodes of subtasks into a topology diagram based on the task relevance in the workflow. The Graph should start with START node, and end with END node. \nKeep your output in foramt:\nNode:\n1.{subtask_1}\n2.{subtask_2}\n...\nEdges:\n(START,1)\n...\n(n,END))"
            },
            {
                "role": "user",
                "content": "Task: Please suggest some efficient ways to farm gold in Guild Wars 2.\nThe api list you can use: [{'name': 'getItemDetails', 'description': 'Get detailed information about a specific item', 'parameters': {'item_id': 'Required. integer. The ID of the item to retrieve information for.'}, 'output': 'Returns detailed information about the item.', 'format': 'application/json', 'path': '/item/{item_id}', 'method': 'get'}, {'name': 'getPlayerAccountDetails', 'description': \"Get information about a specific player's account\", 'parameters': {'account_name': \"Required. string. The name of the player's account.\"}, 'output': \"Returns information about the player's account.\", 'format': 'application/json', 'path': '/player/{account_name}', 'method': 'get'}, {'name': 'getEventDetails', 'description': 'Get information about a specific game event', 'parameters': {'event_id': 'Required. string. The ID of the event to retrieve information for.'}, 'output': 'Returns information about the event.', 'format': 'application/json', 'path': '/event/{event_id}', 'method': 'get'}, {'name': 'getMapDetails', 'description': 'Get information about a specific map', 'parameters': {'map_id': 'Required. integer. The ID of the map to retrieve information for.'}, 'output': 'Returns information about the map.', 'format': 'application/json', 'path': '/map/{map_id}', 'method': 'get'}]"
            },
            {
                "role": "assistant",
                "content": "Node:\n1: Retrieve event details in Guild Wars 2 to identify high-reward opportunities for efficient gold farming.\n2: Retrieve map details in Guild Wars 2 to identify areas that offer high rewards for efficient gold farming.\n3: Retrieve item details in Guild Wars 2 to identify items that can be sold for high values to vendors for efficient gold farming.\nEdge: (START,1) (START,2) (START,3) (1,END) (2,END) (3,END)"
            }
        ],
        "target": "graph",
        "id": "toolalpaca_597",
        "category": "eval"
    },
    {
        "source": "toolalpaca",
        "conversations": [
            {
                "role": "system",
                "content": "You are a helpful task planner.\nFirst I will give you the task description and tools list you can use to finish the task, and your task is to plan a sequence of nodes which are subtasks to achieve the task. Each node of workflow is a subtask, and you can use the tools to complete the subtask.\nAfter you construct the plan, since some subtasks may not be dependent on each other, while others may have dependencies. Please convert these nodes of subtasks into a topology diagram based on the task relevance in the workflow. The Graph should start with START node, and end with END node. \nKeep your output in foramt:\nNode:\n1.{subtask_1}\n2.{subtask_2}\n...\nEdges:\n(START,1)\n...\n(n,END))"
            },
            {
                "role": "user",
                "content": "Task: How can I save a Mixcloud mix to my favorites for later listening?\nThe api list you can use: [{'name': 'getUser', 'description': 'Retrieve information about a specific Mixcloud user', 'parameters': {'username': 'Required. string. The username of the Mixcloud user.'}, 'output': 'User information retrieved successfully.', 'format': 'application/json', 'path': '/{username}/', 'method': 'get'}, {'name': 'search', 'description': 'Search the Mixcloud library for specific tracks, shows, or users', 'parameters': {'q': 'Required. string. The search query.', 'type': 'Required. string. One of: [cloudcasts, users, tags]. The type of search to perform.'}, 'output': 'Search results retrieved successfully.', 'format': 'application/json', 'path': '/search/', 'method': 'get'}, {'name': 'getCloudcast', 'description': 'Retrieve detailed information about a specific Mixcloud cloudcast', 'parameters': {'username': 'Required. string. The username of the Mixcloud user who uploaded the cloudcast.', 'cloudcast_slug': 'Required. string. The slug of the cloudcast.'}, 'output': 'Cloudcast information retrieved successfully.', 'format': 'application/json', 'path': '/{username}/{cloudcast_slug}/', 'method': 'get'}, {'name': 'stream', 'description': 'Stream audio content directly from Mixcloud', 'parameters': {'cloudcast_url': 'Required. string. The URL of the cloudcast to stream.'}, 'output': 'Audio content streamed successfully.', 'format': '', 'path': '/stream/{cloudcast_url}/', 'method': 'get'}]"
            },
            {
                "role": "assistant",
                "content": "Node:\n1: Check whether the username 'user123' has an account on Mixcloud.\n2: Search for the specific \"Mixcloud mix\" under the category of cloudcasts.\nEdge: (START,1) (1,2) (2,END)"
            }
        ],
        "target": "graph",
        "id": "toolalpaca_780",
        "category": "eval"
    },
    {
        "source": "toolalpaca",
        "conversations": [
            {
                "role": "system",
                "content": "You are a helpful task planner.\nFirst I will give you the task description and tools list you can use to finish the task, and your task is to plan a sequence of nodes which are subtasks to achieve the task. Each node of workflow is a subtask, and you can use the tools to complete the subtask.\nAfter you construct the plan, since some subtasks may not be dependent on each other, while others may have dependencies. Please convert these nodes of subtasks into a topology diagram based on the task relevance in the workflow. The Graph should start with START node, and end with END node. \nKeep your output in foramt:\nNode:\n1.{subtask_1}\n2.{subtask_2}\n...\nEdges:\n(START,1)\n...\n(n,END))"
            },
            {
                "role": "user",
                "content": "Task: I'm planning a day out in Istanbul and want to visit a park, a library, and use the metro. Can you help me find the nearest park, library, and metro station to my current location in Taksim Square?\nThe api list you can use: [{'name': 'getTransportationData', 'description': 'Retrieve data on transportation such as metro stations, tram & metrobus stops, and traffic density.', 'parameters': {'transportationType': 'Required. string. One of: [metro, tram, metrobus, traffic_density]. Type of transportation data to retrieve (metro, tram, metrobus, traffic_density).'}, 'output': 'List of transportation data objects.', 'format': 'application/json', 'path': '/transportation', 'method': 'get'}, {'name': 'getUrbanGreenSpacesData', 'description': 'Retrieve data on urban green spaces such as parks, forests, and gardens.', 'parameters': {'greenSpaceType': 'Required. string. One of: [parks, forests, gardens]. Type of urban green space data to retrieve (parks, forests, gardens).'}, 'output': 'List of urban green space data objects.', 'format': 'application/json', 'path': '/urban-green-spaces', 'method': 'get'}, {'name': 'getPublicFacilitiesData', 'description': 'Retrieve data on public facilities such as hospitals, schools, and libraries.', 'parameters': {'facilityType': 'Required. string. One of: [hospitals, schools, libraries]. Type of public facility data to retrieve (hospitals, schools, libraries).'}, 'output': 'List of public facility data objects.', 'format': 'application/json', 'path': '/public-facilities', 'method': 'get'}, {'name': 'searchTransportationData', 'description': 'Search for transportation data based on a keyword or location.', 'parameters': {'keyword': 'string. Keyword to search for in transportation data.', 'location': 'string. Location to search for in transportation data.'}, 'output': 'List of transportation data objects matching the search criteria.', 'format': 'application/json', 'path': '/transportation/search', 'method': 'get'}, {'name': 'searchUrbanGreenSpacesData', 'description': 'Search for urban green spaces data based on a keyword or location.', 'parameters': {'keyword': 'string. Keyword to search for in urban green spaces data.', 'location': 'string. Location to search for in urban green spaces data.'}, 'output': 'List of urban green space data objects matching the search criteria.', 'format': 'application/json', 'path': '/urban-green-spaces/search', 'method': 'get'}, {'name': 'searchPublicFacilitiesData', 'description': 'Search for public facilities data based on a keyword or location.', 'parameters': {'keyword': 'string. Keyword to search for in public facilities data.', 'location': 'string. Location to search for in public facilities data.'}, 'output': 'List of public facility data objects matching the search criteria.', 'format': 'application/json', 'path': '/public-facilities/search', 'method': 'get'}]"
            },
            {
                "role": "assistant",
                "content": "Node:\n1: Find the nearest library and metro station to Taksim Square for a day out planning\n2: Continue to find the nearest metro station to Taksim Square to complete the plan for visiting key points of interest.\n3: Locate the nearest metro station to Taksim Square to finalize the day trip itinerary, ensuring all key points of interest are covered.\nEdge: (START, 1) (1,2) (2, 3) (3, END)"
            }
        ],
        "target": "graph",
        "id": "toolalpaca_387",
        "category": "eval"
    },
    {
        "source": "toolalpaca",
        "conversations": [
            {
                "role": "system",
                "content": "You are a helpful task planner.\nFirst I will give you the task description and tools list you can use to finish the task, and your task is to plan a sequence of nodes which are subtasks to achieve the task. Each node of workflow is a subtask, and you can use the tools to complete the subtask.\nAfter you construct the plan, since some subtasks may not be dependent on each other, while others may have dependencies. Please convert these nodes of subtasks into a topology diagram based on the task relevance in the workflow. The Graph should start with START node, and end with END node. \nKeep your output in foramt:\nNode:\n1.{subtask_1}\n2.{subtask_2}\n...\nEdges:\n(START,1)\n...\n(n,END))"
            },
            {
                "role": "user",
                "content": "Task: I want to create a slideshow of animal pictures for my kids. Please find 10 pictures of dogs, 8 pictures of cats, and 6 pictures of birds.\nThe api list you can use: [{'name': 'getRandomAnimalPictures', 'description': 'Retrieve random pictures of Shiba Inus, cats, or birds.', 'parameters': {'animalType': 'string. One of: [dog, cat, bird]. Type of animal (dog, cat, or bird). Default is dog.', 'count': 'integer. Number of pictures to return. Default is 1.'}, 'output': 'An array of URLs of the requested animal pictures.', 'format': 'application/json', 'path': '/api', 'method': 'get'}, {'name': 'getShibaInuPictures', 'description': 'Retrieve random pictures of Shiba Inus.', 'parameters': {'count': 'integer. Number of pictures to return. Default is 1.'}, 'output': 'An array of URLs of Shiba Inu pictures.', 'format': 'application/json', 'path': '/api/shibes', 'method': 'get'}, {'name': 'getCatPictures', 'description': 'Retrieve random pictures of cats.', 'parameters': {'count': 'integer. Number of pictures to return. Default is 1.'}, 'output': 'An array of URLs of cat pictures.', 'format': 'application/json', 'path': '/api/cats', 'method': 'get'}, {'name': 'getBirdPictures', 'description': 'Retrieve random pictures of birds.', 'parameters': {'count': 'integer. Number of pictures to return. Default is 1.'}, 'output': 'An array of URLs of bird pictures.', 'format': 'application/json', 'path': '/api/birds', 'method': 'get'}]"
            },
            {
                "role": "assistant",
                "content": "Node:\n1: Fetch a set number of animal images, covering different types like dogs, cats, and birds to create a varied slideshow.\n2: Continue gathering the required images by fetching multiple pictures of cats as specified for the slideshow.\n3: Complete the animal slideshow by acquiring the final set of images, focusing on obtaining multiple pictures of birds as required.\nEdge: (START,1) (1,2) (2,3) (3,END)"
            }
        ],
        "target": "graph",
        "id": "toolalpaca_380",
        "category": "eval"
    },
    {
        "source": "toolalpaca",
        "conversations": [
            {
                "role": "system",
                "content": "You are a helpful task planner.\nFirst I will give you the task description and tools list you can use to finish the task, and your task is to plan a sequence of nodes which are subtasks to achieve the task. Each node of workflow is a subtask, and you can use the tools to complete the subtask.\nAfter you construct the plan, since some subtasks may not be dependent on each other, while others may have dependencies. Please convert these nodes of subtasks into a topology diagram based on the task relevance in the workflow. The Graph should start with START node, and end with END node. \nKeep your output in foramt:\nNode:\n1.{subtask_1}\n2.{subtask_2}\n...\nEdges:\n(START,1)\n...\n(n,END))"
            },
            {
                "role": "user",
                "content": "Task: What is the precipitation forecast for the next 7 days in Seattle?\nThe api list you can use: [{'name': 'getWeatherForecast', 'description': 'Returns the weather forecast for a given location, including hourly and daily forecasts.', 'parameters': {'latitude': 'Required. number. The latitude of the location.', 'longitude': 'Required. number. The longitude of the location.', 'language': \"string. The language in which to return the data. Default is 'en'.\"}, 'output': 'Successful response.', 'format': 'application/json', 'path': '/weather/forecast', 'method': 'get'}, {'name': 'getHistoricalWeatherData', 'description': 'Returns the historical weather data for a given location, for up to several years in the past.', 'parameters': {'latitude': 'Required. number. The latitude of the location.', 'longitude': 'Required. number. The longitude of the location.', 'startDate': \"Required. string. The start date of the historical data in the format 'YYYY-MM-DD'.\", 'endDate': \"Required. string. The end date of the historical data in the format 'YYYY-MM-DD'.\", 'language': \"string. The language in which to return the data. Default is 'en'.\"}, 'output': 'Successful response.', 'format': 'application/json', 'path': '/weather/historical', 'method': 'get'}, {'name': 'getCurrentWeatherData', 'description': 'Returns the current weather data for a given location.', 'parameters': {'latitude': 'Required. number. The latitude of the location.', 'longitude': 'Required. number. The longitude of the location.', 'language': \"string. The language in which to return the data. Default is 'en'.\"}, 'output': 'Successful response.', 'format': 'application/json', 'path': '/weather/current', 'method': 'get'}, {'name': 'searchLocation', 'description': 'Returns a list of locations that match the search query.', 'parameters': {'query': 'Required. string. The search query.', 'language': \"string. The language in which to return the data. Default is 'en'.\"}, 'output': 'Successful response.', 'format': 'application/json', 'path': '/location/search', 'method': 'get'}, {'name': 'getLocationDetails', 'description': 'Returns the details of a specific location.', 'parameters': {'latitude': 'Required. number. The latitude of the location.', 'longitude': 'Required. number. The longitude of the location.', 'language': \"string. The language in which to return the data. Default is 'en'.\"}, 'output': 'Successful response.', 'format': 'application/json', 'path': '/location/details', 'method': 'get'}]"
            },
            {
                "role": "assistant",
                "content": "Node:\n1: Find the latitude and longitude coordinates for Seattle to be used in a weather forecast query.\n2: Use the coordinates of Seattle to retrieve a 7-day weather forecast including precipitation.\nEdge: (START,1) (1,2) (2,END)"
            }
        ],
        "target": "graph",
        "id": "toolalpaca_907",
        "category": "eval"
    },
    {
        "source": "toolalpaca",
        "conversations": [
            {
                "role": "system",
                "content": "You are a helpful task planner.\nFirst I will give you the task description and tools list you can use to finish the task, and your task is to plan a sequence of nodes which are subtasks to achieve the task. Each node of workflow is a subtask, and you can use the tools to complete the subtask.\nAfter you construct the plan, since some subtasks may not be dependent on each other, while others may have dependencies. Please convert these nodes of subtasks into a topology diagram based on the task relevance in the workflow. The Graph should start with START node, and end with END node. \nKeep your output in foramt:\nNode:\n1.{subtask_1}\n2.{subtask_2}\n...\nEdges:\n(START,1)\n...\n(n,END))"
            },
            {
                "role": "user",
                "content": "Task: I need to update the transaction from June 10th in my \"Utilities\" account. Change the amount to $75 and update the memo to say \"Electricity bill payment\".\nThe api list you can use: [{'name': 'getUserBudgets', 'description': \"Retrieve a list of user's budgets with their associated information.\", 'parameters': {'accessToken': \"Required. string. The user's access token for authentication.\"}, 'output': 'A list of budgets with their ID, name, currency format, date format, and last modified date.', 'format': 'application/json', 'path': '/budgets', 'method': 'get'}, {'name': 'getBudgetAccounts', 'description': 'Retrieve a list of accounts for a specific budget.', 'parameters': {'accessToken': \"Required. string. The user's access token for authentication.\", 'budgetId': 'Required. string. The ID of the budget to retrieve accounts for.'}, 'output': 'A list of accounts with their ID, name, type, balance, and cleared balance.', 'format': 'application/json', 'path': '/budgets/{budgetId}/accounts', 'method': 'get'}, {'name': 'getBudgetCategories', 'description': 'Retrieve a list of categories for a specific budget.', 'parameters': {'accessToken': \"Required. string. The user's access token for authentication.\", 'budgetId': 'Required. string. The ID of the budget to retrieve categories for.'}, 'output': 'A list of categories with their ID, name, group, and budgeted amount.', 'format': 'application/json', 'path': '/budgets/{budgetId}/categories', 'method': 'get'}, {'name': 'getBudgetPayees', 'description': 'Retrieve a list of payees for a specific budget.', 'parameters': {'accessToken': \"Required. string. The user's access token for authentication.\", 'budgetId': 'Required. string. The ID of the budget to retrieve payees for.'}, 'output': 'A list of payees with their ID, name, and associated transactions.', 'format': 'application/json', 'path': '/budgets/{budgetId}/payees', 'method': 'get'}, {'name': 'getBudgetTransactions', 'description': 'Retrieve a list of transactions for a specific budget.', 'parameters': {'accessToken': \"Required. string. The user's access token for authentication.\", 'budgetId': 'Required. string. The ID of the budget to retrieve transactions for.', 'startDate': 'string. The start date for transactions to be retrieved.', 'endDate': 'string. The end date for transactions to be retrieved.'}, 'output': 'A list of transactions with their ID, date, amount, payee, category, account, and memo.', 'format': 'application/json', 'path': '/budgets/{budgetId}/transactions', 'method': 'get'}, {'name': 'createTransaction', 'description': 'Create a new transaction for a specific budget and account.', 'parameters': {'accessToken': \"Required. string. The user's access token for authentication.\", 'budgetId': 'Required. string. The ID of the budget to create the transaction for.', 'accountId': 'Required. string. The ID of the account to create the transaction for.', 'date': 'string.', 'amount': 'integer.', 'payeeId': 'string.', 'categoryId': 'string.', 'memo': 'string.'}, 'output': 'The created transaction with its ID, date, amount, payee, category, account, and memo.', 'format': 'application/json', 'path': '/budgets/{budgetId}/transactions', 'method': 'post'}, {'name': 'updateTransaction', 'description': 'Update an existing transaction for a specific budget and account.', 'parameters': {'accessToken': \"Required. string. The user's access token for authentication.\", 'budgetId': 'Required. string. The ID of the budget to update the transaction for.', 'transactionId': 'Required. string. The ID of the transaction to update.', 'date': 'string.', 'amount': 'integer.', 'payeeId': 'string.', 'categoryId': 'string.', 'memo': 'string.'}, 'output': 'The updated transaction with its ID, date, amount, payee, category, account, and memo.', 'format': 'application/json', 'path': '/budgets/{budgetId}/transactions/{transactionId}', 'method': 'put'}, {'name': 'searchPayees', 'description': 'Search for payees by name in a specific budget.', 'parameters': {'accessToken': \"Required. string. The user's access token for authentication.\", 'budgetId': 'Required. string. The ID of the budget to search payees in.', 'query': 'Required. string. The search query for payee names.'}, 'output': 'A list of matching payees with their ID, name, and associated transactions.', 'format': 'application/json', 'path': '/budgets/{budgetId}/payees/search', 'method': 'get'}, {'name': 'searchCategories', 'description': 'Search for categories by name in a specific budget.', 'parameters': {'accessToken': \"Required. string. The user's access token for authentication.\", 'budgetId': 'Required. string. The ID of the budget to search categories in.', 'query': 'Required. string. The search query for category names.'}, 'output': 'A list of matching categories with their ID, name, group, and budgeted amount.', 'format': 'application/json', 'path': '/budgets/{budgetId}/categories/search', 'method': 'get'}]"
            },
            {
                "role": "assistant",
                "content": "Node:\n1: Identify and update the specific transaction from June 10th in the \"Utilities\" account by modifying the amount to $75 and changing the memo to \"Electricity bill payment\".\n2: Confirm the details of the intended transaction and make the necessary updates to change the amount to $75 and modify the memo to \"Electricity bill payment\" for the transaction from June 10th in the \"Utilities\" account.\nEdge: (START, 1) (1, 2) (2, END)"
            }
        ],
        "target": "graph",
        "id": "toolalpaca_160",
        "category": "eval"
    },
    {
        "source": "toolalpaca",
        "conversations": [
            {
                "role": "system",
                "content": "You are a helpful task planner.\nFirst I will give you the task description and tools list you can use to finish the task, and your task is to plan a sequence of nodes which are subtasks to achieve the task. Each node of workflow is a subtask, and you can use the tools to complete the subtask.\nAfter you construct the plan, since some subtasks may not be dependent on each other, while others may have dependencies. Please convert these nodes of subtasks into a topology diagram based on the task relevance in the workflow. The Graph should start with START node, and end with END node. \nKeep your output in foramt:\nNode:\n1.{subtask_1}\n2.{subtask_2}\n...\nEdges:\n(START,1)\n...\n(n,END))"
            },
            {
                "role": "user",
                "content": "Task: I want to learn more about the teachings of different Zen masters. Can you provide me with a list of all the authors in the Zen Quotes API? After that, please find me a quote from Alan Watts.\nThe api list you can use: [{'name': 'getRandomQuote', 'description': 'Retrieve a random quote from Zen masters.', 'parameters': {}, 'output': 'Returns a single random quote object containing the quote text and author name.', 'format': 'application/json', 'path': '/random', 'method': 'get'}, {'name': 'getQuotesByAuthor', 'description': 'Filter quotes by author name.', 'parameters': {'author': 'Required. string. The name of the author whose quotes you want to retrieve.'}, 'output': 'Returns a list of quote objects containing the quote text and author name, filtered by the specified author.', 'format': 'application/json', 'path': '/quotes', 'method': 'get'}, {'name': 'searchQuotes', 'description': 'Search for quotes containing specific keywords.', 'parameters': {'keywords': 'Required. string. The keywords to search for in the quotes.'}, 'output': 'Returns a list of quote objects containing the quote text and author name, filtered by the specified keywords.', 'format': 'application/json', 'path': '/search', 'method': 'get'}, {'name': 'listAuthors', 'description': 'Retrieve a list of all available authors in the Zen Quotes API.', 'parameters': {}, 'output': 'Returns a list of author names available in the Zen Quotes API. This can be used as input for the getQuotesByAuthor function.', 'format': 'application/json', 'path': '/authors', 'method': 'get'}]"
            },
            {
                "role": "assistant",
                "content": "Node:\n1: Retrieve a list of all authors from the Zen Quotes API and then find a quote from Alan Watts.\n2: Retrieve a quote from Alan Watts using the Zen Quotes API.\nEdge: (START,1) (1,2) (2,END)"
            }
        ],
        "target": "graph",
        "id": "toolalpaca_364",
        "category": "eval"
    },
    {
        "source": "toolalpaca",
        "conversations": [
            {
                "role": "system",
                "content": "You are a helpful task planner.\nFirst I will give you the task description and tools list you can use to finish the task, and your task is to plan a sequence of nodes which are subtasks to achieve the task. Each node of workflow is a subtask, and you can use the tools to complete the subtask.\nAfter you construct the plan, since some subtasks may not be dependent on each other, while others may have dependencies. Please convert these nodes of subtasks into a topology diagram based on the task relevance in the workflow. The Graph should start with START node, and end with END node. \nKeep your output in foramt:\nNode:\n1.{subtask_1}\n2.{subtask_2}\n...\nEdges:\n(START,1)\n...\n(n,END))"
            },
            {
                "role": "user",
                "content": "Task: I'm doing a research project on Rwanda's provinces and their districts. Can you help me by providing a list of all provinces, and for each province, list its districts?\nThe api list you can use: [{'name': 'getProvinces', 'description': 'Retrieve a list of all provinces in Rwanda.', 'parameters': {}, 'output': 'List of provinces.', 'format': 'application/json', 'path': '/provinces', 'method': 'get'}, {'name': 'getDistricts', 'description': 'Retrieve a list of districts within a specified province.', 'parameters': {'provinceId': 'Required. integer. The ID of the province for which to retrieve districts.'}, 'output': 'List of districts.', 'format': 'application/json', 'path': '/districts/{provinceId}', 'method': 'get'}, {'name': 'getSectors', 'description': 'Retrieve a list of sectors within a specified district.', 'parameters': {'districtId': 'Required. integer. The ID of the district for which to retrieve sectors.'}, 'output': 'List of sectors.', 'format': 'application/json', 'path': '/sectors/{districtId}', 'method': 'get'}, {'name': 'getCells', 'description': 'Retrieve a list of cells within a specified sector.', 'parameters': {'sectorId': 'Required. integer. The ID of the sector for which to retrieve cells.'}, 'output': 'List of cells.', 'format': 'application/json', 'path': '/cells/{sectorId}', 'method': 'get'}, {'name': 'getVillages', 'description': 'Retrieve a list of villages within a specified cell.', 'parameters': {'cellId': 'Required. integer. The ID of the cell for which to retrieve villages.'}, 'output': 'List of villages.', 'format': 'application/json', 'path': '/villages/{cellId}', 'method': 'get'}, {'name': 'getStreets', 'description': 'Retrieve a list of streets within a specified village.', 'parameters': {'villageId': 'Required. integer. The ID of the village for which to retrieve streets.'}, 'output': 'List of streets.', 'format': 'application/json', 'path': '/streets/{villageId}', 'method': 'get'}, {'name': 'getCapitalCity', 'description': 'Retrieve information about the capital city of Rwanda.', 'parameters': {}, 'output': 'Capital city information.', 'format': 'application/json', 'path': '/capital-city', 'method': 'get'}, {'name': 'searchLocation', 'description': 'Search for a location by name and return its details.', 'parameters': {'locationName': 'Required. string. The name of the location to search for.', 'locationType': 'string. One of: [province, district, sector, cell, village, street]. The type of location to search for (province, district, sector, cell, village, or street).'}, 'output': 'List of matching locations.', 'format': 'application/json', 'path': '/search', 'method': 'get'}]"
            },
            {
                "role": "assistant",
                "content": "Node:\n1: Retrieve the list of all provinces in Rwanda and their corresponding districts.\n2: Retrieve the list of districts for each province in Rwanda by specifying the province ID.\n3: Retrieve the list of districts for the Northern Province in Rwanda by specifying the province ID.\n4: Retrieve the list of districts for the Eastern Province in Rwanda by specifying the province ID.\nEdge: (START,1) (1,2) (2,3) (2,4) (3,END) (4,END)"
            }
        ],
        "target": "graph",
        "id": "toolalpaca_301",
        "category": "eval"
    },
    {
        "source": "toolalpaca",
        "conversations": [
            {
                "role": "system",
                "content": "You are a helpful task planner.\nFirst I will give you the task description and tools list you can use to finish the task, and your task is to plan a sequence of nodes which are subtasks to achieve the task. Each node of workflow is a subtask, and you can use the tools to complete the subtask.\nAfter you construct the plan, since some subtasks may not be dependent on each other, while others may have dependencies. Please convert these nodes of subtasks into a topology diagram based on the task relevance in the workflow. The Graph should start with START node, and end with END node. \nKeep your output in foramt:\nNode:\n1.{subtask_1}\n2.{subtask_2}\n...\nEdges:\n(START,1)\n...\n(n,END))"
            },
            {
                "role": "user",
                "content": "Task: I need to update my online portfolio with a new image. Can you first compress this image with a compression level of 70, then resize it to 800x600 pixels, and finally convert it to a WebP format? Here's the image URL: https://example.com/portfolioimage.png\nThe api list you can use: [{'name': 'compressImage', 'description': 'Compresses an image to reduce its size without sacrificing quality.', 'parameters': {'imageUrl': 'Required. string. The URL of the image to be compressed.', 'compressionLevel': 'integer. The desired compression level (1-100). Default is 80.'}, 'output': 'The compressed image was successfully generated.', 'format': 'application/json', 'path': '/compressImage', 'method': 'post'}, {'name': 'resizeImage', 'description': 'Resizes an image to the specified dimensions without distorting the aspect ratio.', 'parameters': {'imageUrl': 'Required. string. The URL of the image to be resized.', 'width': 'integer. The desired width of the resized image.', 'height': 'integer. The desired height of the resized image.'}, 'output': 'The resized image was successfully generated.', 'format': 'application/json', 'path': '/resizeImage', 'method': 'post'}, {'name': 'convertImageFormat', 'description': 'Converts an image to a different format, such as JPG, PNG, or WebP.', 'parameters': {'imageUrl': 'Required. string. The URL of the image to be converted.', 'targetFormat': \"Required. string. The desired format of the converted image (e.g., 'jpg', 'png', 'webp'). One of: [jpg, png, webp].\"}, 'output': 'The converted image was successfully generated.', 'format': 'application/json', 'path': '/convertImageFormat', 'method': 'post'}, {'name': 'listSupportedFormats', 'description': 'Retrieves a list of supported image formats for conversion.', 'parameters': {}, 'output': 'The list of supported image formats was successfully retrieved.', 'format': 'application/json', 'path': '/listSupportedFormats', 'method': 'get'}]"
            },
            {
                "role": "assistant",
                "content": "Node:\n1: Compress the image from the provided URL with a specific compression level, then resize it and convert it to a different format.\n2: Resize the compressed image to specific dimensions.\n3: Convert the resized image to a specified file format.\nEdge: (START,1) (1,2) (2,3) (3,END)"
            }
        ],
        "target": "graph",
        "id": "toolalpaca_395",
        "category": "eval"
    },
    {
        "source": "toolalpaca",
        "conversations": [
            {
                "role": "system",
                "content": "You are a helpful task planner.\nFirst I will give you the task description and tools list you can use to finish the task, and your task is to plan a sequence of nodes which are subtasks to achieve the task. Each node of workflow is a subtask, and you can use the tools to complete the subtask.\nAfter you construct the plan, since some subtasks may not be dependent on each other, while others may have dependencies. Please convert these nodes of subtasks into a topology diagram based on the task relevance in the workflow. The Graph should start with START node, and end with END node. \nKeep your output in foramt:\nNode:\n1.{subtask_1}\n2.{subtask_2}\n...\nEdges:\n(START,1)\n...\n(n,END))"
            },
            {
                "role": "user",
                "content": "Task: I no longer need caching for my OpenGraphr API requests. Can you disable caching for me?\nThe api list you can use: [{'name': 'getOpenGraphData', 'description': 'Retrieve Open Graph metadata from a single URL', 'parameters': {'url': 'Required. string. The URL to retrieve Open Graph metadata from.'}, 'output': 'Returns an object containing the Open Graph metadata, including title, description, and image URL.', 'format': 'application/json', 'path': '/getOpenGraphData', 'method': 'get'}, {'name': 'getMultipleOpenGraphData', 'description': 'Access Open Graph metadata for multiple URLs in a single request', 'parameters': {'urls': 'Required. Array[string].  A list of URLs to retrieve Open Graph metadata from.'}, 'output': 'Returns an array of objects, each containing the Open Graph metadata for the corresponding URL, including title, description, and image URL.', 'format': 'application/json', 'path': '/getMultipleOpenGraphData', 'method': 'get'}, {'name': 'enableCaching', 'description': 'Enable caching for OpenGraphr API requests', 'parameters': {'cachingService': \"Required. string. The caching service to use (e.g., 'Redis' or 'Memcached').\"}, 'output': 'Returns a confirmation message indicating that caching has been enabled and the chosen caching service is now being used for API requests.', 'format': 'application/json', 'path': '/enableCaching', 'method': 'post'}, {'name': 'disableCaching', 'description': 'Disable caching for OpenGraphr API requests', 'parameters': {}, 'output': 'Returns a confirmation message indicating that caching has been disabled and API requests will no longer use a caching service.', 'format': 'application/json', 'path': '/disableCaching', 'method': 'post'}, {'name': 'searchUrl', 'description': 'Search for a URL to retrieve its internal ID', 'parameters': {'query': 'Required. string. The search query to find the URL.'}, 'output': 'Returns an object containing the URL and its internal ID.', 'format': 'application/json', 'path': '/searchUrl', 'method': 'get'}, {'name': 'listUrls', 'description': 'List all URLs in the system', 'parameters': {'limit': 'integer. The maximum number of URLs to return.', 'offset': 'integer. The starting index for pagination.'}, 'output': 'Returns an array of objects, each containing a URL and its internal ID.', 'format': 'application/json', 'path': '/listUrls', 'method': 'get'}]"
            },
            {
                "role": "assistant",
                "content": "Node:\n1: Disable caching for the user's OpenGraphr API requests.\n2: Call the function to disable caching for the user's OpenGraphr API requests without any input.\nEdge: (START,1) (1,2) (2,END)"
            }
        ],
        "target": "graph",
        "id": "toolalpaca_285",
        "category": "eval"
    },
    {
        "source": "toolalpaca",
        "conversations": [
            {
                "role": "system",
                "content": "You are a helpful task planner.\nFirst I will give you the task description and tools list you can use to finish the task, and your task is to plan a sequence of nodes which are subtasks to achieve the task. Each node of workflow is a subtask, and you can use the tools to complete the subtask.\nAfter you construct the plan, since some subtasks may not be dependent on each other, while others may have dependencies. Please convert these nodes of subtasks into a topology diagram based on the task relevance in the workflow. The Graph should start with START node, and end with END node. \nKeep your output in foramt:\nNode:\n1.{subtask_1}\n2.{subtask_2}\n...\nEdges:\n(START,1)\n...\n(n,END))"
            },
            {
                "role": "user",
                "content": "Task: Extract the text from a scanned PDF document and save it as a TXT file with OCR.\nThe api list you can use: [{'name': 'Convert', 'description': 'Convert a file to a specified format with customized settings.', 'parameters': {'input': 'Required. string. The URL or base64-encoded data of the input file.', 'output_format': 'Required. string. The desired output format.', 'converter_options': 'Object. Customized settings for the conversion process.'}, 'output': 'JSON object with the following keys:.', 'format': 'application/json', 'path': '/convert', 'method': 'post'}, {'name': 'Extract', 'description': 'Extract content from a file such as text, images, and audio.', 'parameters': {'input': 'Required. string. The URL or base64-encoded data of the input file.', 'output_format': 'Required. string. The desired output format.', 'converter_options': 'Object. Customized settings for the extraction process.'}, 'output': 'JSON object with the following keys:.', 'format': 'application/json', 'path': '/extract', 'method': 'post'}, {'name': 'Merge', 'description': 'Merge multiple files into a single document.', 'parameters': {'input': 'Required. Array[Object{filename: string. The name of the file., url: string. The URL or base64-encoded data of the file.}. ]. The list of files to be merged.', 'output_format': 'Required. string. The desired output format.', 'converter_options': 'Object. Customized settings for the merging process.'}, 'output': 'JSON object with the following keys:.', 'format': 'application/json', 'path': '/merge', 'method': 'post'}, {'name': 'Compress', 'description': 'Compress a file into a specified format.', 'parameters': {'input': 'Required. string. The URL or base64-encoded data of the input file.', 'output_format': 'Required. string. The desired output format.', 'converter_options': 'Object. Customized settings for the compression process.'}, 'output': 'JSON object with the following keys:.', 'format': 'application/json', 'path': '/compress', 'method': 'post'}, {'name': 'Get Task', 'description': 'Retrieve the status of a conversion, extraction, merging, or compression task.', 'parameters': {'task_id': 'Required. string. The unique identifier of the task.'}, 'output': 'JSON object with the following keys:.', 'format': 'application/json', 'path': '/tasks/{task_id}', 'method': 'get'}]"
            },
            {
                "role": "assistant",
                "content": "Node:\n1: Utilize an OCR tool to extract text from a scanned PDF document and save the output as a TXT file.\n2: Monitor the progress of the OCR task using the task ID '12345' to ensure successful completion.\nEdge: (START, 1) (1, 2) (2, END)"
            }
        ],
        "target": "graph",
        "id": "toolalpaca_863",
        "category": "eval"
    },
    {
        "source": "toolalpaca",
        "conversations": [
            {
                "role": "system",
                "content": "You are a helpful task planner.\nFirst I will give you the task description and tools list you can use to finish the task, and your task is to plan a sequence of nodes which are subtasks to achieve the task. Each node of workflow is a subtask, and you can use the tools to complete the subtask.\nAfter you construct the plan, since some subtasks may not be dependent on each other, while others may have dependencies. Please convert these nodes of subtasks into a topology diagram based on the task relevance in the workflow. The Graph should start with START node, and end with END node. \nKeep your output in foramt:\nNode:\n1.{subtask_1}\n2.{subtask_2}\n...\nEdges:\n(START,1)\n...\n(n,END))"
            },
            {
                "role": "user",
                "content": "Task: I want to play a game where the jokers are wild. Can you add two jokers to a new deck, shuffle it, and then draw the top card for me?\nThe api list you can use: [{'name': 'shuffleDeck', 'description': 'Shuffles the deck of cards.', 'parameters': {'deckId': 'string. The ID of the deck to shuffle. If not provided, a new deck will be created and shuffled.'}, 'output': 'The deck has been shuffled.', 'format': 'application/json', 'path': '/shuffle', 'method': 'post'}, {'name': 'drawCards', 'description': 'Draws one or multiple cards from the deck.', 'parameters': {'deckId': 'Required. string. The ID of the deck to draw cards from.', 'count': 'integer. The number of cards to draw. Default is 1.'}, 'output': 'The cards have been drawn.', 'format': 'application/json', 'path': '/draw', 'method': 'get'}, {'name': 'drawAndReturnCards', 'description': 'Draws cards and returns them to the bottom of the deck.', 'parameters': {'deckId': 'Required. string. The ID of the deck to draw cards from and return them.', 'count': 'integer. The number of cards to draw and return. Default is 1.'}, 'output': 'The cards have been drawn and returned to the bottom of the deck.', 'format': 'application/json', 'path': '/drawAndReturn', 'method': 'get'}, {'name': 'customizeDeck', 'description': 'Customizes the deck by adding or removing particular cards.', 'parameters': {'deckId': 'string. The ID of the deck to customize.', 'addCards': \"Array[Object{value: string. The value of the card to add (e.g. '2', 'K', 'A')., suit: string. The suit of the card to add (e.g. 'hearts', 'diamonds', 'clubs', 'spades').}. ]. The cards to add to the deck.\", 'removeCards': \"Array[Object{value: string. The value of the card to remove (e.g. '2', 'K', 'A')., suit: string. The suit of the card to remove (e.g. 'hearts', 'diamonds', 'clubs', 'spades').}. ]. The cards to remove from the deck.\"}, 'output': 'The deck has been customized.', 'format': 'application/json', 'path': '/customize', 'method': 'post'}]"
            },
            {
                "role": "assistant",
                "content": "Node:\n1: Create a new deck of cards, add two jokers, shuffle it, and prepare to draw the top card.\n2: Shuffle the customized deck using the specified deck ID 'p9o35ahdzp1f' to randomize the order of the cards, including the jokers.\n3: Draw the top card from the shuffled deck to determine which card is now at the top after adding jokers and shuffling.\nEdge: (START,1) (1,2) (2,3) (3,END)"
            }
        ],
        "target": "graph",
        "id": "toolalpaca_296",
        "category": "eval"
    },
    {
        "source": "toolalpaca",
        "conversations": [
            {
                "role": "system",
                "content": "You are a helpful task planner.\nFirst I will give you the task description and tools list you can use to finish the task, and your task is to plan a sequence of nodes which are subtasks to achieve the task. Each node of workflow is a subtask, and you can use the tools to complete the subtask.\nAfter you construct the plan, since some subtasks may not be dependent on each other, while others may have dependencies. Please convert these nodes of subtasks into a topology diagram based on the task relevance in the workflow. The Graph should start with START node, and end with END node. \nKeep your output in foramt:\nNode:\n1.{subtask_1}\n2.{subtask_2}\n...\nEdges:\n(START,1)\n...\n(n,END))"
            },
            {
                "role": "user",
                "content": "Task: Show me the list of Puyo Puyo games released in North America according to the Puyo Nexus API.\nThe api list you can use: [{'name': 'getCharacterInfo', 'description': 'Retrieves detailed information about a specific playable character in Puyo Puyo.', 'parameters': {'characterName': 'Required. string. The name of the character to retrieve information for.'}, 'output': 'Successful response.', 'format': 'application/json', 'path': '/character', 'method': 'get'}, {'name': 'getGameModeInfo', 'description': 'Retrieves detailed information about a specific game mode in Puyo Puyo.', 'parameters': {'gameModeName': 'Required. string. The name of the game mode to retrieve information for.'}, 'output': 'Successful response.', 'format': 'application/json', 'path': '/game-mode', 'method': 'get'}, {'name': 'getArtwork', 'description': 'Retrieves Puyo Puyo-themed artwork and graphics.', 'parameters': {'artworkType': \"Required. string. One of: [character, stage, item]. The type of artwork to retrieve. Valid options include 'character', 'stage', and 'item'.\"}, 'output': 'Successful response.', 'format': 'application/json', 'path': '/artwork', 'method': 'get'}, {'name': 'getMechanicsInfo', 'description': 'Retrieves in-depth statistics and analysis of Puyo Puyo mechanics.', 'parameters': {'mechanicsType': \"Required. string. One of: [chain, garbage, offset]. The type of mechanics to retrieve. Valid options include 'chain', 'garbage', and 'offset'.\"}, 'output': 'Successful response.', 'format': 'application/json', 'path': '/mechanics', 'method': 'get'}]"
            },
            {
                "role": "assistant",
                "content": "Node:\n1: Retrieve the list of Puyo Puyo games available in North America using the appropriate game info retrieval tool.\n2: Instead of using the getGameModeInfo tool, switch to using the getArtwork tool to retrieve information relevant to Puyo Puyo games, focusing on the types of available items.\nEdge: (START,1) (1,2) (2,END)"
            }
        ],
        "target": "graph",
        "id": "toolalpaca_765",
        "category": "eval"
    },
    {
        "source": "toolalpaca",
        "conversations": [
            {
                "role": "system",
                "content": "You are a helpful task planner.\nFirst I will give you the task description and tools list you can use to finish the task, and your task is to plan a sequence of nodes which are subtasks to achieve the task. Each node of workflow is a subtask, and you can use the tools to complete the subtask.\nAfter you construct the plan, since some subtasks may not be dependent on each other, while others may have dependencies. Please convert these nodes of subtasks into a topology diagram based on the task relevance in the workflow. The Graph should start with START node, and end with END node. \nKeep your output in foramt:\nNode:\n1.{subtask_1}\n2.{subtask_2}\n...\nEdges:\n(START,1)\n...\n(n,END))"
            },
            {
                "role": "user",
                "content": "Task: I remember there's a bus stop near the Vancouver Public Library, but I can't recall its name. Can you search for the bus stops with \"library\" in their name and provide me with their details, including the bus routes available at each stop?\nThe api list you can use: [{'name': 'getRealTimeTransitData', 'description': 'Retrieve real-time and historical data on buses, trains, ferries, and other transit options.', 'parameters': {'routeNumber': 'Required. string. The route number of the transit option.', 'dateTime': 'string. The date and time for historical data in YYYY-MM-DDTHH:MM:SS format.'}, 'output': 'Returns an array of transit data objects containing information such as route number, vehicle type, direction, arrival time, departure time, and location coordinates.', 'format': 'application/json', 'path': '/real-time-transit-data', 'method': 'get'}, {'name': 'findStationsOrStops', 'description': 'Locate stations or stops near a specific address or GPS coordinate.', 'parameters': {'address': 'string. The address to search for nearby stations or stops.', 'latitude': 'number. The latitude coordinate to search for nearby stations or stops.', 'longitude': 'number. The longitude coordinate to search for nearby stations or stops.', 'radius': 'integer. The search radius in meters.'}, 'output': 'Returns an array of station or stop objects containing information such as station or stop ID, name, address, latitude, longitude, and distance from the search location.', 'format': 'application/json', 'path': '/stations-or-stops', 'method': 'get'}, {'name': 'getStationOrStopDetails', 'description': 'Retrieve detailed information about a specific station or stop including amenities, accessibility, and estimated wait times.', 'parameters': {'stationOrStopId': 'Required. integer. The ID of the station or stop to retrieve information for.'}, 'output': 'Returns a station or stop object containing information such as station or stop ID, name, address, latitude, longitude, amenities, accessibility features, and estimated wait times for transit options.', 'format': 'application/json', 'path': '/stations-or-stops/{stationOrStopId}', 'method': 'get'}, {'name': 'searchStationsOrStops', 'description': 'Search for stations or stops by name or partial name.', 'parameters': {'query': 'Required. string. The name or partial name of the station or stop to search for.'}, 'output': 'Returns an array of station or stop objects containing information such as station or stop ID, name, address, latitude, and longitude.', 'format': 'application/json', 'path': '/stations-or-stops/search', 'method': 'get'}, {'name': 'getTransitRouteDetails', 'description': 'Retrieve detailed information about a specific transit route, including stops, schedules, and route map.', 'parameters': {'routeNumber': 'Required. string. The route number of the transit option.'}, 'output': 'Returns a transit route object containing information such as route number, vehicle type, direction, stops, schedules, and route map URL.', 'format': 'application/json', 'path': '/transit-route-details', 'method': 'get'}]"
            },
            {
                "role": "assistant",
                "content": "Node:\n1: Search for bus stops near the Vancouver Public Library within a 500-meter radius to find those with \"library\" in their name and list the available bus routes at each stop.\n2: Retrieve detailed information about the bus stop with ID 12345 found near the Vancouver Public Library, including the specific bus routes available at this stop.\n3: Retrieve specific details about the bus route numbered \"123\" that is available at the bus stop near the Vancouver Public Library, including route maps, schedule, and service intervals.\nEdge: (START,1) (1,2) (1,3) (2,END) (3,END)"
            }
        ],
        "target": "graph",
        "id": "toolalpaca_198",
        "category": "eval"
    },
    {
        "source": "toolalpaca",
        "conversations": [
            {
                "role": "system",
                "content": "You are a helpful task planner.\nFirst I will give you the task description and tools list you can use to finish the task, and your task is to plan a sequence of nodes which are subtasks to achieve the task. Each node of workflow is a subtask, and you can use the tools to complete the subtask.\nAfter you construct the plan, since some subtasks may not be dependent on each other, while others may have dependencies. Please convert these nodes of subtasks into a topology diagram based on the task relevance in the workflow. The Graph should start with START node, and end with END node. \nKeep your output in foramt:\nNode:\n1.{subtask_1}\n2.{subtask_2}\n...\nEdges:\n(START,1)\n...\n(n,END))"
            },
            {
                "role": "user",
                "content": "Task: Can you give me the daily new cases, deaths, and recoveries for all countries?\nThe api list you can use: [{'name': 'getLatestByCountry', 'description': 'Retrieves the latest data on confirmed cases, deaths, and recoveries by country.', 'parameters': {'country': 'Required. string. The name of the country to retrieve data for.'}, 'output': 'Returns a JSON object containing the latest data on confirmed cases, deaths, and recoveries for the specified country.', 'format': 'application/json', 'path': '/latest/{country}', 'method': 'get'}, {'name': 'getDailyByCountry', 'description': 'Fetches data on daily new cases, deaths, and recoveries by country.', 'parameters': {'country': 'Required. string. The name of the country to retrieve data for.'}, 'output': 'Returns a JSON object containing the daily new cases, deaths, and recoveries for the specified country.', 'format': 'application/json', 'path': '/daily/{country}', 'method': 'get'}, {'name': 'getTotal', 'description': 'Retrieves data on the total number of cases, deaths, and recoveries.', 'parameters': {}, 'output': 'Returns a JSON object containing the total number of cases, deaths, and recoveries worldwide.', 'format': 'application/json', 'path': '/total', 'method': 'get'}, {'name': 'getLatestAllCountries', 'description': 'Retrieves the latest data on confirmed cases, deaths, and recoveries for all countries.', 'parameters': {}, 'output': 'Returns a JSON object containing the latest data on confirmed cases, deaths, and recoveries for all countries.', 'format': 'application/json', 'path': '/latest', 'method': 'get'}, {'name': 'getDailyAllCountries', 'description': 'Fetches data on daily new cases, deaths, and recoveries for all countries.', 'parameters': {}, 'output': 'Returns a JSON object containing the daily new cases, deaths, and recoveries for all countries.', 'format': 'application/json', 'path': '/daily', 'method': 'get'}]"
            },
            {
                "role": "assistant",
                "content": "Node:\n1: Retrieve the daily statistics for new cases, deaths, and recoveries for all countries.\n2: Use the getDailyByCountry tool by specifying each country to retrieve the daily counts of new cases, deaths, and recoveries.\nEdge: (START,1) (1,2) (2,END)"
            }
        ],
        "target": "graph",
        "id": "toolalpaca_639",
        "category": "eval"
    },
    {
        "source": "toolalpaca",
        "conversations": [
            {
                "role": "system",
                "content": "You are a helpful task planner.\nFirst I will give you the task description and tools list you can use to finish the task, and your task is to plan a sequence of nodes which are subtasks to achieve the task. Each node of workflow is a subtask, and you can use the tools to complete the subtask.\nAfter you construct the plan, since some subtasks may not be dependent on each other, while others may have dependencies. Please convert these nodes of subtasks into a topology diagram based on the task relevance in the workflow. The Graph should start with START node, and end with END node. \nKeep your output in foramt:\nNode:\n1.{subtask_1}\n2.{subtask_2}\n...\nEdges:\n(START,1)\n...\n(n,END))"
            },
            {
                "role": "user",
                "content": "Task: I'd like to compare the carbon emissions of two websites, \"https://www.example1.com/\" and \"https://www.example2.com/\". Please provide me with their carbon emissions, energy consumption, and page load times. Additionally, give me some suggestions to reduce their carbon footprints.\nThe api list you can use: [{'name': 'estimateCarbonEmissions', 'description': 'Estimate the carbon emissions of a web page.', 'parameters': {'url': 'Required. string.'}, 'output': 'Successful response.', 'format': 'application/json', 'path': '/estimateCarbonEmissions', 'method': 'post'}, {'name': 'getSuggestions', 'description': 'Suggest ways to reduce the carbon footprint of a website.', 'parameters': {'url': 'Required. string.'}, 'output': 'Successful response.', 'format': 'application/json', 'path': '/getSuggestions', 'method': 'post'}, {'name': 'searchWebsite', 'description': 'Search for a website to retrieve its ID and other relevant information.', 'parameters': {'query': 'Required. string.'}, 'output': 'Successful response.', 'format': 'application/json', 'path': '/searchWebsite', 'method': 'post'}, {'name': 'listWebsites', 'description': 'List websites with their IDs and other relevant information, with optional filters.', 'parameters': {'limit': 'integer. The maximum number of websites to return.', 'offset': 'integer. The number of websites to skip before starting to return results.', 'sortBy': \"string. The field to sort the results by (e.g., 'carbonEmissions', 'energyConsumption').\", 'sortOrder': \"string. One of: [asc, desc]. The order to sort the results in ('asc' for ascending, 'desc' for descending).\"}, 'output': 'Successful response.', 'format': 'application/json', 'path': '/listWebsites', 'method': 'get'}]"
            },
            {
                "role": "assistant",
                "content": "Node:\n1: Retrieve the carbon emissions, energy consumption, and page load times for the website \"https://www.example1.com/\" using the carbon estimate tool.\n2: Retrieve the carbon emissions, energy consumption, and page load times for the website \"https://www.example2.com/\" using the carbon estimate tool.\n3: Retrieve suggestions for reducing the carbon footprint of the website \"https://www.example1.com/\" using the carbon reduction suggestion tool.\n4: Retrieve suggestions for reducing the carbon footprint of the website \"https://www.example2.com/\" using the carbon reduction suggestion tool.\nEdge: (START,1) (START,2) (1,3) (2,4) (3,END) (4,END)"
            }
        ],
        "target": "graph",
        "id": "toolalpaca_230",
        "category": "eval"
    },
    {
        "source": "toolalpaca",
        "conversations": [
            {
                "role": "system",
                "content": "You are a helpful task planner.\nFirst I will give you the task description and tools list you can use to finish the task, and your task is to plan a sequence of nodes which are subtasks to achieve the task. Each node of workflow is a subtask, and you can use the tools to complete the subtask.\nAfter you construct the plan, since some subtasks may not be dependent on each other, while others may have dependencies. Please convert these nodes of subtasks into a topology diagram based on the task relevance in the workflow. The Graph should start with START node, and end with END node. \nKeep your output in foramt:\nNode:\n1.{subtask_1}\n2.{subtask_2}\n...\nEdges:\n(START,1)\n...\n(n,END))"
            },
            {
                "role": "user",
                "content": "Task: I'm looking for a new protein bar to try. Can you search for 'protein bars' and sort the results by the amount of protein per serving?\nThe api list you can use: [{'name': 'searchProduct', 'description': 'Search for food products using various keywords such as product name, brand, or barcode.', 'parameters': {'search_terms': 'Required. string. The search terms to be used for the search.', 'page': 'Required. integer. The page number of the search results to be returned.', 'page_size': 'Required. integer. The number of search results to be returned per page.'}, 'output': 'Search results.', 'format': 'application/json', 'path': '/searchProduct', 'method': 'post'}, {'name': 'retrieveProduct', 'description': 'Retrieve detailed information about a specific food product.', 'parameters': {'product_id': 'Required. string. The unique identifier of the product to be retrieved.'}, 'output': 'Detailed information about the product.', 'format': 'application/json', 'path': '/retrieveProduct', 'method': 'post'}, {'name': 'compareProducts', 'description': 'Compare the nutritional values of different food products.', 'parameters': {'product_ids': 'Required. Array[string]. '}, 'output': 'Detailed information about the products and their nutritional values.', 'format': 'application/json', 'path': '/compareProducts', 'method': 'post'}, {'name': 'addProduct', 'description': 'Add new food products to the database.', 'parameters': {'product_name': 'Required. string. The name of the product to be added.', 'brand_name': 'Required. string. The name of the brand of the product to be added.', 'ingredients': 'Required. string. The ingredients of the product to be added.', 'allergens': 'Required. string. The allergens of the product to be added.', 'nutrition_facts': 'Required. Object{calories: integer. The number of calories in the product., fat: integer. The amount of fat in the product., carbohydrates: integer. The amount of carbohydrates in the product., protein: integer. The amount of protein in the product.}. Contains the nutritional values of the product to be added.'}, 'output': 'Detailed information about the added product.', 'format': 'application/json', 'path': '/addProduct', 'method': 'post'}]"
            },
            {
                "role": "assistant",
                "content": "Node:\n1: Search for 'protein bars' using the searchProduct tool and sort the results by the amount of protein per serving.\n2: Compare the nutritional values of the protein bars from the search results to determine which one has the highest amount of protein per serving.\nEdge: (START,1) (1,2) (2,END)"
            }
        ],
        "target": "graph",
        "id": "toolalpaca_912",
        "category": "eval"
    },
    {
        "source": "toolalpaca",
        "conversations": [
            {
                "role": "system",
                "content": "You are a helpful task planner.\nFirst I will give you the task description and tools list you can use to finish the task, and your task is to plan a sequence of nodes which are subtasks to achieve the task. Each node of workflow is a subtask, and you can use the tools to complete the subtask.\nAfter you construct the plan, since some subtasks may not be dependent on each other, while others may have dependencies. Please convert these nodes of subtasks into a topology diagram based on the task relevance in the workflow. The Graph should start with START node, and end with END node. \nKeep your output in foramt:\nNode:\n1.{subtask_1}\n2.{subtask_2}\n...\nEdges:\n(START,1)\n...\n(n,END))"
            },
            {
                "role": "user",
                "content": "Task: Can you generate a demo paragraph with 50 words and 3 sentences?\nThe api list you can use: [{'name': 'generateParagraph', 'description': 'This function generates a demo paragraph with a specified number of words.', 'parameters': {'numWords': 'integer. The number of words in the paragraph.'}, 'output': 'The generated paragraph.', 'format': 'application/json', 'path': '/generateParagraph', 'method': 'post'}, {'name': 'generateSentences', 'description': 'This function generates a demo paragraph with a specified number of sentences.', 'parameters': {'numSentences': 'integer. The number of sentences in the paragraph.'}, 'output': 'The generated paragraph.', 'format': 'application/json', 'path': '/generateSentences', 'method': 'post'}, {'name': 'getAvailableWords', 'description': 'This function returns the range of available word counts for generating demo paragraphs.', 'parameters': {}, 'output': 'The available word counts.', 'format': 'application/json', 'path': '/getAvailableWords', 'method': 'get'}, {'name': 'getAvailableSentences', 'description': 'This function returns the range of available sentence counts for generating demo paragraphs.', 'parameters': {}, 'output': 'The available sentence counts.', 'format': 'application/json', 'path': '/getAvailableSentences', 'method': 'get'}]"
            },
            {
                "role": "assistant",
                "content": "Node:\n1: Generate a demonstration paragraph using a content creation tool, ensuring it consists of exactly 50 words and includes 3 sentences.\n2: Generate a demonstration paragraph using a content creation tool, ensuring it consists of exactly 3 sentences.\nEdge: (START,1) (1,2) (2,END)"
            }
        ],
        "target": "graph",
        "id": "toolalpaca_657",
        "category": "eval"
    },
    {
        "source": "toolalpaca",
        "conversations": [
            {
                "role": "system",
                "content": "You are a helpful task planner.\nFirst I will give you the task description and tools list you can use to finish the task, and your task is to plan a sequence of nodes which are subtasks to achieve the task. Each node of workflow is a subtask, and you can use the tools to complete the subtask.\nAfter you construct the plan, since some subtasks may not be dependent on each other, while others may have dependencies. Please convert these nodes of subtasks into a topology diagram based on the task relevance in the workflow. The Graph should start with START node, and end with END node. \nKeep your output in foramt:\nNode:\n1.{subtask_1}\n2.{subtask_2}\n...\nEdges:\n(START,1)\n...\n(n,END))"
            },
            {
                "role": "user",
                "content": "Task: I'd like to know how many hours I've spent playing \"Half-Life 2.\" First, log me into my account, and then show me my playtime for the game.\nThe api list you can use: [{'name': 'authenticateUser', 'description': \"Securely authenticate a user's login and authorization.\", 'parameters': {'steamApiKey': 'Required. string. Your Steam API key.', 'steamId': \"Required. string. The user's Steam ID.\"}, 'output': 'User authentication successful.', 'format': 'application/json', 'path': '/authenticateUser', 'method': 'post'}, {'name': 'getPlayerStats', 'description': 'Retrieve player stats and other game data.', 'parameters': {'steamApiKey': 'Required. string. Your Steam API key.', 'steamId': \"Required. string. The user's Steam ID.\", 'appId': 'Required. integer. The ID of the game for which stats are being requested.'}, 'output': 'Player stats retrieved successfully.', 'format': 'application/json', 'path': '/getPlayerStats', 'method': 'post'}, {'name': 'getPlayerInventory', 'description': \"Access a player's inventory, including hats, weapons, and other items.\", 'parameters': {'steamApiKey': 'Required. string. Your Steam API key.', 'steamId': \"Required. string. The user's Steam ID.\", 'appId': 'Required. integer. The ID of the game for which the inventory is being requested.'}, 'output': 'Player inventory retrieved successfully.', 'format': 'application/json', 'path': '/getPlayerInventory', 'method': 'post'}, {'name': 'getPlayerAchievements', 'description': 'Retrieve player achievements and unlockables.', 'parameters': {'steamApiKey': 'Required. string. Your Steam API key.', 'steamId': \"Required. string. The user's Steam ID.\", 'appId': 'Required. integer. The ID of the game for which achievements are being requested.'}, 'output': 'Player achievements retrieved successfully.', 'format': 'application/json', 'path': '/getPlayerAchievements', 'method': 'post'}, {'name': 'getGameLeaderboard', 'description': 'Access leaderboard data for a specific game.', 'parameters': {'steamApiKey': 'Required. string. Your Steam API key.', 'appId': 'Required. integer. The ID of the game for which the leaderboard is being requested.', 'leaderboardId': 'integer. The ID of the specific leaderboard to retrieve. If not provided, returns the global leaderboard.'}, 'output': 'Game leaderboard retrieved successfully.', 'format': 'application/json', 'path': '/getGameLeaderboard', 'method': 'post'}]"
            },
            {
                "role": "assistant",
                "content": "Node:\n1: Log into the user's gaming account to access their playtime statistics for \"Half-Life 2\".\n2: Retrieve the playtime statistics for the game \"Half-Life 2\" for the authenticated user.\n3: Retrieve the user's game inventory to find the playtime details for \"Half-Life 2.\"\n4: Retrieve the user's achievements for the game \"Half-Life 2\" to locate any related playtime information.\n5: Retrieve the game leaderboard data for \"Half-Life 2\" to find the user's playtime information.\nEdge: (START,1) (1,2) (1,3) (1,4) (1,5) (2,END) (3,END) (4,END) (5,END)"
            }
        ],
        "target": "graph",
        "id": "toolalpaca_226",
        "category": "eval"
    },
    {
        "source": "toolalpaca",
        "conversations": [
            {
                "role": "system",
                "content": "You are a helpful task planner.\nFirst I will give you the task description and tools list you can use to finish the task, and your task is to plan a sequence of nodes which are subtasks to achieve the task. Each node of workflow is a subtask, and you can use the tools to complete the subtask.\nAfter you construct the plan, since some subtasks may not be dependent on each other, while others may have dependencies. Please convert these nodes of subtasks into a topology diagram based on the task relevance in the workflow. The Graph should start with START node, and end with END node. \nKeep your output in foramt:\nNode:\n1.{subtask_1}\n2.{subtask_2}\n...\nEdges:\n(START,1)\n...\n(n,END))"
            },
            {
                "role": "user",
                "content": "Task: I'm studying the relationship between education expenditure and literacy rates. First, I need the public spending on education as a percentage of GDP for the United States from 1990 to 2000. Can you help me with that?\nThe api list you can use: [{'name': 'getCountryData', 'description': 'Retrieve country-specific data.', 'parameters': {'countryCode': 'Required. string. The 2-letter ISO country code.', 'indicatorCode': 'string. The code for the specific indicator to retrieve data for.', 'dateRange': \"string. The date range for the data in the format 'YYYY:YYYY'.\"}, 'output': 'Successful response.', 'format': 'application/json', 'path': '/country-data', 'method': 'get'}, {'name': 'getEntityData', 'description': 'Retrieve data for a specific entity.', 'parameters': {'entityCode': 'Required. string. The code for the specific entity to retrieve data for.', 'indicatorCode': 'string. The code for the specific indicator to retrieve data for.', 'dateRange': \"string. The date range for the data in the format 'YYYY:YYYY'.\"}, 'output': 'Successful response.', 'format': 'application/json', 'path': '/entity-data', 'method': 'get'}, {'name': 'getProjectData', 'description': 'Retrieve data on World Bank projects.', 'parameters': {'projectId': 'Required. string. The unique identifier for the specific project to retrieve data for.'}, 'output': 'Successful response.', 'format': 'application/json', 'path': '/project-data', 'method': 'get'}, {'name': 'getIdaData', 'description': 'Retrieve data on International Development Association (IDA) resources and projects.', 'parameters': {'idaCode': 'Required. string. The unique identifier for the specific IDA resource or project to retrieve data for.'}, 'output': 'Successful response.', 'format': 'application/json', 'path': '/ida-data', 'method': 'get'}, {'name': 'searchIndicator', 'description': 'Search for an indicator code based on a keyword or phrase.', 'parameters': {'keyword': 'Required. string. The keyword or phrase to search for in the indicator descriptions.'}, 'output': 'Successful response.', 'format': 'application/json', 'path': '/search-indicator', 'method': 'get'}, {'name': 'listCountries', 'description': 'Retrieve a list of countries and their 2-letter ISO country codes.', 'parameters': {}, 'output': 'Successful response.', 'format': 'application/json', 'path': '/list-countries', 'method': 'get'}, {'name': 'listEntities', 'description': 'Retrieve a list of entities, such as regions or income groups, and their codes.', 'parameters': {}, 'output': 'Successful response.', 'format': 'application/json', 'path': '/list-entities', 'method': 'get'}]"
            },
            {
                "role": "assistant",
                "content": "Node:\n1: Retrieve the indicator code for public spending on education as a percentage of GDP using the keyword search.\n2: Obtain the public spending on education as a percentage of GDP for the United States for the years 1990 to 2000 using the specified indicator code.\nEdge: (START,1) (1,2) (2,END)"
            }
        ],
        "target": "graph",
        "id": "toolalpaca_39",
        "category": "eval"
    },
    {
        "source": "toolalpaca",
        "conversations": [
            {
                "role": "system",
                "content": "You are a helpful task planner.\nFirst I will give you the task description and tools list you can use to finish the task, and your task is to plan a sequence of nodes which are subtasks to achieve the task. Each node of workflow is a subtask, and you can use the tools to complete the subtask.\nAfter you construct the plan, since some subtasks may not be dependent on each other, while others may have dependencies. Please convert these nodes of subtasks into a topology diagram based on the task relevance in the workflow. The Graph should start with START node, and end with END node. \nKeep your output in foramt:\nNode:\n1.{subtask_1}\n2.{subtask_2}\n...\nEdges:\n(START,1)\n...\n(n,END))"
            },
            {
                "role": "user",
                "content": "Task: I'm looking for a quote from the anime Sword Art Online, can you help me out?\nThe api list you can use: [{'name': 'getRandomQuote', 'description': 'Retrieves a random anime quote', 'parameters': {}, 'output': 'Successful response.', 'format': 'application/json', 'path': '/random', 'method': 'get'}, {'name': 'getQuoteByCharacter', 'description': 'Retrieves a quote based on the character name', 'parameters': {'character': 'Required. string. The name of the character.'}, 'output': 'Successful response.', 'format': 'application/json', 'path': '/quotes/character/{character}', 'method': 'get'}, {'name': 'getQuoteByAnime', 'description': 'Retrieves a quote from a specific anime title', 'parameters': {'anime': 'Required. string. The name of the anime.'}, 'output': 'Successful response.', 'format': 'application/json', 'path': '/quotes/anime/{anime}', 'method': 'get'}]"
            },
            {
                "role": "assistant",
                "content": "Node:\n1: Retrieve a quote from the anime \"Sword Art Online\" using the quote retrieval tool.\n2: Retrieve a random anime quote using the random quote retrieval tool.\nEdge: (START,1) (START,2) (1,END) (2,END)"
            }
        ],
        "target": "graph",
        "id": "toolalpaca_474",
        "category": "eval"
    },
    {
        "source": "toolalpaca",
        "conversations": [
            {
                "role": "system",
                "content": "You are a helpful task planner.\nFirst I will give you the task description and tools list you can use to finish the task, and your task is to plan a sequence of nodes which are subtasks to achieve the task. Each node of workflow is a subtask, and you can use the tools to complete the subtask.\nAfter you construct the plan, since some subtasks may not be dependent on each other, while others may have dependencies. Please convert these nodes of subtasks into a topology diagram based on the task relevance in the workflow. The Graph should start with START node, and end with END node. \nKeep your output in foramt:\nNode:\n1.{subtask_1}\n2.{subtask_2}\n...\nEdges:\n(START,1)\n...\n(n,END))"
            },
            {
                "role": "user",
                "content": "Task: Hey, can you tell me the name of the continent where the IP address 123.45.67.89 is located?\nThe api list you can use: [{'name': 'lookupIP', 'description': 'Lookup IP address', 'parameters': {'ip': 'Required. string. The IP address to be looked up.'}, 'output': 'Successful response.', 'format': 'application/json', 'path': '/lookupIP', 'method': 'get'}, {'name': 'getCountryInfo', 'description': 'Get country information', 'parameters': {'ip': 'Required. string. The IP address to be looked up.'}, 'output': 'Successful response.', 'format': 'application/json', 'path': '/getCountryInfo', 'method': 'get'}]"
            },
            {
                "role": "assistant",
                "content": "Node:\n1: Use the IP lookup tool to find the geographical location, including the continent, associated with the IP address \"123.45.67.89\".\n2: Use the \"getCountryInfo\" tool to obtain the continent name for the country code associated with the IP address \"123\nEdge: (START,1) (1,2) (2,END)"
            }
        ],
        "target": "graph",
        "id": "toolalpaca_835",
        "category": "eval"
    },
    {
        "source": "toolalpaca",
        "conversations": [
            {
                "role": "system",
                "content": "You are a helpful task planner.\nFirst I will give you the task description and tools list you can use to finish the task, and your task is to plan a sequence of nodes which are subtasks to achieve the task. Each node of workflow is a subtask, and you can use the tools to complete the subtask.\nAfter you construct the plan, since some subtasks may not be dependent on each other, while others may have dependencies. Please convert these nodes of subtasks into a topology diagram based on the task relevance in the workflow. The Graph should start with START node, and end with END node. \nKeep your output in foramt:\nNode:\n1.{subtask_1}\n2.{subtask_2}\n...\nEdges:\n(START,1)\n...\n(n,END))"
            },
            {
                "role": "user",
                "content": "Task: I'm a huge fan of Manchester United, and I want to know how they're doing in the Premier League this season. Can you tell me their current standings and also find out when their next match is?\nThe api list you can use: [{'name': 'getTeamStandings', 'description': 'Retrieve standings information for any current Premier League team.', 'parameters': {'teamName': 'Required. string. The name of the Premier League team for which standings information is requested.'}, 'output': \"Successful response with team's current position in the standings, total points, matches played, wins, draws, losses, goals scored, goals conceded, and goal difference.\", 'format': 'application/json', 'path': '/teamStandings', 'method': 'get'}, {'name': 'getLiveMatchData', 'description': 'View live match data including scores, red and yellow cards, substitutions, and more.', 'parameters': {'matchId': 'Required. integer. The unique identifier of the Premier League match for which live data is requested.'}, 'output': 'Successful response with live match data including current score, match status (ongoing, halftime, or finished), red and yellow cards, substitutions, and other relevant match events.', 'format': 'application/json', 'path': '/liveMatchData', 'method': 'get'}, {'name': 'searchMatches', 'description': 'Search for Premier League matches based on team names, date range, or match status.', 'parameters': {'teamName': 'string. The name of the Premier League team to filter matches by.', 'startDate': 'string. The start date of the date range to filter matches by (YYYY-MM-DD).', 'endDate': 'string. The end date of the date range to filter matches by (YYYY-MM-DD).', 'matchStatus': 'string. One of: [ongoing, halftime, finished]. The status of the match to filter by (ongoing, halftime, or finished).'}, 'output': 'Successful response with a list of Premier League matches that match the search criteria, including match IDs, team names, match dates, and match status.', 'format': 'application/json', 'path': '/searchMatches', 'method': 'get'}, {'name': 'getPlayerStatistics', 'description': 'Monitor player statistics including goals scored, assists made, and minutes played.', 'parameters': {'playerId': 'Required. integer. The unique identifier of the Premier League player for which statistics are requested.'}, 'output': \"Successful response with the player's statistics including goals scored, assists made, minutes played, appearances, and other relevant performance metrics.\", 'format': 'application/json', 'path': '/playerStatistics', 'method': 'get'}, {'name': 'searchPlayers', 'description': 'Search for Premier League players based on team name, position, or player name.', 'parameters': {'teamName': 'string. The name of the Premier League team to filter players by.', 'position': 'string. One of: [goalkeeper, defender, midfielder, forward]. The position of the player to filter by (goalkeeper, defender, midfielder, or forward).', 'playerName': 'string. The name of the player to search for.'}, 'output': 'Successful response with a list of Premier League players that match the search criteria, including player IDs, names, positions, and team names.', 'format': 'application/json', 'path': '/searchPlayers', 'method': 'get'}]"
            },
            {
                "role": "assistant",
                "content": "Node:\n1: Retrieve the next match schedule for Manchester United.\n2: Retrieve match details such as date and opponent for the next match of Manchester United.\nEdge: (START,1) (1,2) (1,END)"
            }
        ],
        "target": "graph",
        "id": "toolalpaca_339",
        "category": "eval"
    },
    {
        "source": "toolalpaca",
        "conversations": [
            {
                "role": "system",
                "content": "You are a helpful task planner.\nFirst I will give you the task description and tools list you can use to finish the task, and your task is to plan a sequence of nodes which are subtasks to achieve the task. Each node of workflow is a subtask, and you can use the tools to complete the subtask.\nAfter you construct the plan, since some subtasks may not be dependent on each other, while others may have dependencies. Please convert these nodes of subtasks into a topology diagram based on the task relevance in the workflow. The Graph should start with START node, and end with END node. \nKeep your output in foramt:\nNode:\n1.{subtask_1}\n2.{subtask_2}\n...\nEdges:\n(START,1)\n...\n(n,END))"
            },
            {
                "role": "user",
                "content": "Task: I'm thinking of starting a business in New York City. Can you help me find information about the libraries in Manhattan and the crime rates in the Financial District for the year 2021?\nThe api list you can use: [{'name': 'getCityServices', 'description': 'Retrieve information about city services such as libraries, parks, and schools.', 'parameters': {'serviceType': \"Required. string. One of: [libraries, parks, schools]. The type of city service to retrieve information about (e.g., 'libraries', 'parks', 'schools').\", 'location': \"string. A specific location within New York City to filter results by (e.g., 'Manhattan', 'Brooklyn').\"}, 'output': 'A list of city services with their names, addresses, contact information, and operating hours.', 'format': 'application/json', 'path': '/city-services', 'method': 'get'}, {'name': 'getCrimeStatistics', 'description': 'Access crime statistics for different neighborhoods in the city.', 'parameters': {'neighborhood': \"Required. string. The neighborhood to retrieve crime statistics for (e.g., 'Upper East Side', 'Harlem').\", 'year': 'integer. The year to retrieve crime statistics for (e.g., 2020).'}, 'output': 'A list of crime statistics for the specified neighborhood, including the number of reported crimes, crime types, and crime rates.', 'format': 'application/json', 'path': '/crime-statistics', 'method': 'get'}, {'name': 'getHealthAndEnvironmentalData', 'description': 'Obtain information on health and environmental issues, including air quality and water safety.', 'parameters': {'dataType': \"Required. string. The type of health or environmental data to retrieve (e.g., 'air quality', 'water safety').\", 'location': \"string. A specific location within New York City to filter results by (e.g., 'Manhattan', 'Brooklyn').\"}, 'output': 'A list of health and environmental data for the specified location, including measurements, trends, and any relevant warnings or advisories.', 'format': 'application/json', 'path': '/health-environmental-data', 'method': 'get'}, {'name': 'getCityFinances', 'description': 'Get data on city finances, including budgets and spending.', 'parameters': {'financeType': \"Required. string. The type of city finance data to retrieve (e.g., 'budgets', 'spending').\", 'year': 'integer. The year to retrieve city finance data for (e.g., 2020).'}, 'output': 'A list of city finance data for the specified year, including budget allocations, spending categories, and any relevant financial reports or analyses.', 'format': 'application/json', 'path': '/city-finances', 'method': 'get'}]"
            },
            {
                "role": "assistant",
                "content": "Node:\n1: Retrieve information on libraries located in Manhattan.\n2: Retrieve crime statistics for the Financial District for the year 2021.\nEdge: (START,1) (START,2) (1,END) (2,END)"
            }
        ],
        "target": "graph",
        "id": "toolalpaca_419",
        "category": "eval"
    },
    {
        "source": "toolalpaca",
        "conversations": [
            {
                "role": "system",
                "content": "You are a helpful task planner.\nFirst I will give you the task description and tools list you can use to finish the task, and your task is to plan a sequence of nodes which are subtasks to achieve the task. Each node of workflow is a subtask, and you can use the tools to complete the subtask.\nAfter you construct the plan, since some subtasks may not be dependent on each other, while others may have dependencies. Please convert these nodes of subtasks into a topology diagram based on the task relevance in the workflow. The Graph should start with START node, and end with END node. \nKeep your output in foramt:\nNode:\n1.{subtask_1}\n2.{subtask_2}\n...\nEdges:\n(START,1)\n...\n(n,END))"
            },
            {
                "role": "user",
                "content": "Task: Can you tell me more about my colleague, John Doe? I'd like to know his job title and contact information.\nThe api list you can use: [{'name': 'getUserActivityLogs', 'description': 'Retrieve user activity logs from Microsoft 365 services for a specified user.', 'parameters': {'userId': 'Required. string. The user ID for which activity logs are to be retrieved.', 'startTime': 'string. The start time for the logs in ISO 8601 format.', 'endTime': 'string. The end time for the logs in ISO 8601 format.', 'activityType': 'string. One of: [login, mail, calendar, drive, sharepoint, teams]. The type of activity to filter logs by.'}, 'output': 'An array of activity log objects containing the activity type, timestamp, and details for each activity.', 'format': 'application/json', 'path': '/userActivityLogs', 'method': 'get'}, {'name': 'getUserProfile', 'description': 'Access user profile data for a specified user.', 'parameters': {'userId': 'Required. string. The user ID for which profile data is to be retrieved.'}, 'output': \"A user profile object containing the user's display name, email address, job title, and other profile information.\", 'format': 'application/json', 'path': '/userProfile', 'method': 'get'}, {'name': 'getUserContacts', 'description': 'Retrieve the contacts of a specified user.', 'parameters': {'userId': 'Required. string. The user ID for which contacts are to be retrieved.', 'search': 'string. A search query to filter contacts by name or email address.', 'pageSize': 'integer. The number of contacts to return per page.', 'pageNumber': 'integer. The page number to return.'}, 'output': \"An array of contact objects containing the contact's name, email address, phone number, and other contact information.\", 'format': 'application/json', 'path': '/userContacts', 'method': 'get'}, {'name': 'manageUserCalendar', 'description': 'Manage and update user calendars, including creating, updating, and deleting events.', 'parameters': {'userId': 'string.', 'action': 'string. One of: [create, update, delete].', 'eventId': 'string.', 'eventData': 'Object. '}, 'output': 'A success message for the performed action, or an error message if the action failed.', 'format': 'application/json', 'path': '/userCalendar', 'method': 'post'}, {'name': 'getUserEmails', 'description': \"Retrieve emails from a specified user's mailbox.\", 'parameters': {'userId': 'Required. string. The user ID for which emails are to be retrieved.', 'search': 'string. A search query to filter emails by subject, sender, or recipient.', 'pageSize': 'integer. The number of emails to return per page.', 'pageNumber': 'integer. The page number to return.'}, 'output': \"An array of email objects containing the email's subject, sender, recipient, timestamp, and other email information.\", 'format': 'application/json', 'path': '/userEmails', 'method': 'get'}, {'name': 'manageUserTasks', 'description': 'Manage and update user tasks, including creating, updating, and deleting tasks.', 'parameters': {'userId': 'string.', 'action': 'string. One of: [create, update, delete].', 'taskId': 'string.', 'taskData': 'Object. '}, 'output': 'A success message for the performed action, or an error message if the action failed.', 'format': 'application/json', 'path': '/userTasks', 'method': 'post'}, {'name': 'getSharePointSiteData', 'description': 'Retrieve data from a specified SharePoint site.', 'parameters': {'siteId': 'Required. string. The SharePoint site ID for which data is to be retrieved.', 'listId': 'string. The list ID to retrieve data from within the site.'}, 'output': \"An object containing the site's data, including site name, URL, and list data if a list ID was provided.\", 'format': 'application/json', 'path': '/sharePointSiteData', 'method': 'get'}, {'name': 'getOneDriveData', 'description': 'Retrieve data from a specified OneDrive for Business account.', 'parameters': {'userId': 'Required. string. The user ID for which OneDrive data is to be retrieved.', 'folderId': 'string. The folder ID to retrieve data from within the OneDrive account.'}, 'output': \"An object containing the OneDrive account's data, including account name, URL, and folder data if a folder ID was provided.\", 'format': 'application/json', 'path': '/oneDriveData', 'method': 'get'}]"
            },
            {
                "role": "assistant",
                "content": "Node:\n1: Retrieve the job title and contact information for the user profile of John Doe.\n2: Retrieve the contact list associated with John Doe's user profile.\nEdge: (START,1) (1,2) (2,END)"
            }
        ],
        "target": "graph",
        "id": "toolalpaca_154",
        "category": "eval"
    },
    {
        "source": "toolalpaca",
        "conversations": [
            {
                "role": "system",
                "content": "You are a helpful task planner.\nFirst I will give you the task description and tools list you can use to finish the task, and your task is to plan a sequence of nodes which are subtasks to achieve the task. Each node of workflow is a subtask, and you can use the tools to complete the subtask.\nAfter you construct the plan, since some subtasks may not be dependent on each other, while others may have dependencies. Please convert these nodes of subtasks into a topology diagram based on the task relevance in the workflow. The Graph should start with START node, and end with END node. \nKeep your output in foramt:\nNode:\n1.{subtask_1}\n2.{subtask_2}\n...\nEdges:\n(START,1)\n...\n(n,END))"
            },
            {
                "role": "user",
                "content": "Task: Hey, can you help me add my friend's email to my mailing list? I want to send them updates about my business.\nThe api list you can use: [{'name': 'addSubscriberToList', 'description': 'Add a new subscriber to a specific mailing list', 'parameters': {'email': 'Required. string. The email address of the subscriber.', 'list_id': 'Required. string. The unique ID of the mailing list to add the subscriber to.', 'merge_fields': \"Object. Additional fields to add to the subscriber's profile, such as first name, last name, etc.\"}, 'output': 'Success.', 'format': 'application/json', 'path': '/addSubscriberToList', 'method': 'post'}, {'name': 'updateSubscriber', 'description': \"Update an existing subscriber's information\", 'parameters': {'email': 'Required. string. The email address of the subscriber to update.', 'list_id': 'Required. string. The unique ID of the mailing list the subscriber belongs to.', 'merge_fields': \"Object. Fields to update in the subscriber's profile, such as first name, last name, etc.\"}, 'output': 'Success.', 'format': 'application/json', 'path': '/updateSubscriber', 'method': 'put'}, {'name': 'deleteSubscriber', 'description': 'Remove a subscriber from a specific mailing list', 'parameters': {'email': 'Required. string. The email address of the subscriber to remove.', 'list_id': 'Required. string. The unique ID of the mailing list the subscriber belongs to.'}, 'output': 'Success.', 'format': 'application/json', 'path': '/deleteSubscriber', 'method': 'delete'}, {'name': 'createCampaign', 'description': 'Create a new marketing campaign using a customizable template', 'parameters': {'type': 'Required. string. The type of campaign to create. One of: [regular, plain-text, A/B testing].', 'recipients': 'Required. Object. The recipients of the campaign, including the mailing list ID or segment ID.', 'settings': 'Required. Object. The settings for the campaign, including the subject line, from name and email, and content.'}, 'output': 'Success.', 'format': 'application/json', 'path': '/createCampaign', 'method': 'post'}, {'name': 'sendCampaign', 'description': 'Send a previously created campaign to its recipients', 'parameters': {'campaign_id': 'Required. string. The unique ID of the campaign to send.'}, 'output': 'Success.', 'format': 'application/json', 'path': '/sendCampaign', 'method': 'post'}, {'name': 'getReport', 'description': 'Retrieve performance metrics for a specific campaign', 'parameters': {'campaign_id': 'Required. string. The unique ID of the campaign to retrieve metrics for.'}, 'output': 'Success.', 'format': 'application/json', 'path': '/getReport', 'method': 'get'}]"
            },
            {
                "role": "assistant",
                "content": "Node:\n1: Gather the email address of the friend and the unique ID of the mailing list to proceed with adding the friend to the mailing list.\n2: Add the subscriber using the email \"john.doe@example.com\" to the mailing list with the unique ID \"ML001\".\nEdge: (START,1) (1,2) (2,END)"
            }
        ],
        "target": "graph",
        "id": "toolalpaca_534",
        "category": "eval"
    },
    {
        "source": "toolalpaca",
        "conversations": [
            {
                "role": "system",
                "content": "You are a helpful task planner.\nFirst I will give you the task description and tools list you can use to finish the task, and your task is to plan a sequence of nodes which are subtasks to achieve the task. Each node of workflow is a subtask, and you can use the tools to complete the subtask.\nAfter you construct the plan, since some subtasks may not be dependent on each other, while others may have dependencies. Please convert these nodes of subtasks into a topology diagram based on the task relevance in the workflow. The Graph should start with START node, and end with END node. \nKeep your output in foramt:\nNode:\n1.{subtask_1}\n2.{subtask_2}\n...\nEdges:\n(START,1)\n...\n(n,END))"
            },
            {
                "role": "user",
                "content": "Task: I'm researching countries that belong to the ASEAN regional bloc. Can you find a member country and provide me with its name, capital, flag, and the languages spoken there?\nThe api list you can use: [{'name': 'getCountryDetails', 'description': 'Retrieve basic information on a specific country, including its name, capital, flag, and population.', 'parameters': {'country': 'Required. string. The name or ISO code of the country for which details are to be retrieved.'}, 'output': 'Successful response.', 'format': 'application/json', 'path': '/country/{country}', 'method': 'get'}, {'name': 'getRegionalBlocs', 'description': 'Get information on the regional blocs a given country belongs to.', 'parameters': {'country': 'Required. string. The name or ISO code of the country for which regional blocs information is to be retrieved.'}, 'output': 'Successful response.', 'format': 'application/json', 'path': '/regionalblocs/{country}', 'method': 'get'}, {'name': 'getCurrencyInformation', 'description': \"Access information on a specific country's currency, including its name, symbol, and exchange rate.\", 'parameters': {'country': 'Required. string. The name or ISO code of the country for which currency information is to be retrieved.'}, 'output': 'Successful response.', 'format': 'application/json', 'path': '/currency/{country}', 'method': 'get'}, {'name': 'searchCountries', 'description': 'Search for countries based on a query, such as a partial name or ISO code.', 'parameters': {'query': 'Required. string. The search query to find matching countries.'}, 'output': 'Successful response.', 'format': 'application/json', 'path': '/search/{query}', 'method': 'get'}, {'name': 'listCountries', 'description': 'List all countries available in the API.', 'parameters': {'region': \"string. Filter countries by the specified region (e.g., 'Europe', 'Asia').\"}, 'output': 'Successful response.', 'format': 'application/json', 'path': '/list', 'method': 'get'}]"
            },
            {
                "role": "assistant",
                "content": "Node:\n1: Retrieve the details of a country in the ASEAN regional bloc including its name, capital, flag, and languages spoken.\n2: Obtain detailed information about Thailand, including its capital, flag, and languages spoken.\nEdge: (START,1) (1,2) (2,END)"
            }
        ],
        "target": "graph",
        "id": "toolalpaca_256",
        "category": "eval"
    },
    {
        "source": "toolalpaca",
        "conversations": [
            {
                "role": "system",
                "content": "You are a helpful task planner.\nFirst I will give you the task description and tools list you can use to finish the task, and your task is to plan a sequence of nodes which are subtasks to achieve the task. Each node of workflow is a subtask, and you can use the tools to complete the subtask.\nAfter you construct the plan, since some subtasks may not be dependent on each other, while others may have dependencies. Please convert these nodes of subtasks into a topology diagram based on the task relevance in the workflow. The Graph should start with START node, and end with END node. \nKeep your output in foramt:\nNode:\n1.{subtask_1}\n2.{subtask_2}\n...\nEdges:\n(START,1)\n...\n(n,END))"
            },
            {
                "role": "user",
                "content": "Task: I'm looking for a new profile picture. Can you find a random anime image with the tags \"portrait, smiling\"? Also, please provide the source URL so I can credit the artist if I use their work.\nThe api list you can use: [{'name': 'getRandomImage', 'description': 'Retrieve a random image with the option of searching for images with specific tags.', 'parameters': {'tags': 'string. Optional. A comma-separated list of tags to filter the images.'}, 'output': 'Successful response.', 'format': 'application/json', 'path': '/randomImage', 'method': 'get'}, {'name': 'getAllTags', 'description': \"Retrieve a list of all available tags for the API's images.\", 'parameters': {}, 'output': 'Successful response.', 'format': 'application/json', 'path': '/allTags', 'method': 'get'}, {'name': 'getImageSource', 'description': 'Retrieve the source URL of an image.', 'parameters': {'imageUrl': 'string. Required. The URL of the image for which the source URL is to be retrieved.'}, 'output': 'Successful response.', 'format': 'application/json', 'path': '/imageSource', 'method': 'get'}, {'name': 'addImage', 'description': 'Add an image to the platform with associated tags.', 'parameters': {'imageUrl': 'string. Required. The URL of the image to be added.', 'tags': 'string. Optional. A comma-separated list of tags to associate with the image.', 'sourceUrl': 'string. Optional. The source URL of the image.'}, 'output': 'Successful response.', 'format': 'application/json', 'path': '/addImage', 'method': 'post'}]"
            },
            {
                "role": "assistant",
                "content": "Node:\n1: Retrieve a random anime image with the specified tags \"portrait, smiling\" and obtain the source URL for artist credit.\n2: Retrieve the source URL for the given anime image link to credit the artist.\nEdge: (START,1) (1,2) (2,END)"
            }
        ],
        "target": "graph",
        "id": "toolalpaca_244",
        "category": "eval"
    },
    {
        "source": "toolalpaca",
        "conversations": [
            {
                "role": "system",
                "content": "You are a helpful task planner.\nFirst I will give you the task description and tools list you can use to finish the task, and your task is to plan a sequence of nodes which are subtasks to achieve the task. Each node of workflow is a subtask, and you can use the tools to complete the subtask.\nAfter you construct the plan, since some subtasks may not be dependent on each other, while others may have dependencies. Please convert these nodes of subtasks into a topology diagram based on the task relevance in the workflow. The Graph should start with START node, and end with END node. \nKeep your output in foramt:\nNode:\n1.{subtask_1}\n2.{subtask_2}\n...\nEdges:\n(START,1)\n...\n(n,END))"
            },
            {
                "role": "user",
                "content": "Task: I suspect that one of my devices has been compromised. Can you retrieve detailed information about its SSL certificate and any identified vulnerabilities?\nThe api list you can use: [{'name': 'searchHostsAndDevices', 'description': 'Search for hosts and devices based on various criteria such as geolocation, software version, and hostname.', 'parameters': {'query': 'Required. string. The search query to filter hosts and devices.', 'page': 'integer. The page number of the search results.', 'perPage': 'integer. The number of results per page.'}, 'output': 'A list of hosts and devices that match the search criteria, including their IP addresses, hostnames, geolocation, software versions, and other relevant metadata.', 'format': 'application/json', 'path': '/search', 'method': 'get'}, {'name': 'identifyVulnerabilities', 'description': 'Identify vulnerabilities in SSL certificates and network protocols for a given host or device.', 'parameters': {'ipAddress': 'Required. string. The IP address of the host or device to analyze for vulnerabilities.'}, 'output': 'A list of identified vulnerabilities, including their severity, description, and potential impact on the host or device.', 'format': 'application/json', 'path': '/vulnerabilities', 'method': 'get'}, {'name': 'getHostDetails', 'description': 'Retrieve detailed information about a specific host or device, including open ports, DNS records, and other metadata.', 'parameters': {'ipAddress': 'Required. string. The IP address of the host or device to retrieve information for.'}, 'output': 'Detailed information about the specified host or device, including open ports, DNS records, SSL certificates, geolocation, software versions, and other relevant metadata.', 'format': 'application/json', 'path': '/hosts/{ipAddress}', 'method': 'get'}, {'name': 'getCertificateDetails', 'description': 'Retrieve detailed information about a specific SSL certificate.', 'parameters': {'certificateId': 'Required. string. The unique identifier of the SSL certificate to retrieve information for.'}, 'output': 'Detailed information about the specified SSL certificate, including its issuer, subject, validity period, and any identified vulnerabilities.', 'format': 'application/json', 'path': '/certificates/{certificateId}', 'method': 'get'}, {'name': 'listCertificates', 'description': 'List SSL certificates for a specific host or device.', 'parameters': {'ipAddress': 'Required. string. The IP address of the host or device to list SSL certificates for.', 'page': 'integer. The page number of the search results.', 'perPage': 'integer. The number of results per page.'}, 'output': 'A list of SSL certificates associated with the specified host or device, including their unique identifiers, issuers, subjects, and validity periods.', 'format': 'application/json', 'path': '/certificates', 'method': 'get'}]"
            },
            {
                "role": "assistant",
                "content": "Node:\n1: Retrieve SSL certificate information and identify vulnerabilities for a specified device.\n2: Retrieve SSL certificate details and assess any associated vulnerabilities for the identified device.\nEdge: (START,1) (1,2) (2,END)"
            }
        ],
        "target": "graph",
        "id": "toolalpaca_412",
        "category": "eval"
    },
    {
        "source": "toolalpaca",
        "conversations": [
            {
                "role": "system",
                "content": "You are a helpful task planner.\nFirst I will give you the task description and tools list you can use to finish the task, and your task is to plan a sequence of nodes which are subtasks to achieve the task. Each node of workflow is a subtask, and you can use the tools to complete the subtask.\nAfter you construct the plan, since some subtasks may not be dependent on each other, while others may have dependencies. Please convert these nodes of subtasks into a topology diagram based on the task relevance in the workflow. The Graph should start with START node, and end with END node. \nKeep your output in foramt:\nNode:\n1.{subtask_1}\n2.{subtask_2}\n...\nEdges:\n(START,1)\n...\n(n,END))"
            },
            {
                "role": "user",
                "content": "Task: I'm considering investing in cryptocurrencies, but I want to make sure I choose the right exchange. Can you help me find out which exchanges support trading between Bitcoin (BTC) and Ethereum (ETH), and what their current exchange rates are?\nThe api list you can use: [{'name': 'getExchangeRates', 'description': 'Retrieve real-time exchange rates for all supported exchanges.', 'parameters': {'baseCurrency': 'Required. string. The base currency code.', 'quoteCurrency': 'string. The quote currency code.', 'exchange': 'string. The exchange identifier.'}, 'output': 'A list of exchange rate objects.', 'format': 'application/json', 'path': '/exchange_rates', 'method': 'get'}, {'name': 'getHistoricalData', 'description': 'Retrieve historical data for a specific currency pair up to six years.', 'parameters': {'baseCurrency': 'Required. string. The base currency code.', 'quoteCurrency': 'Required. string. The quote currency code.', 'timePeriod': \"Required. string. The time period for historical data (e.g., '1DAY', '1MONTH', '1YEAR').\", 'startDate': 'string. The start date for historical data in YYYY-MM-DD format.', 'endDate': 'string. The end date for historical data in YYYY-MM-DD format.'}, 'output': 'A list of historical data objects.', 'format': 'application/json', 'path': '/historical_data', 'method': 'get'}, {'name': 'getTimeSeriesData', 'description': 'Retrieve time-series data for a specific currency pair up to 24 hours.', 'parameters': {'baseCurrency': 'Required. string. The base currency code.', 'quoteCurrency': 'Required. string. The quote currency code.', 'interval': \"Required. string. The time interval for time-series data (e.g., '1MIN', '5MIN', '1HOUR').\", 'startTime': 'string. The start time for time-series data in YYYY-MM-DDTHH:MM:SS format.', 'endTime': 'string. The end time for time-series data in YYYY-MM-DDTHH:MM:SS format.'}, 'output': 'A list of time-series data objects.', 'format': 'application/json', 'path': '/time_series_data', 'method': 'get'}, {'name': 'getTradesData', 'description': 'Retrieve data on trades for a specific currency pair.', 'parameters': {'baseCurrency': 'Required. string. The base currency code.', 'quoteCurrency': 'Required. string. The quote currency code.', 'exchange': 'string. The exchange identifier.', 'startTime': 'string. The start time for trade data in YYYY-MM-DDTHH:MM:SS format.', 'endTime': 'string. The end time for trade data in YYYY-MM-DDTHH:MM:SS format.', 'limit': 'integer. The maximum number of trade data objects to return.'}, 'output': 'A list of trade data objects.', 'format': 'application/json', 'path': '/trades_data', 'method': 'get'}, {'name': 'getQuotesData', 'description': 'Retrieve data on quotes for a specific currency pair.', 'parameters': {'baseCurrency': 'Required. string. The base currency code.', 'quoteCurrency': 'Required. string. The quote currency code.', 'exchange': 'string. The exchange identifier.', 'startTime': 'string. The start time for quote data in YYYY-MM-DDTHH:MM:SS format.', 'endTime': 'string. The end time for quote data in YYYY-MM-DDTHH:MM:SS format.', 'limit': 'integer. The maximum number of quote data objects to return.'}, 'output': 'A list of quote data objects.', 'format': 'application/json', 'path': '/quotes_data', 'method': 'get'}, {'name': 'getOrderBookData', 'description': 'Retrieve data on order books for a specific currency pair.', 'parameters': {'baseCurrency': 'Required. string. The base currency code.', 'quoteCurrency': 'Required. string. The quote currency code.', 'exchange': 'string. The exchange identifier.', 'depth': 'integer. The depth of the order book to retrieve.', 'timestamp': 'string. The timestamp for the order book data in YYYY-MM-DDTHH:MM:SS format.'}, 'output': 'An order book data object.', 'format': 'application/json', 'path': '/order_book_data', 'method': 'get'}, {'name': 'listExchanges', 'description': 'Retrieve a list of all supported exchanges.', 'parameters': {}, 'output': 'A list of exchange objects.', 'format': 'application/json', 'path': '/exchanges', 'method': 'get'}, {'name': 'listCurrencyPairs', 'description': 'Retrieve a list of all supported currency pairs for a specific exchange.', 'parameters': {'exchange': 'Required. string. The exchange identifier.'}, 'output': 'A list of currency pair objects.', 'format': 'application/json', 'path': '/currency_pairs', 'method': 'get'}]"
            },
            {
                "role": "assistant",
                "content": "Node:\n1: Identify the exchanges that support trading between Bitcoin (BTC) and Ethereum (ETH) and retrieve their current exchange rates.\n2: Retrieve the current exchange rates for trading between Bitcoin (BTC) and Ethereum (ETH) on identified exchanges such as Binance.\n3: Retrieve the current exchange rates for trading between Bitcoin (BTC) and Ethereum (ETH) on Coinbase.\nEdge: (START,1) (1,2) (1,3) (2,END) (3,END)"
            }
        ],
        "target": "graph",
        "id": "toolalpaca_346",
        "category": "eval"
    },
    {
        "source": "toolalpaca",
        "conversations": [
            {
                "role": "system",
                "content": "You are a helpful task planner.\nFirst I will give you the task description and tools list you can use to finish the task, and your task is to plan a sequence of nodes which are subtasks to achieve the task. Each node of workflow is a subtask, and you can use the tools to complete the subtask.\nAfter you construct the plan, since some subtasks may not be dependent on each other, while others may have dependencies. Please convert these nodes of subtasks into a topology diagram based on the task relevance in the workflow. The Graph should start with START node, and end with END node. \nKeep your output in foramt:\nNode:\n1.{subtask_1}\n2.{subtask_2}\n...\nEdges:\n(START,1)\n...\n(n,END))"
            },
            {
                "role": "user",
                "content": "Task: What is the current location of the Metro Purple Line train heading towards Wilshire/Western?\nThe api list you can use: [{'name': 'getVehicleLocations', 'description': 'Returns the real-time location and status of all Metro vehicles.', 'parameters': {}, 'output': 'An array of objects, each representing a Metro vehicle.', 'format': 'application/json', 'path': '/vehicleLocations', 'method': 'get'}, {'name': 'getVehicleLocation', 'description': 'Returns the real-time location and status of a specific Metro vehicle.', 'parameters': {'id': 'Required. integer. The unique identifier of the vehicle.'}, 'output': 'An object containing the real-time location and status of the specified Metro vehicle.', 'format': 'application/json', 'path': '/vehicleLocation', 'method': 'get'}, {'name': 'getRouteMap', 'description': 'Returns a map of a specific Metro route.', 'parameters': {'route_id': 'Required. integer. The unique identifier of the route.'}, 'output': 'A URL to a map of the specified route.', 'format': 'application/json', 'path': '/routeMap', 'method': 'get'}, {'name': 'getRouteSchedule', 'description': 'Returns the schedule for a specific Metro route.', 'parameters': {'route_id': 'Required. integer. The unique identifier of the route.'}, 'output': 'An array of objects, each representing a stop on the specified route.', 'format': 'application/json', 'path': '/routeSchedule', 'method': 'get'}, {'name': 'getStopSchedule', 'description': 'Returns the schedule for a specific Metro stop.', 'parameters': {'stop_id': 'Required. integer. The unique identifier of the stop.'}, 'output': 'An array of objects, each representing a route that stops at the specified stop.', 'format': 'application/json', 'path': '/stopSchedule', 'method': 'get'}, {'name': 'searchRoutes', 'description': 'Returns a list of Metro routes that match the specified search criteria.', 'parameters': {'query': 'Required. string. The search query.', 'max_results': 'integer. The maximum number of results to return. Default is 10.', 'page_token': 'string. A token representing a specific page of results to return.'}, 'output': 'An array of objects, each representing a Metro route that matches the search criteria.', 'format': 'application/json', 'path': '/searchRoutes', 'method': 'get'}, {'name': 'searchStops', 'description': 'Returns a list of Metro stops that match the specified search criteria.', 'parameters': {'query': 'Required. string. The search query.', 'max_results': 'integer. The maximum number of results to return. Default is 10.', 'page_token': 'string. A token representing a specific page of results to return.'}, 'output': 'An array of objects, each representing a Metro stop that matches the search criteria.', 'format': 'application/json', 'path': '/searchStops', 'method': 'get'}]"
            },
            {
                "role": "assistant",
                "content": "Node:\n1: Retrieve the\n2: Obtain the real-time location of the Metro Purple Line train using the appropriate transit API.\n3: Identify the specific Metro Purple Line train heading towards Wilshire/Western by querying detailed location information using the vehicle ID.\nEdge: (START,1) (1,2) (2,3) (3,END)"
            }
        ],
        "target": "graph",
        "id": "toolalpaca_712",
        "category": "eval"
    },
    {
        "source": "toolalpaca",
        "conversations": [
            {
                "role": "system",
                "content": "You are a helpful task planner.\nFirst I will give you the task description and tools list you can use to finish the task, and your task is to plan a sequence of nodes which are subtasks to achieve the task. Each node of workflow is a subtask, and you can use the tools to complete the subtask.\nAfter you construct the plan, since some subtasks may not be dependent on each other, while others may have dependencies. Please convert these nodes of subtasks into a topology diagram based on the task relevance in the workflow. The Graph should start with START node, and end with END node. \nKeep your output in foramt:\nNode:\n1.{subtask_1}\n2.{subtask_2}\n...\nEdges:\n(START,1)\n...\n(n,END))"
            },
            {
                "role": "user",
                "content": "Task: I want to streamline my HR process, can you guide me on how to use an API that generates employment contracts?\nThe api list you can use: [{'name': 'getDocumentStatus', 'description': 'Retrieve the status of a specific document', 'parameters': {'document_id': 'Required. string. The ID of the document.'}, 'output': 'Document status retrieved successfully.', 'format': 'application/json', 'path': '/document/status', 'method': 'get'}, {'name': 'sendReminder', 'description': 'Send a reminder to a recipient to sign a document', 'parameters': {'document_id': 'string. The ID of the document.', 'recipient_id': 'string. The ID of the recipient.'}, 'output': 'Reminder sent successfully.', 'format': 'application/json', 'path': '/document/reminder', 'method': 'post'}, {'name': 'createTemplate', 'description': 'Create a new document template', 'parameters': {'name': 'string. The name of the template.', 'document_data': 'Object. The data to be used in the template.', 'folder_id': 'string. The ID of the folder to store the template in.'}, 'output': 'Template created successfully.', 'format': 'application/json', 'path': '/template/create', 'method': 'post'}, {'name': 'importData', 'description': 'Import data into a document', 'parameters': {'document_id': 'string. The ID of the document.', 'data': 'Object. The data to be imported into the document.'}, 'output': 'Data imported successfully.', 'format': 'application/json', 'path': '/document/import', 'method': 'post'}, {'name': 'applyBranding', 'description': 'Apply custom branding to a document', 'parameters': {'document_id': 'string. The ID of the document.', 'branding_id': 'string. The ID of the branding to apply.'}, 'output': 'Branding applied successfully.', 'format': 'application/json', 'path': '/document/branding', 'method': 'post'}, {'name': 'createSignatureRequest', 'description': 'Create a new signature request for a document', 'parameters': {'document_id': 'string. The ID of the document.', 'signers': 'Array[]. The signers for the document.', 'message': 'string. A message to include with the signature request.', 'subject': 'string. The subject of the signature request.'}, 'output': 'Signature request created successfully.', 'format': 'application/json', 'path': '/signature/create', 'method': 'post'}]"
            },
            {
                "role": "assistant",
                "content": "Node:\n1: Guide the user on generating employment contracts, and inquire about their requirements such as document types, templates, or data for integration.\n2: Assist in creating and setting up an employment contract template, then guide on importing data into the document using available templates.\n3: Correct the data structure for importing templates in the API request to properly configure and generate employment contracts.\n4: Proceed to import specific employee data into the prepared employment contract template.\nEdge: (START,1) (1,2) (2,3) (3,4) (4,END)"
            }
        ],
        "target": "graph",
        "id": "toolalpaca_748",
        "category": "eval"
    },
    {
        "source": "toolalpaca",
        "conversations": [
            {
                "role": "system",
                "content": "You are a helpful task planner.\nFirst I will give you the task description and tools list you can use to finish the task, and your task is to plan a sequence of nodes which are subtasks to achieve the task. Each node of workflow is a subtask, and you can use the tools to complete the subtask.\nAfter you construct the plan, since some subtasks may not be dependent on each other, while others may have dependencies. Please convert these nodes of subtasks into a topology diagram based on the task relevance in the workflow. The Graph should start with START node, and end with END node. \nKeep your output in foramt:\nNode:\n1.{subtask_1}\n2.{subtask_2}\n...\nEdges:\n(START,1)\n...\n(n,END))"
            },
            {
                "role": "user",
                "content": "Task: Please show me the rewards for completing the \"The Ultimate Weapon\" achievement in FFXIV Collect.\nThe api list you can use: [{'name': 'searchItems', 'description': 'Search for items by name, description, or category.', 'parameters': {'query': 'Required. string. The search query.'}, 'output': 'An array of items that match the search query.', 'format': 'application/json', 'path': '/searchItems', 'method': 'get'}, {'name': 'getItemDetails', 'description': 'Retrieve item details, including rarity, level, and attributes.', 'parameters': {'itemId': 'Required. integer. The ID of the item.'}, 'output': 'An object containing the details of the item.', 'format': 'application/json', 'path': '/getItemDetails/{itemId}', 'method': 'get'}, {'name': 'getMountDetails', 'description': 'Retrieve mount details, including acquisition methods and related achievements.', 'parameters': {'mountId': 'Required. integer. The ID of the mount.'}, 'output': 'An object containing the details of the mount.', 'format': 'application/json', 'path': '/getMountDetails/{mountId}', 'method': 'get'}, {'name': 'getMinionDetails', 'description': 'Retrieve minion details, including acquisition methods and related achievements.', 'parameters': {'minionId': 'Required. integer. The ID of the minion.'}, 'output': 'An object containing the details of the minion.', 'format': 'application/json', 'path': '/getMinionDetails/{minionId}', 'method': 'get'}, {'name': 'getAchievementDetails', 'description': 'Retrieve achievement details, including requirements and rewards.', 'parameters': {'achievementId': 'Required. integer. The ID of the achievement.'}, 'output': 'An object containing the details of the achievement.', 'format': 'application/json', 'path': '/getAchievementDetails/{achievementId}', 'method': 'get'}, {'name': 'getTitleDetails', 'description': 'Retrieve title details, including requirements and rewards.', 'parameters': {'titleId': 'Required. integer. The ID of the title.'}, 'output': 'An object containing the details of the title.', 'format': 'application/json', 'path': '/getTitleDetails/{titleId}', 'method': 'get'}]"
            },
            {
                "role": "assistant",
                "content": "Node:\n1: Retrieve the rewards associated with the \"The Ultimate Weapon\" achievement in FFXIV Collect.\n2: Retrieve detailed information and rewards for the achievement with ID 12345 from the FFXIV Collect API.\nEdge: (START,1) (1,2) (2,END)"
            }
        ],
        "target": "graph",
        "id": "toolalpaca_518",
        "category": "eval"
    },
    {
        "source": "toolalpaca",
        "conversations": [
            {
                "role": "system",
                "content": "You are a helpful task planner.\nFirst I will give you the task description and tools list you can use to finish the task, and your task is to plan a sequence of nodes which are subtasks to achieve the task. Each node of workflow is a subtask, and you can use the tools to complete the subtask.\nAfter you construct the plan, since some subtasks may not be dependent on each other, while others may have dependencies. Please convert these nodes of subtasks into a topology diagram based on the task relevance in the workflow. The Graph should start with START node, and end with END node. \nKeep your output in foramt:\nNode:\n1.{subtask_1}\n2.{subtask_2}\n...\nEdges:\n(START,1)\n...\n(n,END))"
            },
            {
                "role": "user",
                "content": "Task: I want to know the locations in Beijing where air quality data is collected. Can you help me with that?\nThe api list you can use: [{'name': 'getCountries', 'description': 'Retrieve a list of countries with their respective ISO codes.', 'parameters': {}, 'output': 'An array of objects, each object contains the following information:.', 'format': 'application/json', 'path': '/countries', 'method': 'get'}, {'name': 'getCities', 'description': 'Retrieve a list of cities with their respective air quality measurement data.', 'parameters': {'country': 'Required. string. The ISO code of the country where the cities are located.'}, 'output': 'An array of objects, each object contains the following information:.', 'format': 'application/json', 'path': '/cities', 'method': 'get'}, {'name': 'getLocations', 'description': 'Retrieve a list of locations with their respective air quality measurement data.', 'parameters': {'city': 'Required. string. The name of the city where the locations are located.', 'country': 'Required. string. The ISO code of the country where the locations are located.'}, 'output': 'An array of objects, each object contains the following information:.', 'format': 'application/json', 'path': '/locations', 'method': 'get'}, {'name': 'getLatest', 'description': 'Retrieve the latest air quality measurement for a specific location.', 'parameters': {'city': 'Required. string. The name of the city where the location is located.', 'country': 'Required. string. The ISO code of the country where the location is located.', 'location': 'Required. string. The name of the location.'}, 'output': 'An object containing the following information:.', 'format': 'application/json', 'path': '/latest', 'method': 'get'}, {'name': 'getData', 'description': 'Retrieve air quality measurement data for a specific location.', 'parameters': {'city': 'Required. string. The name of the city where the location is located.', 'country': 'Required. string. The ISO code of the country where the location is located.', 'location': 'Required. string. The name of the location.', 'parameter': 'Required. string. The pollutant to retrieve data for.', 'date_from': 'Required. string. The start date of the date range to retrieve data for (format: YYYY-MM-DD).', 'date_to': 'Required. string. The end date of the date range to retrieve data for (format: YYYY-MM-DD).'}, 'output': 'An array of objects, each object contains the following information:.', 'format': 'application/json', 'path': '/data', 'method': 'get'}]"
            },
            {
                "role": "assistant",
                "content": "Node:\n1: Retrieve the list of cities in China and then identify specific locations for air quality measurement within Beijing.\n2: Retrieve the list of cities in China to further identify the locations within Beijing where air quality data is gathered.\n3: Retrieve a list of specific locations in Beijing where air quality data is collected.\nEdge: (START,1) (START,2) (1,3) (2,3) (3,END)"
            }
        ],
        "target": "graph",
        "id": "toolalpaca_862",
        "category": "eval"
    },
    {
        "source": "toolalpaca",
        "conversations": [
            {
                "role": "system",
                "content": "You are a helpful task planner.\nFirst I will give you the task description and tools list you can use to finish the task, and your task is to plan a sequence of nodes which are subtasks to achieve the task. Each node of workflow is a subtask, and you can use the tools to complete the subtask.\nAfter you construct the plan, since some subtasks may not be dependent on each other, while others may have dependencies. Please convert these nodes of subtasks into a topology diagram based on the task relevance in the workflow. The Graph should start with START node, and end with END node. \nKeep your output in foramt:\nNode:\n1.{subtask_1}\n2.{subtask_2}\n...\nEdges:\n(START,1)\n...\n(n,END))"
            },
            {
                "role": "user",
                "content": "Task: Hey, can you help me find the nearest gas station to my current location using an API? I need to know the address and coordinates of the closest gas station.\nThe api list you can use: [{'name': 'geocode', 'description': 'Converts an address into latitude and longitude coordinates.', 'parameters': {'address': 'Required. string. The address to be geocoded.'}, 'output': 'Successful response.', 'format': 'application/json', 'path': '/geocode', 'method': 'post'}, {'name': 'reverseGeocode', 'description': 'Converts latitude and longitude coordinates into a physical address.', 'parameters': {'latitude': 'Required. number. The latitude coordinate.', 'longitude': 'Required. number. The longitude coordinate.'}, 'output': 'Successful response.', 'format': 'application/json', 'path': '/reverseGeocode', 'method': 'post'}, {'name': 'batchGeocode', 'description': 'Processes multiple addresses at once and returns their corresponding latitude and longitude coordinates.', 'parameters': {'addresses': 'Required. Array[string]. The addresses to be geocoded.'}, 'output': 'Successful response.', 'format': 'application/json', 'path': '/batchGeocode', 'method': 'post'}]"
            },
            {
                "role": "assistant",
                "content": "Node:\n1: Retrieve the user's current location using latitude and longitude coordinates to find the nearest gas station.\n2: Retrieve coordinates for the nearest gas station based on the user's current address.\n3: Determine the location of the nearest gas station by providing a list of addresses for geocoding.\nEdge: (START,1) (1,2) (2,3) (3,END)"
            }
        ],
        "target": "graph",
        "id": "toolalpaca_833",
        "category": "eval"
    },
    {
        "source": "toolalpaca",
        "conversations": [
            {
                "role": "system",
                "content": "You are a helpful task planner.\nFirst I will give you the task description and tools list you can use to finish the task, and your task is to plan a sequence of nodes which are subtasks to achieve the task. Each node of workflow is a subtask, and you can use the tools to complete the subtask.\nAfter you construct the plan, since some subtasks may not be dependent on each other, while others may have dependencies. Please convert these nodes of subtasks into a topology diagram based on the task relevance in the workflow. The Graph should start with START node, and end with END node. \nKeep your output in foramt:\nNode:\n1.{subtask_1}\n2.{subtask_2}\n...\nEdges:\n(START,1)\n...\n(n,END))"
            },
            {
                "role": "user",
                "content": "Task: Show me the most cited papers on cryptography in the last five years.\nThe api list you can use: [{'name': 'search', 'description': 'Search for research articles based on a variety of fields, including author name, keyword, and publication date.', 'parameters': {'search_query': 'Required. string. The search query to be used for the search.', 'start': 'Required. integer. The index of the first result to be returned.', 'max_results': 'Required. integer. The maximum number of results to be returned.'}, 'output': 'Successful response.', 'format': 'application/json', 'path': '/search', 'method': 'get'}, {'name': 'retrieveMetadata', 'description': 'Retrieve metadata about a specific research article, including its title, author(s), abstract, and publication date.', 'parameters': {'id': 'Required. string. The unique identifier for the article.'}, 'output': 'Successful response.', 'format': 'application/json', 'path': '/retrieveMetadata', 'method': 'get'}, {'name': 'retrieveFullText', 'description': 'Retrieve the full text for a specific research article, subject to certain usage restrictions.', 'parameters': {'id': 'Required. string. The unique identifier for the article.'}, 'output': 'Successful response.', 'format': 'application/json', 'path': '/retrieveFullText', 'method': 'get'}]"
            },
            {
                "role": "assistant",
                "content": "Node:\n1: Perform a search for academic papers related to cryptography published in the last five years, and identify those with the highest citation counts.\n2: Retrieve additional metadata for each of the articles returned in the search to ensure comprehensive information on the most cited papers in cryptography from the last five years.\n3: Continue retrieving additional metadata for the remaining articles identified in the initial search to gather complete information on each of them.\n4: Proceed to retrieve metadata for the last remaining article identified in the initial search to complete the collection of comprehensive details for all relevant papers.\nEdge: (START,1) (1,2) (2,3) (3,4) (4,END)"
            }
        ],
        "target": "graph",
        "id": "toolalpaca_620",
        "category": "eval"
    },
    {
        "source": "toolalpaca",
        "conversations": [
            {
                "role": "system",
                "content": "You are a helpful task planner.\nFirst I will give you the task description and tools list you can use to finish the task, and your task is to plan a sequence of nodes which are subtasks to achieve the task. Each node of workflow is a subtask, and you can use the tools to complete the subtask.\nAfter you construct the plan, since some subtasks may not be dependent on each other, while others may have dependencies. Please convert these nodes of subtasks into a topology diagram based on the task relevance in the workflow. The Graph should start with START node, and end with END node. \nKeep your output in foramt:\nNode:\n1.{subtask_1}\n2.{subtask_2}\n...\nEdges:\n(START,1)\n...\n(n,END))"
            },
            {
                "role": "user",
                "content": "Task: I'm visiting New York City next week and I want to find some great Italian restaurants near Times Square. Can you help me find a few options and show me some photos of the venues?\nThe api list you can use: [{'name': 'searchVenues', 'description': \"Search for venues based on user's location and preferences.\", 'parameters': {'ll': 'Required. string. Latitude and longitude coordinates.', 'query': 'string. A search term to be matched against venue names, categories, etc.', 'radius': 'integer. Search radius in meters.', 'limit': 'integer. Maximum number of results to return.'}, 'output': 'A list of venues with their basic information, including venue ID, name, address, category, and distance from the provided coordinates.', 'format': 'application/json', 'path': '/venues/search', 'method': 'get'}, {'name': 'getVenueDetails', 'description': 'Retrieve detailed information about a specific venue.', 'parameters': {'venueId': 'Required. string. The unique identifier of the venue.'}, 'output': 'Detailed information about the venue, including name, address, contact information, categories, rating, photos, tips, and more.', 'format': 'application/json', 'path': '/venues/{venueId}', 'method': 'get'}, {'name': 'getUserProfile', 'description': \"Retrieve a user's profile information.\", 'parameters': {'userId': 'Required. string. The unique identifier of the user.'}, 'output': \"User's profile information, including name, photo, contact information, friends, check-ins, and tips.\", 'format': 'application/json', 'path': '/users/{userId}', 'method': 'get'}, {'name': 'getVenuePhotos', 'description': 'Retrieve photos associated with a specific venue.', 'parameters': {'venueId': 'Required. string. The unique identifier of the venue.', 'limit': 'integer. Maximum number of results to return.'}, 'output': 'A list of photos with their URLs, user information, and timestamps.', 'format': 'application/json', 'path': '/venues/{venueId}/photos', 'method': 'get'}, {'name': 'getVenueTips', 'description': 'Retrieve tips and recommendations for a specific venue.', 'parameters': {'venueId': 'Required. string. The unique identifier of the venue.', 'limit': 'integer. Maximum number of results to return.'}, 'output': 'A list of tips with their text, user information, and timestamps.', 'format': 'application/json', 'path': '/venues/{venueId}/tips', 'method': 'get'}, {'name': 'searchTips', 'description': \"Search for tips based on user's location and preferences.\", 'parameters': {'ll': 'Required. string. Latitude and longitude coordinates.', 'query': 'string. A search term to be matched against tip text.', 'radius': 'integer. Search radius in meters.', 'limit': 'integer. Maximum number of results to return.'}, 'output': 'A list of tips with their text, user information, venue information, and timestamps.', 'format': 'application/json', 'path': '/tips/search', 'method': 'get'}, {'name': 'getGeographicBoundaries', 'description': 'Retrieve geographic boundaries for a specific location.', 'parameters': {'ll': 'Required. string. Latitude and longitude coordinates.'}, 'output': 'Geographic boundaries information, including city, state, country, and their respective boundaries.', 'format': 'application/json', 'path': '/geographic/boundaries', 'method': 'get'}]"
            },
            {
                "role": "assistant",
                "content": "Node:\n1: Find Italian restaurants within a 1000-meter radius of Times Square and retrieve information about top three options including photos.\n2: Retrieve detailed information about the venue with ID \"4bfa5649f61dc9b6a21db7d1\" including photos and additional descriptive details.\n3: Retrieve up to three photos for the venue with ID \"4bef7de82dd476b099fa0522\" to provide visual details about the venue.\n4: Retrieve up to three tips for the venue with ID \"545c30b5498ea03c8b3cffcc\" to understand customer experiences and recommendations.\nEdge: (START,1) (1,2) (1,3) (1,4) (2,END) (3,END) (4,END)"
            }
        ],
        "target": "graph",
        "id": "toolalpaca_269",
        "category": "eval"
    },
    {
        "source": "toolalpaca",
        "conversations": [
            {
                "role": "system",
                "content": "You are a helpful task planner.\nFirst I will give you the task description and tools list you can use to finish the task, and your task is to plan a sequence of nodes which are subtasks to achieve the task. Each node of workflow is a subtask, and you can use the tools to complete the subtask.\nAfter you construct the plan, since some subtasks may not be dependent on each other, while others may have dependencies. Please convert these nodes of subtasks into a topology diagram based on the task relevance in the workflow. The Graph should start with START node, and end with END node. \nKeep your output in foramt:\nNode:\n1.{subtask_1}\n2.{subtask_2}\n...\nEdges:\n(START,1)\n...\n(n,END))"
            },
            {
                "role": "user",
                "content": "Task: What are the most popular cards being used in Clash Royale tournaments?\nThe api list you can use: [{'name': 'getPlayer', 'description': 'Retrieve information about a specific player, including game progress, statistics, and deck composition.', 'parameters': {'playerTag': \"Required. string. The player's unique identifier, obtained from the game or other API functions.\"}, 'output': 'Successful response.', 'format': 'application/json', 'path': '/getPlayer', 'method': 'get'}, {'name': 'getClan', 'description': 'Retrieve detailed information about a specific clan, including member lists, war performance, and more.', 'parameters': {'clanTag': \"Required. string. The clan's unique identifier, obtained from the game or other API functions.\"}, 'output': 'Successful response.', 'format': 'application/json', 'path': '/getClan', 'method': 'get'}, {'name': 'getCard', 'description': 'Retrieve information about a specific card, including rarity, elixir cost, and statistics.', 'parameters': {'cardId': \"Required. string. The card's unique identifier, obtained from the game or other API functions.\"}, 'output': 'Successful response.', 'format': 'application/json', 'path': '/getCard', 'method': 'get'}]"
            },
            {
                "role": "assistant",
                "content": "Node:\n1: Check the current popular cards being utilized in Clash Royale tournaments by querying the clan details using the clanTag specific to tournaments.\n2: Retrieve a valid player tag specific to tournament players in order to obtain their card usage details.\n3: Acquire information on a specific tournament player by fetching data using a potentially correct player tag to analyze the most popular cards in Clash Royale tournaments.\nEdge: (START,1) (1,2) (2,3) (3,END)"
            }
        ],
        "target": "graph",
        "id": "toolalpaca_650",
        "category": "eval"
    },
    {
        "source": "toolalpaca",
        "conversations": [
            {
                "role": "system",
                "content": "You are a helpful task planner.\nFirst I will give you the task description and tools list you can use to finish the task, and your task is to plan a sequence of nodes which are subtasks to achieve the task. Each node of workflow is a subtask, and you can use the tools to complete the subtask.\nAfter you construct the plan, since some subtasks may not be dependent on each other, while others may have dependencies. Please convert these nodes of subtasks into a topology diagram based on the task relevance in the workflow. The Graph should start with START node, and end with END node. \nKeep your output in foramt:\nNode:\n1.{subtask_1}\n2.{subtask_2}\n...\nEdges:\n(START,1)\n...\n(n,END))"
            },
            {
                "role": "user",
                "content": "Task: I want to know the total amount I have budgeted for \"Entertainment\" and \"Dining Out\" categories in my \"Monthly Expenses\" budget.\nThe api list you can use: [{'name': 'getUserBudgets', 'description': \"Retrieve a list of user's budgets with their associated information.\", 'parameters': {'accessToken': \"Required. string. The user's access token for authentication.\"}, 'output': 'A list of budgets with their ID, name, currency format, date format, and last modified date.', 'format': 'application/json', 'path': '/budgets', 'method': 'get'}, {'name': 'getBudgetAccounts', 'description': 'Retrieve a list of accounts for a specific budget.', 'parameters': {'accessToken': \"Required. string. The user's access token for authentication.\", 'budgetId': 'Required. string. The ID of the budget to retrieve accounts for.'}, 'output': 'A list of accounts with their ID, name, type, balance, and cleared balance.', 'format': 'application/json', 'path': '/budgets/{budgetId}/accounts', 'method': 'get'}, {'name': 'getBudgetCategories', 'description': 'Retrieve a list of categories for a specific budget.', 'parameters': {'accessToken': \"Required. string. The user's access token for authentication.\", 'budgetId': 'Required. string. The ID of the budget to retrieve categories for.'}, 'output': 'A list of categories with their ID, name, group, and budgeted amount.', 'format': 'application/json', 'path': '/budgets/{budgetId}/categories', 'method': 'get'}, {'name': 'getBudgetPayees', 'description': 'Retrieve a list of payees for a specific budget.', 'parameters': {'accessToken': \"Required. string. The user's access token for authentication.\", 'budgetId': 'Required. string. The ID of the budget to retrieve payees for.'}, 'output': 'A list of payees with their ID, name, and associated transactions.', 'format': 'application/json', 'path': '/budgets/{budgetId}/payees', 'method': 'get'}, {'name': 'getBudgetTransactions', 'description': 'Retrieve a list of transactions for a specific budget.', 'parameters': {'accessToken': \"Required. string. The user's access token for authentication.\", 'budgetId': 'Required. string. The ID of the budget to retrieve transactions for.', 'startDate': 'string. The start date for transactions to be retrieved.', 'endDate': 'string. The end date for transactions to be retrieved.'}, 'output': 'A list of transactions with their ID, date, amount, payee, category, account, and memo.', 'format': 'application/json', 'path': '/budgets/{budgetId}/transactions', 'method': 'get'}, {'name': 'createTransaction', 'description': 'Create a new transaction for a specific budget and account.', 'parameters': {'accessToken': \"Required. string. The user's access token for authentication.\", 'budgetId': 'Required. string. The ID of the budget to create the transaction for.', 'accountId': 'Required. string. The ID of the account to create the transaction for.', 'date': 'string.', 'amount': 'integer.', 'payeeId': 'string.', 'categoryId': 'string.', 'memo': 'string.'}, 'output': 'The created transaction with its ID, date, amount, payee, category, account, and memo.', 'format': 'application/json', 'path': '/budgets/{budgetId}/transactions', 'method': 'post'}, {'name': 'updateTransaction', 'description': 'Update an existing transaction for a specific budget and account.', 'parameters': {'accessToken': \"Required. string. The user's access token for authentication.\", 'budgetId': 'Required. string. The ID of the budget to update the transaction for.', 'transactionId': 'Required. string. The ID of the transaction to update.', 'date': 'string.', 'amount': 'integer.', 'payeeId': 'string.', 'categoryId': 'string.', 'memo': 'string.'}, 'output': 'The updated transaction with its ID, date, amount, payee, category, account, and memo.', 'format': 'application/json', 'path': '/budgets/{budgetId}/transactions/{transactionId}', 'method': 'put'}, {'name': 'searchPayees', 'description': 'Search for payees by name in a specific budget.', 'parameters': {'accessToken': \"Required. string. The user's access token for authentication.\", 'budgetId': 'Required. string. The ID of the budget to search payees in.', 'query': 'Required. string. The search query for payee names.'}, 'output': 'A list of matching payees with their ID, name, and associated transactions.', 'format': 'application/json', 'path': '/budgets/{budgetId}/payees/search', 'method': 'get'}, {'name': 'searchCategories', 'description': 'Search for categories by name in a specific budget.', 'parameters': {'accessToken': \"Required. string. The user's access token for authentication.\", 'budgetId': 'Required. string. The ID of the budget to search categories in.', 'query': 'Required. string. The search query for category names.'}, 'output': 'A list of matching categories with their ID, name, group, and budgeted amount.', 'format': 'application/json', 'path': '/budgets/{budgetId}/categories/search', 'method': 'get'}]"
            },
            {
                "role": "assistant",
                "content": "Node:\n1: Retrieve the budget ID for the \"Monthly Expenses\" budget to further extract amounts allocated to \"Entertainment\" and \"Dining Out\" categories.\n2: Ask the user to provide the specific budget ID for the 'Monthly Expenses' budget as it is not listed among the retrieved budgets.\n3: Use the provided budget ID \"12345\" to retrieve budgeted amounts specifically for the \"Entertainment\" and \"Dining Out\" categories within the \"Monthly Expenses\" budget.\nEdge: (START,1) (1,2) (2,3) (3,END)"
            }
        ],
        "target": "graph",
        "id": "toolalpaca_165",
        "category": "eval"
    },
    {
        "source": "toolalpaca",
        "conversations": [
            {
                "role": "system",
                "content": "You are a helpful task planner.\nFirst I will give you the task description and tools list you can use to finish the task, and your task is to plan a sequence of nodes which are subtasks to achieve the task. Each node of workflow is a subtask, and you can use the tools to complete the subtask.\nAfter you construct the plan, since some subtasks may not be dependent on each other, while others may have dependencies. Please convert these nodes of subtasks into a topology diagram based on the task relevance in the workflow. The Graph should start with START node, and end with END node. \nKeep your output in foramt:\nNode:\n1.{subtask_1}\n2.{subtask_2}\n...\nEdges:\n(START,1)\n...\n(n,END))"
            },
            {
                "role": "user",
                "content": "Task: I want to create an eye-catching quote for my portfolio. First, show me a list of available color options. Once I choose one, generate an SVG containing the quote \"Practice makes perfect\" with a 26-point font size, the selected color, \"Times New Roman\" font type, typing speed of 90 ms, start delay of 300 ms, deleting speed of 250 ms, and 1 second pause duration.\nThe api list you can use: [{'name': 'generateTypingSvg', 'description': 'Generates a customizable typing and deleting text SVG for your README.md file.', 'parameters': {'text': 'string. The text to be displayed in the typing animation.', 'fontSize': 'integer. The font size of the text.', 'color': 'string. The color of the text. One of: [black, white, red, green, blue].', 'fontType': 'string. The font type of the text. One of: [Arial, Helvetica, Times New Roman, Courier New, Verdana].', 'typingSpeed': 'integer. The speed at which the text is typed.', 'startDelay': 'integer. The delay before the typing animation starts.', 'deletingSpeed': 'integer. The speed at which the text is deleted.', 'pauseDuration': 'integer. The pause duration before typing again.'}, 'output': 'Returns an SVG string that can be embedded in your README.md file to display the typing and deleting text animation with the specified customization options.', 'format': 'application/json', 'path': '/generateTypingSvg', 'method': 'post'}, {'name': 'listFontTypes', 'description': 'Retrieves a list of available font types that can be used in the generateTypingSvg function.', 'parameters': {}, 'output': 'Returns a list of font type strings that can be used as input for the \"fontType\" parameter in the generateTypingSvg function.', 'format': 'application/json', 'path': '/listFontTypes', 'method': 'get'}, {'name': 'listColorOptions', 'description': 'Retrieves a list of available color options that can be used in the generateTypingSvg function.', 'parameters': {}, 'output': 'Returns a list of color strings that can be used as input for the \"color\" parameter in the generateTypingSvg function.', 'format': 'application/json', 'path': '/listColorOptions', 'method': 'get'}]"
            },
            {
                "role": "assistant",
                "content": "Node:\n1: Provide a list of available color options for customizing the SVG.\n2: Generate an SVG of the quote \"Practice makes perfect\" with the user's selected color and specified customization options, including font size, font type, typing speed, start delay, deleting speed, and pause duration.\nEdge: (START,1) (1,2) (2,END)"
            }
        ],
        "target": "graph",
        "id": "toolalpaca_22",
        "category": "eval"
    },
    {
        "source": "toolalpaca",
        "conversations": [
            {
                "role": "system",
                "content": "You are a helpful task planner.\nFirst I will give you the task description and tools list you can use to finish the task, and your task is to plan a sequence of nodes which are subtasks to achieve the task. Each node of workflow is a subtask, and you can use the tools to complete the subtask.\nAfter you construct the plan, since some subtasks may not be dependent on each other, while others may have dependencies. Please convert these nodes of subtasks into a topology diagram based on the task relevance in the workflow. The Graph should start with START node, and end with END node. \nKeep your output in foramt:\nNode:\n1.{subtask_1}\n2.{subtask_2}\n...\nEdges:\n(START,1)\n...\n(n,END))"
            },
            {
                "role": "user",
                "content": "Task: I want to know about the employment rate in D.C. Can you find a dataset related to employment and show me the data for the past five years, broken down by industry?\nThe api list you can use: [{'name': 'getListOfDatasets', 'description': 'Retrieve a list of available datasets from the District of Columbia Open Data API.', 'parameters': {}, 'output': 'A list of datasets, including their names, descriptions, and unique identifiers.', 'format': 'application/json', 'path': '/datasets', 'method': 'get'}, {'name': 'queryDataset', 'description': 'Query for specific data from a particular dataset.', 'parameters': {'datasetId': 'Required. string. The unique identifier of the dataset to query.', 'queryParameters': 'Object.  A set of key-value pairs to filter the data based on specific criteria.'}, 'output': 'A list of data records from the specified dataset, filtered based on the provided query parameters.', 'format': 'application/json', 'path': '/datasets/{datasetId}/query', 'method': 'get'}, {'name': 'filterDataByDateRange', 'description': 'Filter data from a dataset based on a specific date range.', 'parameters': {'datasetId': 'Required. string. The unique identifier of the dataset to query.', 'startDate': 'Required. string. The start date of the date range.', 'endDate': 'Required. string. The end date of the date range.'}, 'output': 'A list of data records from the specified dataset, filtered based on the provided date range.', 'format': 'application/json', 'path': '/datasets/{datasetId}/filter-by-date', 'method': 'get'}, {'name': 'filterDataByGeographicLocation', 'description': 'Filter data from a dataset based on a specific geographic location.', 'parameters': {'datasetId': 'Required. string. The unique identifier of the dataset to query.', 'latitude': 'Required. number. The latitude of the geographic location.', 'longitude': 'Required. number. The longitude of the geographic location.', 'radius': 'number. The radius (in meters) around the specified location to include in the results. Default is 1000 meters.'}, 'output': 'A list of data records from the specified dataset, filtered based on the provided geographic location and radius.', 'format': 'application/json', 'path': '/datasets/{datasetId}/filter-by-location', 'method': 'get'}, {'name': 'searchDatasets', 'description': 'Search for datasets based on keywords or phrases.', 'parameters': {'searchQuery': 'Required. string. The keywords or phrases to search for in the dataset names and descriptions.'}, 'output': 'A list of datasets that match the search query, including their names, descriptions, and unique identifiers.', 'format': 'application/json', 'path': '/datasets/search', 'method': 'get'}]"
            },
            {
                "role": "assistant",
                "content": "Node:\n1: Search for datasets related to employment in Washington D.C., specifically focusing on data from the past five years broken down by industry.\n2: Query the dataset identified as \"Employment by Industry Sector\" to obtain employment data specific to different industries in Washington D.C.\n3: Filter the employment data from the dataset \"Employment by Industry Sector\" to include information from the past five years, setting the date range from January 1, 2014, to December 31, 2019.\nEdge: (START,1) (1,2) (2,3) (3,END)"
            }
        ],
        "target": "graph",
        "id": "toolalpaca_409",
        "category": "eval"
    },
    {
        "source": "toolalpaca",
        "conversations": [
            {
                "role": "system",
                "content": "You are a helpful task planner.\nFirst I will give you the task description and tools list you can use to finish the task, and your task is to plan a sequence of nodes which are subtasks to achieve the task. Each node of workflow is a subtask, and you can use the tools to complete the subtask.\nAfter you construct the plan, since some subtasks may not be dependent on each other, while others may have dependencies. Please convert these nodes of subtasks into a topology diagram based on the task relevance in the workflow. The Graph should start with START node, and end with END node. \nKeep your output in foramt:\nNode:\n1.{subtask_1}\n2.{subtask_2}\n...\nEdges:\n(START,1)\n...\n(n,END))"
            },
            {
                "role": "user",
                "content": "Task: I'm interested in reading some articles from my favorite RSS feeds. Can you please fetch the list of feeds I'm subscribed to and then show me the articles from the feed with the most subscribers?\nThe api list you can use: [{'name': 'getUserFeeds', 'description': 'Retrieve the list of RSS feeds subscribed to by a user.', 'parameters': {'authToken': \"Required. string. The user's authentication token.\"}, 'output': 'A list of RSS feeds.', 'format': 'application/json', 'path': '/user_feeds', 'method': 'get'}, {'name': 'getFeedArticles', 'description': 'Retrieve all the articles within a specific feed.', 'parameters': {'authToken': \"Required. string. The user's authentication token.\", 'feedId': 'Required. string. The ID of the feed to retrieve articles from.', 'count': 'integer. The number of articles to retrieve (default is 20).', 'page': 'integer. The page number to retrieve articles from (default is 1).'}, 'output': 'A list of articles.', 'format': 'application/json', 'path': '/feed_articles', 'method': 'get'}, {'name': 'markArticleAsRead', 'description': 'Mark an article as read.', 'parameters': {'authToken': 'string.', 'articleId': 'string.'}, 'output': 'The article has been marked as read.', 'format': 'application/json', 'path': '/mark_article_as_read', 'method': 'post'}, {'name': 'starArticle', 'description': 'Star an article.', 'parameters': {'authToken': 'string.', 'articleId': 'string.'}, 'output': 'The article has been starred.', 'format': 'application/json', 'path': '/star_article', 'method': 'post'}, {'name': 'getStarredArticles', 'description': 'Retrieve the list of starred articles.', 'parameters': {'authToken': \"Required. string. The user's authentication token.\", 'count': 'integer. The number of starred articles to retrieve (default is 20).', 'page': 'integer. The page number to retrieve starred articles from (default is 1).'}, 'output': 'A list of starred articles.', 'format': 'application/json', 'path': '/starred_articles', 'method': 'get'}]"
            },
            {
                "role": "assistant",
                "content": "Node:\n1: Fetch the list of RSS feeds a user is subscribed to and identify the feed with the most subscribers to retrieve articles from that feed.\n2: Retrieve articles from the RSS feed with the highest subscriber count, identified as 'Engadget'.\nEdge: (START,1) (1,2) (2,END)"
            }
        ],
        "target": "graph",
        "id": "toolalpaca_438",
        "category": "eval"
    },
    {
        "source": "toolalpaca",
        "conversations": [
            {
                "role": "system",
                "content": "You are a helpful task planner.\nFirst I will give you the task description and tools list you can use to finish the task, and your task is to plan a sequence of nodes which are subtasks to achieve the task. Each node of workflow is a subtask, and you can use the tools to complete the subtask.\nAfter you construct the plan, since some subtasks may not be dependent on each other, while others may have dependencies. Please convert these nodes of subtasks into a topology diagram based on the task relevance in the workflow. The Graph should start with START node, and end with END node. \nKeep your output in foramt:\nNode:\n1.{subtask_1}\n2.{subtask_2}\n...\nEdges:\n(START,1)\n...\n(n,END))"
            },
            {
                "role": "user",
                "content": "Task: I'm interested in reading some articles about renewable energy from the RSS feed \"https://energyblog.com/rss\". Can you filter the articles based on the description field containing the words \"Solar\" and \"Wind\" and sort them by publication date in ascending order?\nThe api list you can use: [{'name': 'getFeedItems', 'description': 'Retrieve the feed items in JSON format.', 'parameters': {'feedUrl': 'Required. string. The URL of the RSS feed to be converted to JSON.'}, 'output': 'A JSON object containing an array of feed items.', 'format': 'application/json', 'path': '/getFeedItems', 'method': 'get'}, {'name': 'getFeedItemsByTag', 'description': 'Retrieve the feed items in JSON format filtered by specific tags.', 'parameters': {'feedUrl': 'Required. string. The URL of the RSS feed to be converted to JSON.', 'tags': 'Required. Array[string].  The tags to filter the feed items by.'}, 'output': 'A JSON object containing an array of feed items filtered by the specified tags.', 'format': 'application/json', 'path': '/getFeedItemsByTag', 'method': 'get'}, {'name': 'getFeedItemsByField', 'description': 'Retrieve the feed items in JSON format filtered by specific fields.', 'parameters': {'feedUrl': 'Required. string. The URL of the RSS feed to be converted to JSON.', 'fields': 'Required. Array[string].  The fields to filter the feed items by.'}, 'output': 'A JSON object containing an array of feed items filtered by the specified fields.', 'format': 'application/json', 'path': '/getFeedItemsByField', 'method': 'get'}, {'name': 'sortFeedItems', 'description': 'Retrieve the feed items in JSON format sorted by date or other attributes.', 'parameters': {'feedUrl': 'Required. string. The URL of the RSS feed to be converted to JSON.', 'sortBy': \"Required. string. The attribute to sort the feed items by (e.g., 'pubDate', 'title').\", 'order': \"string. One of: [asc, desc]. The order of sorting, either 'asc' (ascending) or 'desc' (descending). Default is 'asc'.\"}, 'output': 'A JSON object containing an array of feed items sorted by the specified attribute and order.', 'format': 'application/json', 'path': '/sortFeedItems', 'method': 'get'}]"
            },
            {
                "role": "assistant",
                "content": "Node:\n1: Filter articles from the RSS feed \"https://energyblog.com/rss\" that contain the words \"Solar\" and \"Wind\" in the description and sort them by publication date in ascending order.\n2: Sort the articles from the RSS feed \"https://energyblog.com/rss\" by their publication date in ascending order after filtering for content related to \"Solar\" and \"Wind\".\nEdge: (START,1) (1,2) (2,END)"
            }
        ],
        "target": "graph",
        "id": "toolalpaca_362",
        "category": "eval"
    },
    {
        "source": "toolalpaca",
        "conversations": [
            {
                "role": "system",
                "content": "You are a helpful task planner.\nFirst I will give you the task description and tools list you can use to finish the task, and your task is to plan a sequence of nodes which are subtasks to achieve the task. Each node of workflow is a subtask, and you can use the tools to complete the subtask.\nAfter you construct the plan, since some subtasks may not be dependent on each other, while others may have dependencies. Please convert these nodes of subtasks into a topology diagram based on the task relevance in the workflow. The Graph should start with START node, and end with END node. \nKeep your output in foramt:\nNode:\n1.{subtask_1}\n2.{subtask_2}\n...\nEdges:\n(START,1)\n...\n(n,END))"
            },
            {
                "role": "user",
                "content": "Task: Please scan this URL and give me a list of all the HTTP requests it makes.\nThe api list you can use: [{'name': 'performUrlScan', 'description': 'Performs a scan on a given URL and returns a scan ID that can be used to retrieve the scan details later.', 'parameters': {'url': 'Required. string. The URL to be scanned.', 'public': 'boolean. Whether the scan should be public or not. Default is true.'}, 'output': 'Scan ID and other scan information.', 'format': 'application/json', 'path': '/scan', 'method': 'post'}, {'name': 'analyzeScanResult', 'description': 'Analyzes a scan result and provides detailed information on any threats detected.', 'parameters': {'scan_id': 'Required. string. The ID of the scan to be analyzed.'}, 'output': 'Detailed information on any threats detected in the scan result.', 'format': 'application/json', 'path': '/result/{scan_id}', 'method': 'get'}, {'name': 'retrieveScanDetails', 'description': 'Retrieves the details of a scan by ID.', 'parameters': {'scan_id': 'Required. string. The ID of the scan to retrieve details for.'}, 'output': 'Details of the scan, including the URL, scan status, and any threats detected.', 'format': 'application/json', 'path': '/scan/{scan_id}', 'method': 'get'}]"
            },
            {
                "role": "assistant",
                "content": "Node:\n1: Initiate a scan on the specified URL to analyze and retrieve all the HTTP requests it makes.\n2: Retrieve the detailed results of the URL scan using the provided scan ID to examine the HTTP requests made by the URL.\nEdge: (START,1) (1,2) (2,END)"
            }
        ],
        "target": "graph",
        "id": "toolalpaca_692",
        "category": "eval"
    },
    {
        "source": "toolalpaca",
        "conversations": [
            {
                "role": "system",
                "content": "You are a helpful task planner.\nFirst I will give you the task description and tools list you can use to finish the task, and your task is to plan a sequence of nodes which are subtasks to achieve the task. Each node of workflow is a subtask, and you can use the tools to complete the subtask.\nAfter you construct the plan, since some subtasks may not be dependent on each other, while others may have dependencies. Please convert these nodes of subtasks into a topology diagram based on the task relevance in the workflow. The Graph should start with START node, and end with END node. \nKeep your output in foramt:\nNode:\n1.{subtask_1}\n2.{subtask_2}\n...\nEdges:\n(START,1)\n...\n(n,END))"
            },
            {
                "role": "user",
                "content": "Task: My favorite TV show is \"Grey's Anatomy.\" I'm wondering if I've missed any episodes in the current season. Can you find a list of all the episodes for the latest season and let me know if there are any upcoming ones?\nThe api list you can use: [{'name': 'getAllTvShows', 'description': 'Retrieve a list of all TV Shows available on Next Episode.', 'parameters': {'page': 'integer. Optional. Integer. The page number for pagination.'}, 'output': 'A list of TV shows with their basic information, including show ID, name, genre, and network.', 'format': 'application/json', 'path': '/tvshows', 'method': 'get'}, {'name': 'getShowDetails', 'description': 'Retrieve detailed information about a specific show.', 'parameters': {'showId': 'Required. integer. Required. Integer. The ID of the show to retrieve information for.'}, 'output': 'Detailed information about the specified show, including its name, genre, network, summary, and a list of all its episodes with their basic information.', 'format': 'application/json', 'path': '/tvshows/{showId}', 'method': 'get'}, {'name': 'getUpcomingEpisodes', 'description': 'Retrieve a list of all upcoming episodes for a given show.', 'parameters': {'showId': 'Required. integer. Required. Integer. The ID of the show to retrieve upcoming episodes for.'}, 'output': 'A list of upcoming episodes for the specified show, including episode ID, title, air date, and summary.', 'format': 'application/json', 'path': '/tvshows/{showId}/episodes', 'method': 'get'}, {'name': 'getEpisodeDetails', 'description': 'Retrieve information about a specific episode.', 'parameters': {'episodeId': 'Required. integer. Required. Integer. The ID of the episode to retrieve information for.'}, 'output': \"Detailed information about the specified episode, including its title, air date, summary, and a link to the episode's page on Next Episode.\", 'format': 'application/json', 'path': '/episodes/{episodeId}', 'method': 'get'}, {'name': 'searchTvShow', 'description': 'Search for a TV show by its name.', 'parameters': {'showName': 'Required. string. Required. String. The name of the show to search for.'}, 'output': 'A list of TV shows that match the search query, including show ID, name, genre, and network.', 'format': 'application/json', 'path': '/tvshows/search', 'method': 'get'}]"
            },
            {
                "role": "assistant",
                "content": "Node:\n1: Retrieve the show ID for \"Grey's Anatomy\" to find all episodes in the latest season and check for any upcoming episodes.\n2: Retrieve the list of upcoming episodes for \"Grey's Anatomy\" using the show ID obtained previously.\nEdge: (START,1) (1,2) (2,END)"
            }
        ],
        "target": "graph",
        "id": "toolalpaca_72",
        "category": "eval"
    },
    {
        "source": "toolalpaca",
        "conversations": [
            {
                "role": "system",
                "content": "You are a helpful task planner.\nFirst I will give you the task description and tools list you can use to finish the task, and your task is to plan a sequence of nodes which are subtasks to achieve the task. Each node of workflow is a subtask, and you can use the tools to complete the subtask.\nAfter you construct the plan, since some subtasks may not be dependent on each other, while others may have dependencies. Please convert these nodes of subtasks into a topology diagram based on the task relevance in the workflow. The Graph should start with START node, and end with END node. \nKeep your output in foramt:\nNode:\n1.{subtask_1}\n2.{subtask_2}\n...\nEdges:\n(START,1)\n...\n(n,END))"
            },
            {
                "role": "user",
                "content": "Task: I'm planning to move to a new neighborhood in New York City. Can you help me find some information about the schools in Brooklyn and the crime statistics in the Upper East Side for the year 2020?\nThe api list you can use: [{'name': 'getCityServices', 'description': 'Retrieve information about city services such as libraries, parks, and schools.', 'parameters': {'serviceType': \"Required. string. One of: [libraries, parks, schools]. The type of city service to retrieve information about (e.g., 'libraries', 'parks', 'schools').\", 'location': \"string. A specific location within New York City to filter results by (e.g., 'Manhattan', 'Brooklyn').\"}, 'output': 'A list of city services with their names, addresses, contact information, and operating hours.', 'format': 'application/json', 'path': '/city-services', 'method': 'get'}, {'name': 'getCrimeStatistics', 'description': 'Access crime statistics for different neighborhoods in the city.', 'parameters': {'neighborhood': \"Required. string. The neighborhood to retrieve crime statistics for (e.g., 'Upper East Side', 'Harlem').\", 'year': 'integer. The year to retrieve crime statistics for (e.g., 2020).'}, 'output': 'A list of crime statistics for the specified neighborhood, including the number of reported crimes, crime types, and crime rates.', 'format': 'application/json', 'path': '/crime-statistics', 'method': 'get'}, {'name': 'getHealthAndEnvironmentalData', 'description': 'Obtain information on health and environmental issues, including air quality and water safety.', 'parameters': {'dataType': \"Required. string. The type of health or environmental data to retrieve (e.g., 'air quality', 'water safety').\", 'location': \"string. A specific location within New York City to filter results by (e.g., 'Manhattan', 'Brooklyn').\"}, 'output': 'A list of health and environmental data for the specified location, including measurements, trends, and any relevant warnings or advisories.', 'format': 'application/json', 'path': '/health-environmental-data', 'method': 'get'}, {'name': 'getCityFinances', 'description': 'Get data on city finances, including budgets and spending.', 'parameters': {'financeType': \"Required. string. The type of city finance data to retrieve (e.g., 'budgets', 'spending').\", 'year': 'integer. The year to retrieve city finance data for (e.g., 2020).'}, 'output': 'A list of city finance data for the specified year, including budget allocations, spending categories, and any relevant financial reports or analyses.', 'format': 'application/json', 'path': '/city-finances', 'method': 'get'}]"
            },
            {
                "role": "assistant",
                "content": "Node:\n1: Retrieve information on schools located in Brooklyn.\n2: Retrieve crime statistics for the Upper East Side for the year 2020.\nEdge: (START,1) (START,2) (1,END) (2,END)"
            }
        ],
        "target": "graph",
        "id": "toolalpaca_427",
        "category": "eval"
    },
    {
        "source": "toolalpaca",
        "conversations": [
            {
                "role": "system",
                "content": "You are a helpful task planner.\nFirst I will give you the task description and tools list you can use to finish the task, and your task is to plan a sequence of nodes which are subtasks to achieve the task. Each node of workflow is a subtask, and you can use the tools to complete the subtask.\nAfter you construct the plan, since some subtasks may not be dependent on each other, while others may have dependencies. Please convert these nodes of subtasks into a topology diagram based on the task relevance in the workflow. The Graph should start with START node, and end with END node. \nKeep your output in foramt:\nNode:\n1.{subtask_1}\n2.{subtask_2}\n...\nEdges:\n(START,1)\n...\n(n,END))"
            },
            {
                "role": "user",
                "content": "Task: I received this short link in an email, but I'm not sure if it's safe to click. Can you tell me what the original URL is? The short link is: https://short.link/xyz789\nThe api list you can use: [{'name': 'generateShortLink', 'description': 'Generates a short link for a given long URL.', 'parameters': {'longUrl': 'Required. string. The long URL to be shortened.'}, 'output': 'The generated short link for the given long URL.', 'format': 'application/json', 'path': '/generateShortLink', 'method': 'post'}, {'name': 'getLongUrl', 'description': 'Retrieves the original long URL from a given short link.', 'parameters': {'shortLink': 'Required. string. The short link to retrieve the original long URL from.'}, 'output': 'The original long URL associated with the given short link.', 'format': 'application/json', 'path': '/getLongUrl', 'method': 'post'}, {'name': 'listUserShortLinks', 'description': 'Lists all shortened URLs associated with a specific user account.', 'parameters': {'userId': 'Required. string. The user ID to retrieve the list of associated short links.', 'page': 'integer. The page number for pagination.', 'perPage': 'integer. The number of short links to display per page.'}, 'output': 'An array of short links associated with the given user account, including their long URLs and creation dates.', 'format': 'application/json', 'path': '/listUserShortLinks', 'method': 'get'}]"
            },
            {
                "role": "assistant",
                "content": "Node:\n1: Use the tool to expand\n2: Identify if the short link is associated with any user accounts by using the user-related short link listing tool.\nEdge: (START,1) (1,2) (2,END)"
            }
        ],
        "target": "graph",
        "id": "toolalpaca_268",
        "category": "eval"
    },
    {
        "source": "toolalpaca",
        "conversations": [
            {
                "role": "system",
                "content": "You are a helpful task planner.\nFirst I will give you the task description and tools list you can use to finish the task, and your task is to plan a sequence of nodes which are subtasks to achieve the task. Each node of workflow is a subtask, and you can use the tools to complete the subtask.\nAfter you construct the plan, since some subtasks may not be dependent on each other, while others may have dependencies. Please convert these nodes of subtasks into a topology diagram based on the task relevance in the workflow. The Graph should start with START node, and end with END node. \nKeep your output in foramt:\nNode:\n1.{subtask_1}\n2.{subtask_2}\n...\nEdges:\n(START,1)\n...\n(n,END))"
            },
            {
                "role": "user",
                "content": "Task: I'm craving some fish and chips. Can you help me find a nearby establishment with a food hygiene rating of at least 4 stars and show me its address and postcode?\nThe api list you can use: [{'name': 'getEstablishmentRating', 'description': 'Retrieves the food hygiene rating for a single establishment.', 'parameters': {'establishment_id': 'Required. string. The unique identifier for the establishment.'}, 'output': 'Successful response.', 'format': 'application/json', 'path': '/establishments/{establishment_id}/rating', 'method': 'get'}, {'name': 'searchEstablishments', 'description': 'Searches for food hygiene ratings for multiple establishments based on criteria such as postcodes or dates.', 'parameters': {}, 'output': 'Successful response.', 'format': 'application/json', 'path': '/establishments/search', 'method': 'get'}, {'name': 'getEstablishmentInfo', 'description': \"Retrieves information about an establishment's inspection dates, scores, and ratings.\", 'parameters': {'establishment_id': 'Required. string. The unique identifier for the establishment.'}, 'output': 'Successful response.', 'format': 'application/json', 'path': '/establishments/{establishment_id}/info', 'method': 'get'}]"
            },
            {
                "role": "assistant",
                "content": "Node:\n1: Locate a nearby restaurant serving fish and chips with a hygiene rating of at least 4 stars, including its address and postcode.\n2: Retrieve detailed information for the establishment with the ID \"1234\" to provide the user with the name, address, and postcode.\nEdge: (START,1) (1,2) (2,END)"
            }
        ],
        "target": "graph",
        "id": "toolalpaca_896",
        "category": "eval"
    },
    {
        "source": "toolalpaca",
        "conversations": [
            {
                "role": "system",
                "content": "You are a helpful task planner.\nFirst I will give you the task description and tools list you can use to finish the task, and your task is to plan a sequence of nodes which are subtasks to achieve the task. Each node of workflow is a subtask, and you can use the tools to complete the subtask.\nAfter you construct the plan, since some subtasks may not be dependent on each other, while others may have dependencies. Please convert these nodes of subtasks into a topology diagram based on the task relevance in the workflow. The Graph should start with START node, and end with END node. \nKeep your output in foramt:\nNode:\n1.{subtask_1}\n2.{subtask_2}\n...\nEdges:\n(START,1)\n...\n(n,END))"
            },
            {
                "role": "user",
                "content": "Task: I'm interested in a specific class of cards, but I want to see them sorted by power. Can you help me filter the cards by class and then sort them by power?\nThe api list you can use: [{'name': 'getAllCards', 'description': 'Retrieve a list of all available cards and their corresponding data.', 'parameters': {}, 'output': 'An array of JSON objects, each representing a card.', 'format': 'application/json', 'path': '/cards', 'method': 'get'}, {'name': 'getCardById', 'description': 'Get specific information about a card by providing its ID.', 'parameters': {'id': 'Required. integer. The unique identifier of the card.'}, 'output': 'A JSON object representing the card with the specified ID.', 'format': 'application/json', 'path': '/cards/{id}', 'method': 'get'}, {'name': 'filterCards', 'description': 'Filter the cards based on specific criteria, such as rarity, element, or class.', 'parameters': {'rarity': 'string. One of: [common, rare, legendary]. The rarity of the cards to retrieve (e.g., common, rare, legendary).', 'element': 'string. One of: [fire, water, earth]. The element of the cards to retrieve (e.g., fire, water, earth).', 'class': 'string. One of: [warrior, mage, rogue]. The class of the cards to retrieve (e.g., warrior, mage, rogue).'}, 'output': 'An array of JSON objects, each representing a card that matches the specified criteria.', 'format': 'application/json', 'path': '/cards/filter', 'method': 'get'}, {'name': 'sortCards', 'description': 'Sort the cards according to different parameters, including power, price, or release date.', 'parameters': {'sortBy': 'Required. string. One of: [power, price, release date]. The parameter to sort the cards by (e.g., power, price, release date).', 'sortOrder': 'string. One of: [ascending, descending]. The order to sort the cards in (ascending or descending). Default is ascending.'}, 'output': 'An array of JSON objects, each representing a card sorted according to the specified parameters.', 'format': 'application/json', 'path': '/cards/sort', 'method': 'get'}]"
            },
            {
                "role": "assistant",
                "content": "Node:\n1: Filter the cards by their specified class and then sort the filtered results by power.\n2: Sort the previously filtered cards by their power attribute in descending order.\nEdge: (START,1) (1,2) (2,END)"
            }
        ],
        "target": "graph",
        "id": "toolalpaca_899",
        "category": "eval"
    },
    {
        "source": "toolalpaca",
        "conversations": [
            {
                "role": "system",
                "content": "You are a helpful task planner.\nFirst I will give you the task description and tools list you can use to finish the task, and your task is to plan a sequence of nodes which are subtasks to achieve the task. Each node of workflow is a subtask, and you can use the tools to complete the subtask.\nAfter you construct the plan, since some subtasks may not be dependent on each other, while others may have dependencies. Please convert these nodes of subtasks into a topology diagram based on the task relevance in the workflow. The Graph should start with START node, and end with END node. \nKeep your output in foramt:\nNode:\n1.{subtask_1}\n2.{subtask_2}\n...\nEdges:\n(START,1)\n...\n(n,END))"
            },
            {
                "role": "user",
                "content": "Task: I'm interested in understanding my personality traits. Can you create a \"big_five\" assessment for me and then provide me with the list of questions I'll need to answer?\nThe api list you can use: [{'name': 'searchAssessments', 'description': 'Search for assessments based on specific criteria', 'parameters': {'assessmentType': 'string. The type of assessment to search for.', 'startDate': 'string. The start date for the search range.', 'endDate': 'string. The end date for the search range.', 'limit': 'integer. The maximum number of results to return.', 'offset': 'integer. The starting index for the search results.'}, 'output': 'Assessments retrieved successfully.', 'format': 'application/json', 'path': '/assessments', 'method': 'get'}, {'name': 'getQuestions', 'description': 'Retrieve the list of questions for a specific assessment', 'parameters': {'assessmentId': 'Required. string. The unique identifier of the assessment.'}, 'output': 'Questions retrieved successfully.', 'format': 'application/json', 'path': '/assessments/{assessmentId}/questions', 'method': 'get'}, {'name': 'submitResponse', 'description': \"Submit a user's response to a specific question in an assessment\", 'parameters': {'assessmentId': 'Required. string. The unique identifier of the assessment.', 'questionId': 'Required. string. The unique identifier of the question.', 'response': \"string. The user's response to the question.\"}, 'output': 'Response submitted successfully.', 'format': 'application/json', 'path': '/assessments/{assessmentId}/questions/{questionId}/response', 'method': 'post'}, {'name': 'getAssessmentResults', 'description': \"Retrieve the results of a completed assessment, including the user's personality traits and scores\", 'parameters': {'assessmentId': 'Required. string. The unique identifier of the assessment.'}, 'output': 'Assessment results retrieved successfully.', 'format': 'application/json', 'path': '/assessments/{assessmentId}/results', 'method': 'get'}, {'name': 'getTraitDetails', 'description': 'Retrieve detailed information about a specific trait', 'parameters': {'traitId': 'Required. string. The unique identifier of the trait.'}, 'output': 'Trait details retrieved successfully.', 'format': 'application/json', 'path': '/traits/{traitId}', 'method': 'get'}]"
            },
            {
                "role": "assistant",
                "content": "Node:\n1: Create and retrieve the \"big_five\" personality assessment along with its list of questions.\n2: Retrieve the list of questions for the \"big_five\" personality assessment using the provided assessment ID '123456789'.\nEdge: (START,1) (1,2) (2,END)"
            }
        ],
        "target": "graph",
        "id": "toolalpaca_89",
        "category": "eval"
    },
    {
        "source": "toolalpaca",
        "conversations": [
            {
                "role": "system",
                "content": "You are a helpful task planner.\nFirst I will give you the task description and tools list you can use to finish the task, and your task is to plan a sequence of nodes which are subtasks to achieve the task. Each node of workflow is a subtask, and you can use the tools to complete the subtask.\nAfter you construct the plan, since some subtasks may not be dependent on each other, while others may have dependencies. Please convert these nodes of subtasks into a topology diagram based on the task relevance in the workflow. The Graph should start with START node, and end with END node. \nKeep your output in foramt:\nNode:\n1.{subtask_1}\n2.{subtask_2}\n...\nEdges:\n(START,1)\n...\n(n,END))"
            },
            {
                "role": "user",
                "content": "Task: I am visiting my friend in Brazil, and he asked me to meet him at a specific address, but I have no idea where it is. Can you please find the coordinates for the ZIP code 90210-040 so I can locate it on the map?\nThe api list you can use: [{'name': 'getAddressByZipCode', 'description': 'Retrieve the address information associated with a given Brazilian ZIP code.', 'parameters': {'zipCode': 'Required. string. A valid Brazilian ZIP code.'}, 'output': 'Successful response.', 'format': 'application/json', 'path': '/address/{zipCode}', 'method': 'get'}, {'name': 'validateZipCode', 'description': 'Validate the integrity of a given Brazilian ZIP code.', 'parameters': {'zipCode': 'Required. string. A valid Brazilian ZIP code.'}, 'output': 'Successful response.', 'format': 'application/json', 'path': '/zipCode/validate/{zipCode}', 'method': 'get'}, {'name': 'getZipCodeLocation', 'description': 'Localize a given Brazilian ZIP code on a map.', 'parameters': {'zipCode': 'Required. string. A valid Brazilian ZIP code.'}, 'output': 'Successful response.', 'format': 'application/json', 'path': '/zipCode/location/{zipCode}', 'method': 'get'}, {'name': 'getOrderStatus', 'description': 'Retrieve up-to-date information on the status and progress of a package.', 'parameters': {'orderNumber': 'Required. string. A valid Brazilian order number.'}, 'output': 'Successful response.', 'format': 'application/json', 'path': '/order/{orderNumber}', 'method': 'get'}, {'name': 'searchZipCode', 'description': 'Search for a Brazilian ZIP code based on the provided address information.', 'parameters': {'street': 'string. The street name.', 'neighborhood': 'string. The neighborhood name.', 'city': 'Required. string. The city name.', 'state': 'Required. string. One of: [AC, AL, AM, AP, BA, CE, DF, ES, GO, MA, MG, MS, MT, PA, PB, PE, PI, PR, RJ, RN, RO, RR, RS, SC, SE, SP, TO]. The state abbreviation.'}, 'output': 'Successful response.', 'format': 'application/json', 'path': '/zipCode/search', 'method': 'get'}]"
            },
            {
                "role": "assistant",
                "content": "Node:\n1: Retrieve geographical coordinates for the Brazilian ZIP code \"90210-040\" to help locate it on a map.\n2: Retrieve the specific geographic location, including latitude and longitude, for the ZIP code \"90210-040\" to assist in mapping and navigation.\nEdge: (START,1) (1,2) (2,END)"
            }
        ],
        "target": "graph",
        "id": "toolalpaca_85",
        "category": "eval"
    },
    {
        "source": "toolalpaca",
        "conversations": [
            {
                "role": "system",
                "content": "You are a helpful task planner.\nFirst I will give you the task description and tools list you can use to finish the task, and your task is to plan a sequence of nodes which are subtasks to achieve the task. Each node of workflow is a subtask, and you can use the tools to complete the subtask.\nAfter you construct the plan, since some subtasks may not be dependent on each other, while others may have dependencies. Please convert these nodes of subtasks into a topology diagram based on the task relevance in the workflow. The Graph should start with START node, and end with END node. \nKeep your output in foramt:\nNode:\n1.{subtask_1}\n2.{subtask_2}\n...\nEdges:\n(START,1)\n...\n(n,END))"
            },
            {
                "role": "user",
                "content": "Task: I have been following this thriller series named \"Mindhunter.\" However, I am not sure when the next episode is airing. Can you find out when the upcoming episodes are scheduled?\nThe api list you can use: [{'name': 'getAllTvShows', 'description': 'Retrieve a list of all TV Shows available on Next Episode.', 'parameters': {'page': 'integer. Optional. Integer. The page number for pagination.'}, 'output': 'A list of TV shows with their basic information, including show ID, name, genre, and network.', 'format': 'application/json', 'path': '/tvshows', 'method': 'get'}, {'name': 'getShowDetails', 'description': 'Retrieve detailed information about a specific show.', 'parameters': {'showId': 'Required. integer. Required. Integer. The ID of the show to retrieve information for.'}, 'output': 'Detailed information about the specified show, including its name, genre, network, summary, and a list of all its episodes with their basic information.', 'format': 'application/json', 'path': '/tvshows/{showId}', 'method': 'get'}, {'name': 'getUpcomingEpisodes', 'description': 'Retrieve a list of all upcoming episodes for a given show.', 'parameters': {'showId': 'Required. integer. Required. Integer. The ID of the show to retrieve upcoming episodes for.'}, 'output': 'A list of upcoming episodes for the specified show, including episode ID, title, air date, and summary.', 'format': 'application/json', 'path': '/tvshows/{showId}/episodes', 'method': 'get'}, {'name': 'getEpisodeDetails', 'description': 'Retrieve information about a specific episode.', 'parameters': {'episodeId': 'Required. integer. Required. Integer. The ID of the episode to retrieve information for.'}, 'output': \"Detailed information about the specified episode, including its title, air date, summary, and a link to the episode's page on Next Episode.\", 'format': 'application/json', 'path': '/episodes/{episodeId}', 'method': 'get'}, {'name': 'searchTvShow', 'description': 'Search for a TV show by its name.', 'parameters': {'showName': 'Required. string. Required. String. The name of the show to search for.'}, 'output': 'A list of TV shows that match the search query, including show ID, name, genre, and network.', 'format': 'application/json', 'path': '/tvshows/search', 'method': 'get'}]"
            },
            {
                "role": "assistant",
                "content": "Node:\n1: Retrieve the show ID for \"Mindhunter\" to use in upcoming episode searches.\n2: Use the show ID '775' to find the schedule for upcoming episodes of \"Mindhunter\".\nEdge: (START,1) (1,2) (2,END)"
            }
        ],
        "target": "graph",
        "id": "toolalpaca_81",
        "category": "eval"
    },
    {
        "source": "toolalpaca",
        "conversations": [
            {
                "role": "system",
                "content": "You are a helpful task planner.\nFirst I will give you the task description and tools list you can use to finish the task, and your task is to plan a sequence of nodes which are subtasks to achieve the task. Each node of workflow is a subtask, and you can use the tools to complete the subtask.\nAfter you construct the plan, since some subtasks may not be dependent on each other, while others may have dependencies. Please convert these nodes of subtasks into a topology diagram based on the task relevance in the workflow. The Graph should start with START node, and end with END node. \nKeep your output in foramt:\nNode:\n1.{subtask_1}\n2.{subtask_2}\n...\nEdges:\n(START,1)\n...\n(n,END))"
            },
            {
                "role": "user",
                "content": "Task: I want to create a new configuration for my text analytics tool. The name is 'Social Media Analysis', and I want to include categories for 'Positive Feedback' and 'Negative Feedback'.\nThe api list you can use: [{'name': 'analyzeSentiment', 'description': 'Analyzes the sentiment of a given text and returns a score indicating the overall sentiment.', 'parameters': {'text': 'Required. string. The text to be analyzed.'}, 'output': 'Returns a JSON object containing the sentiment score, ranging from -1 (negative) to 1 (positive), as well as a sentiment polarity score and a list of themes associated with the text.', 'format': 'application/json', 'path': '/analyze/sentiment', 'method': 'post'}, {'name': 'categorizeDocument', 'description': 'Categorizes a given text into one or more predefined categories.', 'parameters': {'text': 'Required. string. The text to be categorized.', 'config_id': 'string. The ID of the configuration to use for categorization.'}, 'output': 'Returns a JSON object containing a list of categories and their respective scores, as well as a list of themes associated with the text.', 'format': 'application/json', 'path': '/categorize/document', 'method': 'post'}, {'name': 'extractNamedEntities', 'description': 'Extracts named entities from a given text, such as people, organizations, and locations.', 'parameters': {'text': 'Required. string. The text to be analyzed.', 'language': \"string. The language of the text. Defaults to 'English'. One of: [English, French, German, Italian, Portuguese, Spanish].\"}, 'output': 'Returns a JSON object containing a list of named entities and their respective types, as well as a list of themes associated with the text.', 'format': 'application/json', 'path': '/extract/named-entities', 'method': 'post'}, {'name': 'getConfiguration', 'description': 'Retrieves the configuration settings for a given configuration ID.', 'parameters': {'config_id': 'Required. string. The ID of the configuration to retrieve.'}, 'output': 'Returns a JSON object containing the configuration settings, including the categories and themes used for analysis.', 'format': 'application/json', 'path': '/configuration/{config_id}', 'method': 'get'}, {'name': 'deleteConfiguration', 'description': 'Deletes the configuration with the specified ID.', 'parameters': {'config_id': 'Required. string. The ID of the configuration to delete.'}, 'output': 'Returns a JSON object indicating whether the configuration was successfully deleted.', 'format': 'application/json', 'path': '/configuration/{config_id}', 'method': 'delete'}, {'name': 'addConfiguration', 'description': 'Creates a new configuration with the specified settings.', 'parameters': {'name': 'Required. string. The name of the new configuration.', 'language': \"string. The language of the text. Defaults to 'English'. One of: [English, French, German, Italian, Portuguese, Spanish].\", 'categories': 'Array[Object{name: string. The name of the category., weight: number. The weight of the category.}. ]. An array of category objects, each containing a name and a weight.', 'themes': 'Array[Object{name: string. The name of the theme., weight: number. The weight of the theme.}. ]. An array of theme objects, each containing a name and a weight.'}, 'output': 'Returns a JSON object containing the ID of the newly created configuration.', 'format': 'application/json', 'path': '/configuration', 'method': 'post'}]"
            },
            {
                "role": "assistant",
                "content": "Node:\n1: Create a new configuration in the text analytics tool named 'Social Media Analysis' with specific categories for 'Positive Feedback' and 'Negative Feedback'.\n2: Revise the input parameters for creating a new configuration in the text analytics tool by adjusting the weights assigned to the categories 'Positive Feedback' and 'Negative Feedback'.\nEdge: (START,1) (1,2) (2,END)"
            }
        ],
        "target": "graph",
        "id": "toolalpaca_890",
        "category": "eval"
    },
    {
        "source": "toolalpaca",
        "conversations": [
            {
                "role": "system",
                "content": "You are a helpful task planner.\nFirst I will give you the task description and tools list you can use to finish the task, and your task is to plan a sequence of nodes which are subtasks to achieve the task. Each node of workflow is a subtask, and you can use the tools to complete the subtask.\nAfter you construct the plan, since some subtasks may not be dependent on each other, while others may have dependencies. Please convert these nodes of subtasks into a topology diagram based on the task relevance in the workflow. The Graph should start with START node, and end with END node. \nKeep your output in foramt:\nNode:\n1.{subtask_1}\n2.{subtask_2}\n...\nEdges:\n(START,1)\n...\n(n,END))"
            },
            {
                "role": "user",
                "content": "Task: I want to brag about my \"Left 4 Dead 2\" achievements to my friends. Can you please authenticate my account and list all the achievements I've unlocked in the game?\nThe api list you can use: [{'name': 'authenticateUser', 'description': \"Securely authenticate a user's login and authorization.\", 'parameters': {'steamApiKey': 'Required. string. Your Steam API key.', 'steamId': \"Required. string. The user's Steam ID.\"}, 'output': 'User authentication successful.', 'format': 'application/json', 'path': '/authenticateUser', 'method': 'post'}, {'name': 'getPlayerStats', 'description': 'Retrieve player stats and other game data.', 'parameters': {'steamApiKey': 'Required. string. Your Steam API key.', 'steamId': \"Required. string. The user's Steam ID.\", 'appId': 'Required. integer. The ID of the game for which stats are being requested.'}, 'output': 'Player stats retrieved successfully.', 'format': 'application/json', 'path': '/getPlayerStats', 'method': 'post'}, {'name': 'getPlayerInventory', 'description': \"Access a player's inventory, including hats, weapons, and other items.\", 'parameters': {'steamApiKey': 'Required. string. Your Steam API key.', 'steamId': \"Required. string. The user's Steam ID.\", 'appId': 'Required. integer. The ID of the game for which the inventory is being requested.'}, 'output': 'Player inventory retrieved successfully.', 'format': 'application/json', 'path': '/getPlayerInventory', 'method': 'post'}, {'name': 'getPlayerAchievements', 'description': 'Retrieve player achievements and unlockables.', 'parameters': {'steamApiKey': 'Required. string. Your Steam API key.', 'steamId': \"Required. string. The user's Steam ID.\", 'appId': 'Required. integer. The ID of the game for which achievements are being requested.'}, 'output': 'Player achievements retrieved successfully.', 'format': 'application/json', 'path': '/getPlayerAchievements', 'method': 'post'}, {'name': 'getGameLeaderboard', 'description': 'Access leaderboard data for a specific game.', 'parameters': {'steamApiKey': 'Required. string. Your Steam API key.', 'appId': 'Required. integer. The ID of the game for which the leaderboard is being requested.', 'leaderboardId': 'integer. The ID of the specific leaderboard to retrieve. If not provided, returns the global leaderboard.'}, 'output': 'Game leaderboard retrieved successfully.', 'format': 'application/json', 'path': '/getGameLeaderboard', 'method': 'post'}]"
            },
            {
                "role": "assistant",
                "content": "Node:\n1: Authenticate the user's Steam account and retrieve their achievements for \"Left 4 Dead 2\".\n2: Retrieve the list of achievements for the game \"Left 4 Dead 2\" from the authenticated user's Steam account.\nEdge: (START,1) (1,2) (2,END)"
            }
        ],
        "target": "graph",
        "id": "toolalpaca_192",
        "category": "eval"
    },
    {
        "source": "toolalpaca",
        "conversations": [
            {
                "role": "system",
                "content": "You are a helpful task planner.\nFirst I will give you the task description and tools list you can use to finish the task, and your task is to plan a sequence of nodes which are subtasks to achieve the task. Each node of workflow is a subtask, and you can use the tools to complete the subtask.\nAfter you construct the plan, since some subtasks may not be dependent on each other, while others may have dependencies. Please convert these nodes of subtasks into a topology diagram based on the task relevance in the workflow. The Graph should start with START node, and end with END node. \nKeep your output in foramt:\nNode:\n1.{subtask_1}\n2.{subtask_2}\n...\nEdges:\n(START,1)\n...\n(n,END))"
            },
            {
                "role": "user",
                "content": "Task: My friend told me about an interesting book called \"To Kill a Mockingbird.\" Can you find more information about the book, such as its author, publication date, and awards received, by searching for the book and then getting the item details?\nThe api list you can use: [{'name': 'searchItems', 'description': 'Search for and retrieve a list of items based on a given search term.', 'parameters': {'searchTerm': 'Required. string. The term to search for in the Wikidata knowledge base.', 'language': \"string. One of: [en, fr, de, es, it, pt, ru, zh, ja]. The language in which to return the results. Default is 'en' (English).\", 'limit': 'integer. The maximum number of results to return. Default is 10.'}, 'output': 'A list of items matching the search term, including their Wikidata IDs, labels, descriptions, and aliases.', 'format': 'application/json', 'path': '/searchItems', 'method': 'get'}, {'name': 'getItemDetails', 'description': 'Retrieve detailed information about a specific item using its Wikidata ID.', 'parameters': {'itemId': 'Required. string. The Wikidata ID of the item to retrieve information for.', 'language': \"string. One of: [en, fr, de, es, it, pt, ru, zh, ja]. The language in which to return the results. Default is 'en' (English).\"}, 'output': 'Detailed information about the specified item, including its label, aliases, description, properties, and associated values.', 'format': 'application/json', 'path': '/getItemDetails', 'method': 'get'}, {'name': 'listProperties', 'description': 'Retrieve a list of all properties in Wikidata and their associated values.', 'parameters': {'language': \"string. One of: [en, fr, de, es, it, pt, ru, zh, ja]. The language in which to return the results. Default is 'en' (English).\", 'limit': 'integer. The maximum number of properties to return. Default is 50.'}, 'output': 'A list of properties in Wikidata, including their IDs, labels, descriptions, and associated values.', 'format': 'application/json', 'path': '/listProperties', 'method': 'get'}, {'name': 'getPropertyDetails', 'description': 'Retrieve detailed information about a specific property using its Wikidata ID.', 'parameters': {'propertyId': 'Required. string. The Wikidata ID of the property to retrieve information for.', 'language': \"string. One of: [en, fr, de, es, it, pt, ru, zh, ja]. The language in which to return the results. Default is 'en' (English).\"}, 'output': 'Detailed information about the specified property, including its label, description, and associated values.', 'format': 'application/json', 'path': '/getPropertyDetails', 'method': 'get'}, {'name': 'queryRelations', 'description': \"Explore the network of relations between different items using the API's advanced query language.\", 'parameters': {'query': 'Required. string. The query to execute in the Wikidata query language (SPARQL).', 'language': \"string. One of: [en, fr, de, es, it, pt, ru, zh, ja]. The language in which to return the results. Default is 'en' (English).\"}, 'output': 'The results of the executed query, including the items, properties, and relations between them.', 'format': 'application/json', 'path': '/queryRelations', 'method': 'get'}, {'name': 'getAvailableLanguages', 'description': 'Retrieve a list of available languages for the Wikidata API.', 'parameters': {}, 'output': 'A list of available languages, including their language codes and names.', 'format': 'application/json', 'path': '/getAvailableLanguages', 'method': 'get'}]"
            },
            {
                "role": "assistant",
                "content": "Node:\n1: Search for information on the book \"To Kill a Mockingbird\" using the \"searchItems\" tool and then retrieve detailed information such as the author, publication date, and awards using the \"getItemDetails\" tool.\n2: Retrieve detailed information for the book \"To Kill a Mockingbird\" using the \"getItemDetails\" tool, focusing on the author, publication date, and any awards received by querying with the Wikidata ID obtained from the previous search.\nEdge: (START,1) (1,2) (2,END)"
            }
        ],
        "target": "graph",
        "id": "toolalpaca_108",
        "category": "eval"
    },
    {
        "source": "toolalpaca",
        "conversations": [
            {
                "role": "system",
                "content": "You are a helpful task planner.\nFirst I will give you the task description and tools list you can use to finish the task, and your task is to plan a sequence of nodes which are subtasks to achieve the task. Each node of workflow is a subtask, and you can use the tools to complete the subtask.\nAfter you construct the plan, since some subtasks may not be dependent on each other, while others may have dependencies. Please convert these nodes of subtasks into a topology diagram based on the task relevance in the workflow. The Graph should start with START node, and end with END node. \nKeep your output in foramt:\nNode:\n1.{subtask_1}\n2.{subtask_2}\n...\nEdges:\n(START,1)\n...\n(n,END))"
            },
            {
                "role": "user",
                "content": "Task: What are the rules for the Commander format in Magic The Gathering?\nThe api list you can use: [{'name': 'getCard', 'description': 'Retrieves detailed information about a specific Magic The Gathering card.', 'parameters': {'name': 'Required. string. The name of the card to retrieve.'}, 'output': 'Successful response.', 'format': 'application/json', 'path': '/card', 'method': 'get'}, {'name': 'searchCards', 'description': 'Searches for Magic The Gathering cards based on various criteria.', 'parameters': {'name': 'string. The name of the card to search for.', 'set': 'string. The set the card belongs to.', 'color': 'string. One of: [White, Blue, Black, Red, Green]. The color of the card.', 'type': 'string. The type of the card.', 'rarity': 'string. The rarity of the card.', 'artist': 'string. The name of the artist who illustrated the card.'}, 'output': 'Successful response.', 'format': 'application/json', 'path': '/cards', 'method': 'get'}, {'name': 'getSet', 'description': 'Retrieves information about a specific Magic The Gathering set.', 'parameters': {'code': 'Required. string. The code of the set to retrieve.'}, 'output': 'Successful response.', 'format': 'application/json', 'path': '/set', 'method': 'get'}, {'name': 'searchSets', 'description': 'Searches for Magic The Gathering sets based on various criteria.', 'parameters': {'name': 'string. The name of the set to search for.', 'block': 'string. The block the set belongs to.'}, 'output': 'Successful response.', 'format': 'application/json', 'path': '/sets', 'method': 'get'}, {'name': 'getArtist', 'description': 'Retrieves information about a specific Magic The Gathering artist.', 'parameters': {'name': 'Required. string. The name of the artist to retrieve.'}, 'output': 'Successful response.', 'format': 'application/json', 'path': '/artist', 'method': 'get'}]"
            },
            {
                "role": "assistant",
                "content": "Node:\n1: Look for a reliable source to obtain the rules for the Commander format in Magic: The Gathering.\n2: Retrieve detailed information about the \"Commander\" set using the appropriate set identification tool.\n3: Explore the specific details of the card \"Adamaro, First to Desire\" to better understand its attributes and potential implications for the rules of the Commander format.\n4: Investigate further by retrieving details of the card \"Akroma, Angel of Wrath\" to enhance understanding of its characteristics and relevance to the Commander format rules.\n5: Look up the details of the card \"Akroma's Vengeance\" to gather information potentially regarding the rules of the Commander format based on the text of this card.\nEdge: (START,1) (1,2) (2,3) (2,4) (2,5) (3,END) (4,END) (5,END)"
            }
        ],
        "target": "graph",
        "id": "toolalpaca_601",
        "category": "eval"
    },
    {
        "source": "toolalpaca",
        "conversations": [
            {
                "role": "system",
                "content": "You are a helpful task planner.\nFirst I will give you the task description and tools list you can use to finish the task, and your task is to plan a sequence of nodes which are subtasks to achieve the task. Each node of workflow is a subtask, and you can use the tools to complete the subtask.\nAfter you construct the plan, since some subtasks may not be dependent on each other, while others may have dependencies. Please convert these nodes of subtasks into a topology diagram based on the task relevance in the workflow. The Graph should start with START node, and end with END node. \nKeep your output in foramt:\nNode:\n1.{subtask_1}\n2.{subtask_2}\n...\nEdges:\n(START,1)\n...\n(n,END))"
            },
            {
                "role": "user",
                "content": "Task: I'd like to read some articles about the latest gadgets from the RSS feed \"https://gadgetblog.com/rss\". Please filter the articles by the tags \"Gadgets\" and \"Technology\" and sort them by title in ascending order.\nThe api list you can use: [{'name': 'getFeedItems', 'description': 'Retrieve the feed items in JSON format.', 'parameters': {'feedUrl': 'Required. string. The URL of the RSS feed to be converted to JSON.'}, 'output': 'A JSON object containing an array of feed items.', 'format': 'application/json', 'path': '/getFeedItems', 'method': 'get'}, {'name': 'getFeedItemsByTag', 'description': 'Retrieve the feed items in JSON format filtered by specific tags.', 'parameters': {'feedUrl': 'Required. string. The URL of the RSS feed to be converted to JSON.', 'tags': 'Required. Array[string].  The tags to filter the feed items by.'}, 'output': 'A JSON object containing an array of feed items filtered by the specified tags.', 'format': 'application/json', 'path': '/getFeedItemsByTag', 'method': 'get'}, {'name': 'getFeedItemsByField', 'description': 'Retrieve the feed items in JSON format filtered by specific fields.', 'parameters': {'feedUrl': 'Required. string. The URL of the RSS feed to be converted to JSON.', 'fields': 'Required. Array[string].  The fields to filter the feed items by.'}, 'output': 'A JSON object containing an array of feed items filtered by the specified fields.', 'format': 'application/json', 'path': '/getFeedItemsByField', 'method': 'get'}, {'name': 'sortFeedItems', 'description': 'Retrieve the feed items in JSON format sorted by date or other attributes.', 'parameters': {'feedUrl': 'Required. string. The URL of the RSS feed to be converted to JSON.', 'sortBy': \"Required. string. The attribute to sort the feed items by (e.g., 'pubDate', 'title').\", 'order': \"string. One of: [asc, desc]. The order of sorting, either 'asc' (ascending) or 'desc' (descending). Default is 'asc'.\"}, 'output': 'A JSON object containing an array of feed items sorted by the specified attribute and order.', 'format': 'application/json', 'path': '/sortFeedItems', 'method': 'get'}]"
            },
            {
                "role": "assistant",
                "content": "Node:\n1: Retrieve and sort articles from the \"https://gadgetblog.com/rss\" feed, focusing specifically on those tagged with \"Gadgets\" and \"Technology\", and order\n2: Sort the articles retrieved from the \"https://gadgetblog.com/rss\" feed by their titles in ascending order, focusing on those tagged with \"Gadgets\" and \"Technology\".\nEdge: (START,1) (1,2) (2,END)"
            }
        ],
        "target": "graph",
        "id": "toolalpaca_374",
        "category": "eval"
    },
    {
        "source": "toolalpaca",
        "conversations": [
            {
                "role": "system",
                "content": "You are a helpful task planner.\nFirst I will give you the task description and tools list you can use to finish the task, and your task is to plan a sequence of nodes which are subtasks to achieve the task. Each node of workflow is a subtask, and you can use the tools to complete the subtask.\nAfter you construct the plan, since some subtasks may not be dependent on each other, while others may have dependencies. Please convert these nodes of subtasks into a topology diagram based on the task relevance in the workflow. The Graph should start with START node, and end with END node. \nKeep your output in foramt:\nNode:\n1.{subtask_1}\n2.{subtask_2}\n...\nEdges:\n(START,1)\n...\n(n,END))"
            },
            {
                "role": "user",
                "content": "Task: I'm curious about quotes related to debugging. Can you find some for me? After that, please show me a list of all authors so I can learn more about their thoughts on programming.\nThe api list you can use: [{'name': 'getRandomQuote', 'description': 'Retrieve a random programming quote.', 'parameters': {}, 'output': 'A single quote object containing the quote text, author, and related tags.', 'format': 'application/json', 'path': '/quotes/random', 'method': 'get'}, {'name': 'getQuoteById', 'description': 'Retrieve a specific quote by its ID.', 'parameters': {'id': 'Required. string. The unique identifier of the quote.'}, 'output': 'A single quote object containing the quote text, author, and related tags.', 'format': 'application/json', 'path': '/quotes/{id}', 'method': 'get'}, {'name': 'searchQuotesByAuthor', 'description': 'Retrieve a list of quotes by a specific author.', 'parameters': {'author': 'Required. string. The name of the author to search for.', 'limit': 'integer. The maximum number of quotes to return.', 'offset': 'integer. The starting index for the search results.'}, 'output': 'A list of quote objects containing the quote text, author, and related tags, filtered by the specified author.', 'format': 'application/json', 'path': '/quotes/search/author', 'method': 'get'}, {'name': 'searchQuotesByTag', 'description': 'Retrieve a list of quotes by a specific tag.', 'parameters': {'tag': 'Required. string. The tag to search for.', 'limit': 'integer. The maximum number of quotes to return.', 'offset': 'integer. The starting index for the search results.'}, 'output': 'A list of quote objects containing the quote text, author, and related tags, filtered by the specified tag.', 'format': 'application/json', 'path': '/quotes/search/tag', 'method': 'get'}, {'name': 'getAllAuthors', 'description': 'Retrieve a list of all authors in the database.', 'parameters': {'limit': 'integer. The maximum number of authors to return.', 'offset': 'integer. The starting index for the search results.'}, 'output': 'A list of author names.', 'format': 'application/json', 'path': '/authors', 'method': 'get'}, {'name': 'getAllTags', 'description': 'Retrieve a list of all tags in the database.', 'parameters': {'limit': 'integer. The maximum number of tags to return.', 'offset': 'integer. The starting index for the search results.'}, 'output': 'A list of tag names.', 'format': 'application/json', 'path': '/tags', 'method': 'get'}]"
            },
            {
                "role": "assistant",
                "content": "Node:\n1: Retrieve quotes related to \"debugging\" and then list all authors associated with these quotes.\n2: Retrieve a list of all authors who have provided quotes related to debugging.\nEdge: (START,1) (1,2) (2,END)"
            }
        ],
        "target": "graph",
        "id": "toolalpaca_341",
        "category": "eval"
    },
    {
        "source": "toolalpaca",
        "conversations": [
            {
                "role": "system",
                "content": "You are a helpful task planner.\nFirst I will give you the task description and tools list you can use to finish the task, and your task is to plan a sequence of nodes which are subtasks to achieve the task. Each node of workflow is a subtask, and you can use the tools to complete the subtask.\nAfter you construct the plan, since some subtasks may not be dependent on each other, while others may have dependencies. Please convert these nodes of subtasks into a topology diagram based on the task relevance in the workflow. The Graph should start with START node, and end with END node. \nKeep your output in foramt:\nNode:\n1.{subtask_1}\n2.{subtask_2}\n...\nEdges:\n(START,1)\n...\n(n,END))"
            },
            {
                "role": "user",
                "content": "Task: Show me the address and coordinates of the nearest hospital.\nThe api list you can use: [{'name': 'forwardGeocoding', 'description': 'Convert a textual address into geographic coordinates (latitude and longitude).', 'parameters': {'query': 'Required. string. The address to be geocoded.', 'normalizecity': 'boolean. If set to true, the city name will be normalized to its standard spelling.', 'addressdetails': 'boolean. If set to true, additional details about the address will be returned.', 'accept-language': 'string. The language in which the results should be returned.'}, 'output': 'Successful response.', 'format': 'application/json', 'path': '/forward', 'method': 'post'}, {'name': 'reverseGeocoding', 'description': 'Convert geographic coordinates into a textual address.', 'parameters': {'lat': 'Required. number. The latitude of the location to be reverse geocoded.', 'lon': 'Required. number. The longitude of the location to be reverse geocoded.', 'zoom': 'integer. The level of detail required in the response. The higher the zoom value, the more detailed the response.', 'addressdetails': 'boolean. If set to true, additional details about the address will be returned.', 'accept-language': 'string. The language in which the results should be returned.'}, 'output': 'Successful response.', 'format': 'application/json', 'path': '/reverse', 'method': 'post'}, {'name': 'batchGeocoding', 'description': 'Convert multiple addresses or coordinates in bulk.', 'parameters': {'addresses': 'Array[string]. The addresses to be geocoded.', 'latlons': 'Array[string]. The latitude and longitude coordinates to be reverse geocoded.', 'normalizecity': 'boolean. If set to true, the city name will be normalized to its standard spelling.', 'addressdetails': 'boolean. If set to true, additional details about the address will be returned.', 'accept-language': 'string. The language in which the results should be returned.'}, 'output': 'Successful response.', 'format': 'application/json', 'path': '/batch', 'method': 'post'}]"
            },
            {
                "role": "assistant",
                "content": "Node:\n1: Convert the user's location into coordinates to find the nearest hospital.\n2: Convert the coordinates back into an address to show the location of the nearest hospital.\nEdge: (START,1) (1,2) (2,END)"
            }
        ],
        "target": "graph",
        "id": "toolalpaca_598",
        "category": "eval"
    },
    {
        "source": "toolalpaca",
        "conversations": [
            {
                "role": "system",
                "content": "You are a helpful task planner.\nFirst I will give you the task description and tools list you can use to finish the task, and your task is to plan a sequence of nodes which are subtasks to achieve the task. Each node of workflow is a subtask, and you can use the tools to complete the subtask.\nAfter you construct the plan, since some subtasks may not be dependent on each other, while others may have dependencies. Please convert these nodes of subtasks into a topology diagram based on the task relevance in the workflow. The Graph should start with START node, and end with END node. \nKeep your output in foramt:\nNode:\n1.{subtask_1}\n2.{subtask_2}\n...\nEdges:\n(START,1)\n...\n(n,END))"
            },
            {
                "role": "user",
                "content": "Task: I want to stay updated on the latest political news in the United Kingdom. Can you find the top headlines for me, and also provide a list of news sources that focus on politics in the UK?\nThe api list you can use: [{'name': 'getTopHeadlines', 'description': 'Retrieve the top headlines from various news sources and blogs.', 'parameters': {'country': 'string. The 2-letter ISO 3166-1 code of the country you want to get headlines for.', 'category': 'string. The category you want to get headlines for.', 'sources': 'string. A comma-separated list of news sources or blogs you want to get headlines from.', 'q': 'string. Keywords or phrases to search for in the article title and content.', 'pageSize': 'integer. The number of results to return per page.', 'page': 'integer. The page number to return.'}, 'output': 'A list of top headlines.', 'format': 'application/json', 'path': '/top-headlines', 'method': 'get'}, {'name': 'getEverything', 'description': 'Search for articles from various news sources and blogs based on specific criteria.', 'parameters': {'q': 'Required. string. Keywords or phrases to search for in the article title and content.', 'sources': 'string. A comma-separated list of news sources or blogs you want to get articles from.', 'domains': 'string. A comma-separated list of domains to restrict the search to.', 'excludeDomains': 'string. A comma-separated list of domains to exclude from the search.', 'role': 'string. The earliest date to search for articles (in YYYY-MM-DD format).', 'to': 'string. The latest date to search for articles (in YYYY-MM-DD format).', 'language': 'string. The 2-letter ISO 639-1 code of the language you want to get articles in.', 'sortBy': 'string. One of: [relevancy, popularity, publishedAt]. The criteria to sort the articles by (relevancy, popularity, or publishedAt).', 'pageSize': 'integer. The number of results to return per page.', 'page': 'integer. The page number to return.'}, 'output': 'A list of articles.', 'format': 'application/json', 'path': '/everything', 'method': 'get'}, {'name': 'getSources', 'description': 'Retrieve a list of news sources and blogs available in the API.', 'parameters': {'category': 'string. The category you want to get sources for.', 'language': 'string. The 2-letter ISO 639-1 code of the language you want to get sources in.', 'country': 'string. The 2-letter ISO 3166-1 code of the country you want to get sources for.'}, 'output': 'A list of news sources and blogs.', 'format': 'application/json', 'path': '/sources', 'method': 'get'}, {'name': 'createAlert', 'description': 'Configure custom alerts to notify users of new articles based on specific criteria.', 'parameters': {'q': 'string.', 'sources': 'string.', 'language': 'string.', 'frequency': 'string. One of: [daily, weekly, monthly].', 'email': 'string.'}, 'output': 'A confirmation message indicating the successful creation of the alert.', 'format': 'application/json', 'path': '/alerts', 'method': 'post'}]"
            },
            {
                "role": "assistant",
                "content": "Node:\n1: Retrieve the top political headlines from the United Kingdom and provide a list of news sources that specialize in UK politics.\n2: Find a list of news sources focusing specifically on politics in the United Kingdom.\nEdge: (START,1) (START,2) (1,END) (2,END)"
            }
        ],
        "target": "graph",
        "id": "toolalpaca_355",
        "category": "eval"
    },
    {
        "source": "toolalpaca",
        "conversations": [
            {
                "role": "system",
                "content": "You are a helpful task planner.\nFirst I will give you the task description and tools list you can use to finish the task, and your task is to plan a sequence of nodes which are subtasks to achieve the task. Each node of workflow is a subtask, and you can use the tools to complete the subtask.\nAfter you construct the plan, since some subtasks may not be dependent on each other, while others may have dependencies. Please convert these nodes of subtasks into a topology diagram based on the task relevance in the workflow. The Graph should start with START node, and end with END node. \nKeep your output in foramt:\nNode:\n1.{subtask_1}\n2.{subtask_2}\n...\nEdges:\n(START,1)\n...\n(n,END))"
            },
            {
                "role": "user",
                "content": "Task: Please provide me with information about the Falcon 9 rocket.\nThe api list you can use: [{'name': 'getCompanyInfo', 'description': 'Retrieves information about SpaceX as a company, including its history and mission statement.', 'parameters': {}, 'output': 'Returns a JSON object containing information about SpaceX as a company.', 'format': 'application/json', 'path': '/company', 'method': 'get'}, {'name': 'getRocket', 'description': 'Retrieves information about a specific rocket ship, including its name, type, and launch history.', 'parameters': {'id': 'Required. string. The unique identifier of the rocket.'}, 'output': 'Returns a JSON object containing information about the specified rocket.', 'format': 'application/json', 'path': '/rocket', 'method': 'get'}, {'name': 'getLaunch', 'description': 'Retrieves information about a specific launch, including its name, date, and mission details.', 'parameters': {'id': 'Required. string. The unique identifier of the launch.'}, 'output': 'Returns a JSON object containing information about the specified launch.', 'format': 'application/json', 'path': '/launch', 'method': 'get'}, {'name': 'getNextLaunch', 'description': 'Retrieves information about the next scheduled launch.', 'parameters': {}, 'output': 'Returns a JSON object containing information about the next scheduled launch.', 'format': 'application/json', 'path': '/launch/next', 'method': 'get'}, {'name': 'getPastLaunches', 'description': 'Retrieves information about past launches, with optional filtering by date range and success status.', 'parameters': {'start_date_utc': 'string. The start date of the date range to filter by, in UTC format.', 'end_date_utc': 'string. The end date of the date range to filter by, in UTC format.', 'success': 'boolean. Whether to filter by successful launches only.'}, 'output': 'Returns an array of JSON objects containing information about past launches.', 'format': 'application/json', 'path': '/launches/past', 'method': 'get'}, {'name': 'getUpcomingLaunches', 'description': 'Retrieves information about upcoming launches, with optional filtering by date range.', 'parameters': {'start_date_utc': 'string. The start date of the date range to filter by, in UTC format.', 'end_date_utc': 'string. The end date of the date range to filter by, in UTC format.'}, 'output': 'Returns an array of JSON objects containing information about upcoming launches.', 'format': 'application/json', 'path': '/launches/upcoming', 'method': 'get'}]"
            },
            {
                "role": "assistant",
                "content": "Node:\n1: Retrieve detailed specifications and history about the Falcon 9 rocket using the rocket information retrieval tool.\n2: Get information about SpaceX by accessing the company information retrieval tool.\n3: Retrieve historical launch data for the Falcon 9 rocket using the past launches information tool.\nEdge: (START,1) (START,2) (1,3) (2,3) (3,END)"
            }
        ],
        "target": "graph",
        "id": "toolalpaca_502",
        "category": "eval"
    },
    {
        "source": "toolalpaca",
        "conversations": [
            {
                "role": "system",
                "content": "You are a helpful task planner.\nFirst I will give you the task description and tools list you can use to finish the task, and your task is to plan a sequence of nodes which are subtasks to achieve the task. Each node of workflow is a subtask, and you can use the tools to complete the subtask.\nAfter you construct the plan, since some subtasks may not be dependent on each other, while others may have dependencies. Please convert these nodes of subtasks into a topology diagram based on the task relevance in the workflow. The Graph should start with START node, and end with END node. \nKeep your output in foramt:\nNode:\n1.{subtask_1}\n2.{subtask_2}\n...\nEdges:\n(START,1)\n...\n(n,END))"
            },
            {
                "role": "user",
                "content": "Task: Provide me with the album release date and cover art URL for 'Abbey Road' by The Beatles.\nThe api list you can use: [{'name': 'getArtistInfo', 'description': 'Retrieve detailed information about an artist.', 'parameters': {'artistId': 'Required. string. The unique identifier of the artist.'}, 'output': 'Successful response.', 'format': 'application/json', 'path': '/artist/{artistId}', 'method': 'get'}, {'name': 'getAlbumInfo', 'description': 'Obtain comprehensive information about an album.', 'parameters': {'albumId': 'Required. string. The unique identifier of the album.'}, 'output': 'Successful response.', 'format': 'application/json', 'path': '/album/{albumId}', 'method': 'get'}, {'name': 'getTrackInfo', 'description': 'Get detailed information about an individual track.', 'parameters': {'trackId': 'Required. string. The unique identifier of the track.'}, 'output': 'Successful response.', 'format': 'application/json', 'path': '/track/{trackId}', 'method': 'get'}, {'name': 'searchMusic', 'description': 'Search for music based on various criteria.', 'parameters': {'query': 'Required. string. The search query.', 'type': 'Required. string. One of: [artist, album, track, ISRC]. The type of search (artist, album, track, or ISRC).', 'limit': 'integer. The maximum number of results to return.', 'offset': 'integer. The starting index of the results.'}, 'output': 'Successful response.', 'format': 'application/json', 'path': '/search', 'method': 'get'}, {'name': 'getArtistAlbums', 'description': 'Retrieve a list of albums released by a specific artist.', 'parameters': {'artistId': 'Required. string. The unique identifier of the artist.', 'limit': 'integer. The maximum number of results to return.', 'offset': 'integer. The starting index of the results.'}, 'output': 'Successful response.', 'format': 'application/json', 'path': '/artist/{artistId}/albums', 'method': 'get'}, {'name': 'getAlbumTracks', 'description': 'Obtain a list of tracks from a specific album.', 'parameters': {'albumId': 'Required. string. The unique identifier of the album.'}, 'output': 'Successful response.', 'format': 'application/json', 'path': '/album/{albumId}/tracks', 'method': 'get'}]"
            },
            {
                "role": "assistant",
                "content": "Node:\n1: Search for the album 'Abbey Road' by The Beatles to retrieve its album ID.\n2: Retrieve the detailed information about the album 'Abbey Road' using the album ID to fetch the release date and cover art URL.\nEdge: (START,1) (1,2) (2,END)"
            }
        ],
        "target": "graph",
        "id": "toolalpaca_326",
        "category": "eval"
    },
    {
        "source": "toolalpaca",
        "conversations": [
            {
                "role": "system",
                "content": "You are a helpful task planner.\nFirst I will give you the task description and tools list you can use to finish the task, and your task is to plan a sequence of nodes which are subtasks to achieve the task. Each node of workflow is a subtask, and you can use the tools to complete the subtask.\nAfter you construct the plan, since some subtasks may not be dependent on each other, while others may have dependencies. Please convert these nodes of subtasks into a topology diagram based on the task relevance in the workflow. The Graph should start with START node, and end with END node. \nKeep your output in foramt:\nNode:\n1.{subtask_1}\n2.{subtask_2}\n...\nEdges:\n(START,1)\n...\n(n,END))"
            },
            {
                "role": "user",
                "content": "Task: I'm planning to take the Green Line train today. Can you provide me with a list of all the stops and stations on this route? Also, check if there are any service alerts or delays that might affect my travel.\nThe api list you can use: [{'name': 'getRealTimeArrivals', 'description': 'Retrieve real-time bus and train arrival/departure times for a specific stop or station.', 'parameters': {'stopId': 'Required. integer. The unique identifier of the stop or station.', 'routeId': 'integer. The unique identifier of the route to filter results.'}, 'output': 'A list of arrival/departure times.', 'format': 'application/json', 'path': '/realtimearrivals', 'method': 'get'}, {'name': 'getServiceAlerts', 'description': 'Get information about CTA service interruptions, delays, and alerts.', 'parameters': {'routeId': 'integer. The unique identifier of the route to filter results.', 'alertType': 'string. The type of alert to filter results.'}, 'output': 'A list of service alerts.', 'format': 'application/json', 'path': '/servicealerts', 'method': 'get'}, {'name': 'getStationInformation', 'description': 'Retrieve up-to-date information about a specific station.', 'parameters': {'stationId': 'Required. integer. The unique identifier of the station.'}, 'output': 'Station information.', 'format': 'application/json', 'path': '/stationinformation', 'method': 'get'}, {'name': 'searchStations', 'description': 'Search for stations based on a query.', 'parameters': {'query': 'Required. string. The search query to find matching stations.'}, 'output': 'A list of matching stations.', 'format': 'application/json', 'path': '/searchstations', 'method': 'get'}, {'name': 'listRoutes', 'description': 'Retrieve a list of all available CTA routes.', 'parameters': {}, 'output': 'A list of routes.', 'format': 'application/json', 'path': '/listroutes', 'method': 'get'}, {'name': 'getRouteStops', 'description': 'Get a list of all stops and stations for a specific route.', 'parameters': {'routeId': 'Required. integer. The unique identifier of the route.'}, 'output': 'A list of stops and stations.', 'format': 'application/json', 'path': '/routestops', 'method': 'get'}]"
            },
            {
                "role": "assistant",
                "content": "Node:\n1: Retrieve the route ID for the Green Line to obtain all stops and any service alerts associated with it.\n2: Retrieve the list of all stops and stations for the Green Line using its route ID.\n3: Check for any service alerts or delays that might affect travel on the Green Line using its route ID.\nEdge: \n(START,1) \n(1,2) \n(1,3) \n(2,3) \n(3,END)"
            }
        ],
        "target": "graph",
        "id": "toolalpaca_255",
        "category": "eval"
    },
    {
        "source": "toolalpaca",
        "conversations": [
            {
                "role": "system",
                "content": "You are a helpful task planner.\nFirst I will give you the task description and tools list you can use to finish the task, and your task is to plan a sequence of nodes which are subtasks to achieve the task. Each node of workflow is a subtask, and you can use the tools to complete the subtask.\nAfter you construct the plan, since some subtasks may not be dependent on each other, while others may have dependencies. Please convert these nodes of subtasks into a topology diagram based on the task relevance in the workflow. The Graph should start with START node, and end with END node. \nKeep your output in foramt:\nNode:\n1.{subtask_1}\n2.{subtask_2}\n...\nEdges:\n(START,1)\n...\n(n,END))"
            },
            {
                "role": "user",
                "content": "Task: Hey, can you help me analyze the ingredients in this recipe for my vegan friend? I want to make sure it's safe for them to eat.\nThe api list you can use: [{'name': 'parseIngredients', 'description': 'Extracts ingredients from a recipe and returns them in a structured format.', 'parameters': {'recipe': 'Required. string.'}, 'output': 'Successful response.', 'format': 'application/json', 'path': '/parseIngredients', 'method': 'post'}, {'name': 'scoreRecipe', 'description': 'Calculates the nutritional value of a recipe.', 'parameters': {'recipe': 'Required. string.'}, 'output': 'Successful response.', 'format': 'application/json', 'path': '/scoreRecipe', 'method': 'post'}, {'name': 'analyzeIngredients', 'description': 'Filters recipe ingredients based on allergen information and dietary preferences.', 'parameters': {'ingredients': 'Required. Array[string]. ', 'allergens': 'Required. Array[string]. ', 'dietaryPreferences': 'Required. Array[string]. '}, 'output': 'Successful response.', 'format': 'application/json', 'path': '/analyzeIngredients', 'method': 'post'}]"
            },
            {
                "role": "assistant",
                "content": "Node:\n1: Gather the recipe details and inquire about any specific allergens or dietary preferences that the vegan friend might have.\n2: Assess the listed ingredients to verify if they contain nuts, soy, or gluten, which are allergens and dietary restrictions specified by the vegan friend.\n3: Identify which ingredients from the provided list are safe considering the vegan friend's allergies to nuts and soy, as well as their avoidance of gluten.\n4: Evaluate the suitability of the lentil soup recipe for the vegan friend by scoring it based on the compatibility with their dietary restrictions and allergen avoidance.\nEdge: (START,1) (1,2) (2,3) (3,4) (4,END)"
            }
        ],
        "target": "graph",
        "id": "toolalpaca_488",
        "category": "eval"
    },
    {
        "source": "toolalpaca",
        "conversations": [
            {
                "role": "system",
                "content": "You are a helpful task planner.\nFirst I will give you the task description and tools list you can use to finish the task, and your task is to plan a sequence of nodes which are subtasks to achieve the task. Each node of workflow is a subtask, and you can use the tools to complete the subtask.\nAfter you construct the plan, since some subtasks may not be dependent on each other, while others may have dependencies. Please convert these nodes of subtasks into a topology diagram based on the task relevance in the workflow. The Graph should start with START node, and end with END node. \nKeep your output in foramt:\nNode:\n1.{subtask_1}\n2.{subtask_2}\n...\nEdges:\n(START,1)\n...\n(n,END))"
            },
            {
                "role": "user",
                "content": "Task: I'm interested in a particular token on the Polygon network. Can you first find the token balance for my address 0x7a250d5630b4cf539739df2c5dacb4c659f2488d, and then call a function named \"getTotalSupply\" on the contract? The contract address is 0x2791bca1f2de4661ed88a30c99a7a9449aa84174.\nThe api list you can use: [{'name': 'getTokenBalances', 'description': 'Retrieve token balances for an address or set of addresses on any blockchain network.', 'parameters': {'address': 'Required. string. The address or set of addresses to retrieve token balances for.', 'chainId': 'Required. integer. The blockchain network ID to query.'}, 'output': 'A list of token balances for the specified address(es) on the given blockchain network, including token name, symbol, contract address, and balance.', 'format': 'application/json', 'path': '/getTokenBalances', 'method': 'get'}, {'name': 'getHistoricalPrices', 'description': 'Query historical prices for a given token.', 'parameters': {'contractAddress': 'Required. string. The contract address of the token to query historical prices for.', 'chainId': 'Required. integer. The blockchain network ID to query.', 'startDate': 'string. The start date for the historical price query in YYYY-MM-DD format.', 'endDate': 'string. The end date for the historical price query in YYYY-MM-DD format.'}, 'output': 'A list of historical prices for the specified token, including date, open, high, low, close, and volume.', 'format': 'application/json', 'path': '/getHistoricalPrices', 'method': 'get'}, {'name': 'getTransactionData', 'description': 'Retrieve transaction data for a specific contract.', 'parameters': {'contractAddress': 'Required. string. The contract address to retrieve transaction data for.', 'chainId': 'Required. integer. The blockchain network ID to query.', 'startDate': 'string. The start date for the transaction data query in YYYY-MM-DD format.', 'endDate': 'string. The end date for the transaction data query in YYYY-MM-DD format.'}, 'output': 'A list of transactions for the specified contract, including transaction hash, block number, from address, to address, value, and timestamp.', 'format': 'application/json', 'path': '/getTransactionData', 'method': 'get'}, {'name': 'callContractFunction', 'description': 'Call specific functions on a contract.', 'parameters': {'contractAddress': 'string.', 'chainId': 'integer.', 'functionName': 'string.', 'functionParameters': 'Array[string]. '}, 'output': 'The result of the function call, including any returned data and the status of the call (success or failure).', 'format': 'application/json', 'path': '/callContractFunction', 'method': 'post'}]"
            },
            {
                "role": "assistant",
                "content": "Node:\n1: Retrieve the token balance of the specified address on the Polygon network.\n2: Correct the format of the chainId parameter to an integer and re-attempt retrieving the token balance for the specified address on the Polygon network.\n3: Invoke the \"getTotalSupply\" function on the specified smart contract to determine the total supply of the token.\nEdge: (START,1) (1,2) (2,3) (3,END)"
            }
        ],
        "target": "graph",
        "id": "toolalpaca_174",
        "category": "eval"
    },
    {
        "source": "toolalpaca",
        "conversations": [
            {
                "role": "system",
                "content": "You are a helpful task planner.\nFirst I will give you the task description and tools list you can use to finish the task, and your task is to plan a sequence of nodes which are subtasks to achieve the task. Each node of workflow is a subtask, and you can use the tools to complete the subtask.\nAfter you construct the plan, since some subtasks may not be dependent on each other, while others may have dependencies. Please convert these nodes of subtasks into a topology diagram based on the task relevance in the workflow. The Graph should start with START node, and end with END node. \nKeep your output in foramt:\nNode:\n1.{subtask_1}\n2.{subtask_2}\n...\nEdges:\n(START,1)\n...\n(n,END))"
            },
            {
                "role": "user",
                "content": "Task: Show me the latest books on cooking and baking.\nThe api list you can use: [{'name': 'searchBooks', 'description': 'Search for books using a variety of criteria such as author, title, subject, and ISBN.', 'parameters': {'query': 'Required. string. The search query.', 'author': 'string. The author of the book.', 'title': 'string. The title of the book.', 'subject': 'string. The subject of the book.', 'isbn': 'string. The ISBN of the book.'}, 'output': 'A list of books that match the search criteria.', 'format': 'application/json', 'path': '/searchBooks', 'method': 'get'}, {'name': 'getBookDetails', 'description': 'Retrieve detailed information about an individual book.', 'parameters': {'bookId': 'Required. string. The unique identifier for the book.'}, 'output': 'Detailed information about the book.', 'format': 'application/json', 'path': '/getBookDetails', 'method': 'get'}, {'name': 'getBookClassification', 'description': \"Access the BNB's classification system for books.\", 'parameters': {'bookId': 'Required. string. The unique identifier for the book.'}, 'output': 'Classification information for the book.', 'format': 'application/json', 'path': '/getBookClassification', 'method': 'get'}]"
            },
            {
                "role": "assistant",
                "content": "Node:\n1: Search for books related to the categories \"cooking\" and \"baking\" using a book database search tool.\n2: Retrieve detailed information for the book with ISBN '978-0-141-98877-8' using a book information retrieval service.\n3: Retrieve the classification information for the book with ISBN '978-0-141-98877-8' using a classification retrieval service.\nEdge: (START,1) (1,2) (1,3) (2,3) (3,END)"
            }
        ],
        "target": "graph",
        "id": "toolalpaca_745",
        "category": "eval"
    },
    {
        "source": "toolalpaca",
        "conversations": [
            {
                "role": "system",
                "content": "You are a helpful task planner.\nFirst I will give you the task description and tools list you can use to finish the task, and your task is to plan a sequence of nodes which are subtasks to achieve the task. Each node of workflow is a subtask, and you can use the tools to complete the subtask.\nAfter you construct the plan, since some subtasks may not be dependent on each other, while others may have dependencies. Please convert these nodes of subtasks into a topology diagram based on the task relevance in the workflow. The Graph should start with START node, and end with END node. \nKeep your output in foramt:\nNode:\n1.{subtask_1}\n2.{subtask_2}\n...\nEdges:\n(START,1)\n...\n(n,END))"
            },
            {
                "role": "user",
                "content": "Task: I'm considering investing in Tesla stocks. Can you provide me with the weekly stock data for the past three months? Also, analyze the moving average convergence divergence (MACD) for the same period.\nThe api list you can use: [{'name': 'getStockData', 'description': 'Retrieve real-time and historical stock data for a specific stock symbol.', 'parameters': {'symbol': 'Required. string. The stock symbol for which data is to be retrieved.', 'interval': \"string. One of: [1min, 5min, 15min, 30min, 60min, daily, weekly, monthly]. The time interval between data points (e.g., '1min', '5min', '15min', '30min', '60min', 'daily', 'weekly', 'monthly'). Default is 'daily'.\"}, 'output': 'Successful response.', 'format': 'application/json', 'path': '/stock', 'method': 'get'}, {'name': 'getCryptoData', 'description': 'Access intraday and historical prices of a specific cryptocurrency with real-time updates.', 'parameters': {'symbol': 'Required. string. The cryptocurrency symbol for which data is to be retrieved.', 'market': \"Required. string. The market in which the cryptocurrency is traded (e.g., 'USD', 'EUR', 'BTC').\", 'interval': \"string. One of: [1min, 5min, 15min, 30min, 60min, daily, weekly, monthly]. The time interval between data points (e.g., '1min', '5min', '15min', '30min', '60min', 'daily', 'weekly', 'monthly'). Default is 'daily'.\"}, 'output': 'Successful response.', 'format': 'application/json', 'path': '/crypto', 'method': 'get'}, {'name': 'getForexData', 'description': 'Retrieve forex data for a specific currency pair.', 'parameters': {'from_currency': 'Required. string. The base currency of the currency pair.', 'to_currency': 'Required. string. The quote currency of the currency pair.', 'interval': \"string. One of: [1min, 5min, 15min, 30min, 60min, daily, weekly, monthly]. The time interval between data points (e.g., '1min', '5min', '15min', '30min', '60min', 'daily', 'weekly', 'monthly'). Default is 'daily'.\"}, 'output': 'Successful response.', 'format': 'application/json', 'path': '/forex', 'method': 'get'}, {'name': 'getTechnicalIndicator', 'description': 'Analyze a specific technical indicator for a given stock, cryptocurrency, or forex data.', 'parameters': {'symbol': 'Required. string. The stock, cryptocurrency, or forex symbol for which the technical indicator is to be analyzed.', 'indicator': \"Required. string. The technical indicator to be analyzed (e.g., 'SMA', 'EMA', 'MACD', 'RSI').\", 'interval': \"string. One of: [1min, 5min, 15min, 30min, 60min, daily, weekly, monthly]. The time interval between data points (e.g., '1min', '5min', '15min', '30min', '60min', 'daily', 'weekly', 'monthly'). Default is 'daily'.\", 'parameters': 'Object.  Additional parameters specific to the chosen technical indicator.'}, 'output': 'Successful response.', 'format': 'application/json', 'path': '/technical', 'method': 'get'}]"
            },
            {
                "role": "assistant",
                "content": "Node:\n1: Retrieve Tesla's weekly stock data for the past three months and analyze the moving average convergence divergence (MACD) for the same period.\n2: Calculate the moving average convergence divergence (MACD) for Tesla's weekly stock data over the past three months.\nEdge: (START,1) (1,2) (2,END)"
            }
        ],
        "target": "graph",
        "id": "toolalpaca_298",
        "category": "eval"
    },
    {
        "source": "toolalpaca",
        "conversations": [
            {
                "role": "system",
                "content": "You are a helpful task planner.\nFirst I will give you the task description and tools list you can use to finish the task, and your task is to plan a sequence of nodes which are subtasks to achieve the task. Each node of workflow is a subtask, and you can use the tools to complete the subtask.\nAfter you construct the plan, since some subtasks may not be dependent on each other, while others may have dependencies. Please convert these nodes of subtasks into a topology diagram based on the task relevance in the workflow. The Graph should start with START node, and end with END node. \nKeep your output in foramt:\nNode:\n1.{subtask_1}\n2.{subtask_2}\n...\nEdges:\n(START,1)\n...\n(n,END))"
            },
            {
                "role": "user",
                "content": "Task: Please list all of my Coinbase Pro accounts, showing the currency, balance, and available funds for each.\nThe api list you can use: [{'name': 'getAccount', 'description': 'Retrieves account information for the specified account ID', 'parameters': {'id': 'Required. string. The account ID to retrieve information for.'}, 'output': 'Successful response.', 'format': 'application/json', 'path': '/accounts/{id}', 'method': 'get'}, {'name': 'listAccounts', 'description': 'Retrieves a list of all accounts associated with the API key', 'parameters': {'limit': 'integer. The maximum number of accounts to return. Default is 100, maximum is 1000.', 'before': 'string. The account ID to return accounts before.', 'after': 'string. The account ID to return accounts after.'}, 'output': 'Successful response.', 'format': 'application/json', 'path': '/accounts', 'method': 'get'}, {'name': 'placeOrder', 'description': 'Places a new order on the specified product', 'parameters': {'product_id': 'string.', 'side': 'string. One of: [buy, sell].', 'type': 'string. One of: [limit, market, stop, stop_limit].', 'size': 'string.', 'price': 'string.', 'stop': 'string.', 'client_oid': 'string.', 'stp': 'string.', 'time_in_force': 'string. One of: [GTC, GTT, IOC, FOK].', 'cancel_after': 'string.'}, 'output': 'Successful response.', 'format': 'application/json', 'path': '/orders', 'method': 'post'}, {'name': 'cancelOrder', 'description': 'Cancels the specified order', 'parameters': {'id': 'Required. string. The order ID to cancel.'}, 'output': 'Successful response.', 'format': 'application/json', 'path': '/orders/{id}', 'method': 'delete'}, {'name': 'getProductOrderBook', 'description': 'Retrieves the order book for the specified product', 'parameters': {'product_id': 'Required. string. The product ID to retrieve the order book for.', 'level': 'integer. The order book level to retrieve, either 1, 2, or 3. Default is 1.'}, 'output': 'Successful response.', 'format': 'application/json', 'path': '/products/{product_id}/book', 'method': 'get'}, {'name': 'getProductTicker', 'description': 'Retrieves the ticker for the specified product', 'parameters': {'product_id': 'Required. string. The product ID to retrieve the ticker for.'}, 'output': 'Successful response.', 'format': 'application/json', 'path': '/products/{product_id}/ticker', 'method': 'get'}, {'name': 'getProductTrades', 'description': 'Retrieves the trades for the specified product', 'parameters': {'product_id': 'Required. string. The product ID to retrieve the trades for.', 'limit': 'integer. The maximum number of trades to return. Default is 100, maximum is 1000.', 'before': 'string. The trade ID to return trades before.', 'after': 'string. The trade ID to return trades after.'}, 'output': 'Successful response.', 'format': 'application/json', 'path': '/products/{product_id}/trades', 'method': 'get'}]"
            },
            {
                "role": "assistant",
                "content": "Node:\n1: Retrieve a listing of all Coinbase Pro accounts, displaying the currency, balance, and available funds for each account.\n2: Retrieve specific account details using the account ID on Coinbase Pro, including the currency, balance, and available funds.\nEdge: (START,1) (1,2) (2,END)"
            }
        ],
        "target": "graph",
        "id": "toolalpaca_872",
        "category": "eval"
    },
    {
        "source": "toolalpaca",
        "conversations": [
            {
                "role": "system",
                "content": "You are a helpful task planner.\nFirst I will give you the task description and tools list you can use to finish the task, and your task is to plan a sequence of nodes which are subtasks to achieve the task. Each node of workflow is a subtask, and you can use the tools to complete the subtask.\nAfter you construct the plan, since some subtasks may not be dependent on each other, while others may have dependencies. Please convert these nodes of subtasks into a topology diagram based on the task relevance in the workflow. The Graph should start with START node, and end with END node. \nKeep your output in foramt:\nNode:\n1.{subtask_1}\n2.{subtask_2}\n...\nEdges:\n(START,1)\n...\n(n,END))"
            },
            {
                "role": "user",
                "content": "Task: I want to know how to acquire the \"Wind-up Succubus\" minion. Can you find its details for me?\nThe api list you can use: [{'name': 'searchItems', 'description': 'Search for items by name, description, or category.', 'parameters': {'query': 'Required. string. The search query.'}, 'output': 'An array of items that match the search query.', 'format': 'application/json', 'path': '/searchItems', 'method': 'get'}, {'name': 'getItemDetails', 'description': 'Retrieve item details, including rarity, level, and attributes.', 'parameters': {'itemId': 'Required. integer. The ID of the item.'}, 'output': 'An object containing the details of the item.', 'format': 'application/json', 'path': '/getItemDetails/{itemId}', 'method': 'get'}, {'name': 'getMountDetails', 'description': 'Retrieve mount details, including acquisition methods and related achievements.', 'parameters': {'mountId': 'Required. integer. The ID of the mount.'}, 'output': 'An object containing the details of the mount.', 'format': 'application/json', 'path': '/getMountDetails/{mountId}', 'method': 'get'}, {'name': 'getMinionDetails', 'description': 'Retrieve minion details, including acquisition methods and related achievements.', 'parameters': {'minionId': 'Required. integer. The ID of the minion.'}, 'output': 'An object containing the details of the minion.', 'format': 'application/json', 'path': '/getMinionDetails/{minionId}', 'method': 'get'}, {'name': 'getAchievementDetails', 'description': 'Retrieve achievement details, including requirements and rewards.', 'parameters': {'achievementId': 'Required. integer. The ID of the achievement.'}, 'output': 'An object containing the details of the achievement.', 'format': 'application/json', 'path': '/getAchievementDetails/{achievementId}', 'method': 'get'}, {'name': 'getTitleDetails', 'description': 'Retrieve title details, including requirements and rewards.', 'parameters': {'titleId': 'Required. integer. The ID of the title.'}, 'output': 'An object containing the details of the title.', 'format': 'application/json', 'path': '/getTitleDetails/{titleId}', 'method': 'get'}]"
            },
            {
                "role": "assistant",
                "content": "Node:\n1: Search for the \"Wind-up Succubus\" minion to acquire its specific details such as location, price, or method of acquisition.\n2: Use the found minion ID '13753' to obtain complete details such as how to acquire the Wind-up Succubus minion, related achievements, and any special attributes or functionalities it might have.\nEdge: (START,1) (1,2) (2,END)"
            }
        ],
        "target": "graph",
        "id": "toolalpaca_514",
        "category": "eval"
    },
    {
        "source": "toolalpaca",
        "conversations": [
            {
                "role": "system",
                "content": "You are a helpful task planner.\nFirst I will give you the task description and tools list you can use to finish the task, and your task is to plan a sequence of nodes which are subtasks to achieve the task. Each node of workflow is a subtask, and you can use the tools to complete the subtask.\nAfter you construct the plan, since some subtasks may not be dependent on each other, while others may have dependencies. Please convert these nodes of subtasks into a topology diagram based on the task relevance in the workflow. The Graph should start with START node, and end with END node. \nKeep your output in foramt:\nNode:\n1.{subtask_1}\n2.{subtask_2}\n...\nEdges:\n(START,1)\n...\n(n,END))"
            },
            {
                "role": "user",
                "content": "Task: How many people have received COVID-19 vaccinations in Luxembourg so far?\nThe api list you can use: [{'name': 'getDataset', 'description': 'Retrieves a specific dataset from the Open Government, Luxembourg API.', 'parameters': {'dataset_id': 'Required. string. The unique identifier of the dataset to retrieve.'}, 'output': 'Successful response.', 'format': 'application/json', 'path': '/dataset/{dataset_id}', 'method': 'get'}, {'name': 'searchDatasets', 'description': 'Searches for datasets in the Open Government, Luxembourg API based on specific criteria.', 'parameters': {'query': 'string.', 'filters': 'Array[Object{field: string., operator: string. One of: [equals, contains, greater than]., value: string.}. ]. ', 'sort': 'Object{field: string., direction: string. One of: [asc, desc].}. ', 'limit': 'integer.', 'offset': 'integer.'}, 'output': 'Successful response.', 'format': 'application/json', 'path': '/datasets/search', 'method': 'post'}, {'name': 'getDatasetMetadata', 'description': 'Retrieves the metadata for a specific dataset from the Open Government, Luxembourg API.', 'parameters': {'dataset_id': 'Required. string. The unique identifier of the dataset to retrieve metadata for.'}, 'output': 'Successful response.', 'format': 'application/json', 'path': '/dataset/{dataset_id}/metadata', 'method': 'get'}, {'name': 'listDatasets', 'description': 'Retrieves a list of all datasets available in the Open Government, Luxembourg API.', 'parameters': {'limit': 'integer. The maximum number of results to return.', 'offset': 'integer. The number of results to skip before returning the first result.'}, 'output': 'Successful response.', 'format': 'application/json', 'path': '/datasets', 'method': 'get'}, {'name': 'getDatasetFields', 'description': 'Retrieves the fields available in a specific dataset from the Open Government, Luxembourg API.', 'parameters': {'dataset_id': 'Required. string. The unique identifier of the dataset to retrieve fields for.'}, 'output': 'Successful response.', 'format': 'application/json', 'path': '/dataset/{dataset_id}/fields', 'method': 'get'}, {'name': 'getDatasetData', 'description': 'Retrieves the data for a specific dataset from the Open Government, Luxembourg API.', 'parameters': {'dataset_id': 'Required. string. The unique identifier of the dataset to retrieve data for.', 'filters': 'Required. Array[#Filter].  Filters to apply to the data.', 'sort': 'Required. #Sort Field and direction to use for sorting the data.', 'limit': 'integer. The maximum number of results to return.', 'offset': 'integer. The number of results to skip before returning the first result.'}, 'output': 'Successful response.', 'format': 'application/json', 'path': '/dataset/{dataset_id}/data', 'method': 'get'}]"
            },
            {
                "role": "assistant",
                "content": "Node:\n1: Search for datasets that contain information on COVID-19 vaccinations specifically filtered by the country Luxembourg.\n2: Retrieve detailed information from the dataset titled \"COVID-19 Vaccinations in Luxembourg\" using its unique dataset ID.\n3: Extract all data entries from the dataset \"COVID-19 Vaccinations in Luxembourg\" to compute the total number of vaccinations administered.\nEdge: (START,1) (1,2) (2,3) (3,END)"
            }
        ],
        "target": "graph",
        "id": "toolalpaca_773",
        "category": "eval"
    },
    {
        "source": "toolalpaca",
        "conversations": [
            {
                "role": "system",
                "content": "You are a helpful task planner.\nFirst I will give you the task description and tools list you can use to finish the task, and your task is to plan a sequence of nodes which are subtasks to achieve the task. Each node of workflow is a subtask, and you can use the tools to complete the subtask.\nAfter you construct the plan, since some subtasks may not be dependent on each other, while others may have dependencies. Please convert these nodes of subtasks into a topology diagram based on the task relevance in the workflow. The Graph should start with START node, and end with END node. \nKeep your output in foramt:\nNode:\n1.{subtask_1}\n2.{subtask_2}\n...\nEdges:\n(START,1)\n...\n(n,END))"
            },
            {
                "role": "user",
                "content": "Task: Curious about the job types Arbeitnow has to offer. Could you provide me with a list of these job types?\nThe api list you can use: [{'name': 'searchJobPostings', 'description': 'Search job postings based on various criteria such as location, job title, and keywords.', 'parameters': {'location': 'string. The location to search for job postings.', 'jobTitle': 'string. The job title to search for.', 'keywords': 'string. Keywords to search for in job postings.', 'company': 'string. The company to filter job postings by.', 'jobType': 'string. One of: [full-time, part-time, contract, internship, temporary]. The job type to filter job postings by.', 'jobCategory': 'string. One of: [technology, marketing, sales, customer service, finance, human resources, operations, other]. The job category to filter job postings by.', 'page': 'integer. The page number for pagination.', 'perPage': 'integer. The number of results per page.'}, 'output': 'A list of job postings that match the search criteria.', 'format': 'application/json', 'path': '/jobPostings/search', 'method': 'get'}, {'name': 'getJobPostingDetails', 'description': 'Retrieve detailed information about a specific job posting.', 'parameters': {'jobId': 'Required. string. The unique ID of the job posting to retrieve details for.'}, 'output': 'Detailed information about the specified job posting.', 'format': 'application/json', 'path': '/jobPostings/{jobId}', 'method': 'get'}, {'name': 'listCompanies', 'description': 'Retrieve a list of companies with job postings available on Arbeitnow.', 'parameters': {'page': 'integer. The page number for pagination.', 'perPage': 'integer. The number of results per page.'}, 'output': 'A list of companies with job postings available on Arbeitnow.', 'format': 'application/json', 'path': '/companies', 'method': 'get'}, {'name': 'listJobTypes', 'description': 'Retrieve a list of job types available on Arbeitnow.', 'parameters': {'page': 'integer. The page number for pagination.', 'perPage': 'integer. The number of results per page.'}, 'output': 'A list of job types available on Arbeitnow.', 'format': 'application/json', 'path': '/jobTypes', 'method': 'get'}, {'name': 'listJobCategories', 'description': 'Retrieve a list of job categories available on Arbeitnow.', 'parameters': {'page': 'integer. The page number for pagination.', 'perPage': 'integer. The number of results per page.'}, 'output': 'A list of job categories available on Arbeitnow.', 'format': 'application/json', 'path': '/jobCategories', 'method': 'get'}]"
            },
            {
                "role": "assistant",
                "content": "Node:\n1: Retrieve a list of job types available from Arbeitnow, focusing on pagination parameters to manage the data efficiently.\n2: Retrieve a list of job categories from Arbeitnow by specifying the pagination details, such as page number and items per page, to ensure an organized output.\n3: Identify and use an alternative function or correct endpoint to retrieve a list of job types from Arbeitnow, ensuring the input parameters for pagination are set correctly.\nEdge: (START,1) (START,2) (1,3) (2,3) (3,END)"
            }
        ],
        "target": "graph",
        "id": "toolalpaca_18",
        "category": "eval"
    },
    {
        "source": "toolalpaca",
        "conversations": [
            {
                "role": "system",
                "content": "You are a helpful task planner.\nFirst I will give you the task description and tools list you can use to finish the task, and your task is to plan a sequence of nodes which are subtasks to achieve the task. Each node of workflow is a subtask, and you can use the tools to complete the subtask.\nAfter you construct the plan, since some subtasks may not be dependent on each other, while others may have dependencies. Please convert these nodes of subtasks into a topology diagram based on the task relevance in the workflow. The Graph should start with START node, and end with END node. \nKeep your output in foramt:\nNode:\n1.{subtask_1}\n2.{subtask_2}\n...\nEdges:\n(START,1)\n...\n(n,END))"
            },
            {
                "role": "user",
                "content": "Task: Can you recommend a Thai-language speech recognition API for my language learning app?\nThe api list you can use: [{'name': 'tokenize', 'description': 'Segments Thai text into individual words.', 'parameters': {'text': 'Required. string. The Thai text to be tokenized.'}, 'output': 'An array of strings, where each element represents a tokenized word.', 'format': 'application/json', 'path': '/tokenize', 'method': 'post'}, {'name': 'posTagging', 'description': 'Identifies the role of each word in the sentence.', 'parameters': {'text': 'Required. string. The Thai text to be analyzed.'}, 'output': 'An array of objects, where each object represents a word and its corresponding part-of-speech tag.', 'format': 'application/json', 'path': '/posTagging', 'method': 'post'}, {'name': 'namedEntityRecognition', 'description': 'Extracts named entities such as people, organizations, locations, and dates from Thai text.', 'parameters': {'text': 'Required. string. The Thai text to be analyzed.'}, 'output': 'An array of objects, where each object represents a named entity and its corresponding entity type.', 'format': 'application/json', 'path': '/namedEntityRecognition', 'method': 'post'}, {'name': 'dependencyParsing', 'description': 'Identifies the relationships between words in a sentence.', 'parameters': {'text': 'Required. string. The Thai text to be analyzed.'}, 'output': 'An array of objects, where each object represents a word and its corresponding dependency relationship with other words in the sentence.', 'format': 'application/json', 'path': '/dependencyParsing', 'method': 'post'}]"
            },
            {
                "role": "assistant",
                "content": "Node:\n1: Identify a speech recognition API that supports the Thai language and is suitable for integration into a language learning application.\n2: Identify a Thai-language speech recognition API that is tailored for teaching Thai to non-native speakers and compatible with a language learning platform.\nEdge: (START,1) (START,2) (1,END) (2,END)"
            }
        ],
        "target": "graph",
        "id": "toolalpaca_732",
        "category": "eval"
    },
    {
        "source": "toolalpaca",
        "conversations": [
            {
                "role": "system",
                "content": "You are a helpful task planner.\nFirst I will give you the task description and tools list you can use to finish the task, and your task is to plan a sequence of nodes which are subtasks to achieve the task. Each node of workflow is a subtask, and you can use the tools to complete the subtask.\nAfter you construct the plan, since some subtasks may not be dependent on each other, while others may have dependencies. Please convert these nodes of subtasks into a topology diagram based on the task relevance in the workflow. The Graph should start with START node, and end with END node. \nKeep your output in foramt:\nNode:\n1.{subtask_1}\n2.{subtask_2}\n...\nEdges:\n(START,1)\n...\n(n,END))"
            },
            {
                "role": "user",
                "content": "Task: My family loves Geography, and we'd like to try a few questions on this subject. Can you find \"Geography\" in the list of categories and retrieve ten questions with various difficulties from this category?\nThe api list you can use: [{'name': 'getRandomQuestions', 'description': 'Retrieve a specified number of random Jeopardy questions.', 'parameters': {'count': 'integer. Optional. Integer. The number of random questions to retrieve. Default is 1.'}, 'output': 'An array of question objects, each containing the question ID, category, question text, answer text, and difficulty level (in dollars).', 'format': 'application/json', 'path': '/random', 'method': 'get'}, {'name': 'searchQuestions', 'description': 'Search for Jeopardy questions based on category, question, or answer.', 'parameters': {'category': 'string. Optional. String. The category to search for.', 'question': 'string. Optional. String. The question text to search for.', 'answer': 'string. Optional. String. The answer text to search for.', 'minValue': 'integer. Optional. Integer. The minimum difficulty level (in dollars) to search for.', 'maxValue': 'integer. Optional. Integer. The maximum difficulty level (in dollars) to search for.', 'offset': 'integer. Optional. Integer. The starting index for search results. Default is 0.', 'limit': 'integer. Optional. Integer. The maximum number of search results to return. Default is 10.'}, 'output': 'An array of question objects, each containing the question ID, category, question text, answer text, and difficulty level (in dollars).', 'format': 'application/json', 'path': '/search', 'method': 'get'}, {'name': 'getQuestionDetails', 'description': 'Retrieve the details of a specific Jeopardy question by its ID.', 'parameters': {'id': 'Required. integer. Required. Integer. The ID of the Jeopardy question to retrieve.'}, 'output': 'A question object containing the question ID, category, question text, answer text, and difficulty level (in dollars).', 'format': 'application/json', 'path': '/questions/{id}', 'method': 'get'}, {'name': 'listCategories', 'description': 'Retrieve a list of available categories.', 'parameters': {'offset': 'integer. Optional. Integer. The starting index for category list. Default is 0.', 'limit': 'integer. Optional. Integer. The maximum number of categories to return. Default is 10.'}, 'output': 'An array of category objects, each containing the category ID and category name.', 'format': 'application/json', 'path': '/categories', 'method': 'get'}, {'name': 'getCategoryQuestions', 'description': 'Retrieve a list of questions for a specific category.', 'parameters': {'categoryId': 'Required. integer. Required. Integer. The ID of the category to retrieve questions for.', 'offset': 'integer. Optional. Integer. The starting index for question list. Default is 0.', 'limit': 'integer. Optional. Integer. The maximum number of questions to return. Default is 10.'}, 'output': 'An array of question objects, each containing the question ID, category, question text, answer text, and difficulty level (in dollars).', 'format': 'application/json', 'path': '/categories/{categoryId}/questions', 'method': 'get'}]"
            },
            {
                "role": "assistant",
                "content": "Node:\n1: Find the \"Geography\" category in the list and retrieve ten questions with varying difficulties from this category.\n2: Search for questions related to the \"Geography\" category.\n3: Retrieve ten geography-related questions based on the category ID '49702' with varying difficulties.\nEdge: (START,1) (1,2) (2,3) (3,END)"
            }
        ],
        "target": "graph",
        "id": "toolalpaca_94",
        "category": "eval"
    },
    {
        "source": "toolalpaca",
        "conversations": [
            {
                "role": "system",
                "content": "You are a helpful task planner.\nFirst I will give you the task description and tools list you can use to finish the task, and your task is to plan a sequence of nodes which are subtasks to achieve the task. Each node of workflow is a subtask, and you can use the tools to complete the subtask.\nAfter you construct the plan, since some subtasks may not be dependent on each other, while others may have dependencies. Please convert these nodes of subtasks into a topology diagram based on the task relevance in the workflow. The Graph should start with START node, and end with END node. \nKeep your output in foramt:\nNode:\n1.{subtask_1}\n2.{subtask_2}\n...\nEdges:\n(START,1)\n...\n(n,END))"
            },
            {
                "role": "user",
                "content": "Task: I want to share an image on Line from my website. Can you help me use the shareOnLineButton API to do that?\nThe api list you can use: [{'name': 'lineLogin', 'description': 'Allows users to log in to your app using their Line account.', 'parameters': {'channelId': 'Required. string. The ID of your Line channel.', 'redirectUri': 'Required. string. The URI to redirect users to after they log in.', 'state': 'string. A value that will be returned to your app after the user logs in.', 'nonce': 'string. A value that will be returned to your app after the user logs in. Used for security purposes.'}, 'output': 'Returns an authorization code that can be exchanged for an access token.', 'format': 'application/json', 'path': '/line/login', 'method': 'post'}, {'name': 'shareOnLineButton', 'description': 'Allows users to easily share content from your website on Line.', 'parameters': {'url': 'Required. string. The URL of the content to be shared.', 'text': 'string. The text to be displayed with the shared content.', 'image': 'string. The URL of the image to be displayed with the shared content.'}, 'output': 'Opens the Line app with the shared content pre-filled in a message.', 'format': '', 'path': '/line/share', 'method': 'post'}, {'name': 'socialPlugins', 'description': 'Allows developers to add interactive features to their websites, such as a Line Login button or a Share on Line button.', 'parameters': {'pluginType': 'Required. string. The type of plugin to be added (e.g. Login, Share).', 'channelId': 'Required. string. The ID of your Line channel.', 'language': 'string. The language to be used for the plugin (e.g. en, ja).', 'size': 'string. The size of the plugin (e.g. small, large).'}, 'output': 'Renders the specified plugin on the website.', 'format': '', 'path': '/line/plugins', 'method': 'post'}, {'name': 'messagingAPI', 'description': 'Allows developers to create chatbots and messaging services on Line.', 'parameters': {'channelId': 'Required. string. The ID of your Line channel.', 'channelSecret': 'Required. string. The secret key for your Line channel.', 'accessToken': 'Required. string. The access token for your Line channel.', 'to': 'Required. string. The user ID or group ID to send the message to.', 'messageType': 'Required. string. The type of message to be sent (e.g. text, image, video).', 'message': 'Required. string. The content of the message to be sent.'}, 'output': 'Sends the specified message to the specified user or group on Line.', 'format': '', 'path': '/line/messages', 'method': 'post'}]"
            },
            {
                "role": "assistant",
                "content": "Node:\n1: Retrieve the URL of the image and the content to be shared on Line.\n2: Share an image and content on Line using the URLs provided.\nEdge: (START,1) (1,2) (2,END)"
            }
        ],
        "target": "graph",
        "id": "toolalpaca_849",
        "category": "eval"
    },
    {
        "source": "toolalpaca",
        "conversations": [
            {
                "role": "system",
                "content": "You are a helpful task planner.\nFirst I will give you the task description and tools list you can use to finish the task, and your task is to plan a sequence of nodes which are subtasks to achieve the task. Each node of workflow is a subtask, and you can use the tools to complete the subtask.\nAfter you construct the plan, since some subtasks may not be dependent on each other, while others may have dependencies. Please convert these nodes of subtasks into a topology diagram based on the task relevance in the workflow. The Graph should start with START node, and end with END node. \nKeep your output in foramt:\nNode:\n1.{subtask_1}\n2.{subtask_2}\n...\nEdges:\n(START,1)\n...\n(n,END))"
            },
            {
                "role": "user",
                "content": "Task: What is the estimated travel time and fare for a taxi ride from Congonhas Airport to Pinheiros?\nThe api list you can use: [{'name': 'getVehicleLocations', 'description': 'Retrieve the location of all vehicles on a specified route.', 'parameters': {'routeId': 'Required. integer. The ID of the route to retrieve vehicle locations for.'}, 'output': 'An array of JSON objects, each representing a vehicle on the specified route.', 'format': 'application/json', 'path': '/vehicleLocations', 'method': 'get'}, {'name': 'getRealTimeArrivalDeparture', 'description': 'Get real-time arrival and departure times for all stops on a specified route.', 'parameters': {'routeId': 'Required. integer. The ID of the route to retrieve arrival and departure times for.', 'stopId': 'Required. integer. The ID of the stop to retrieve arrival and departure times for.'}, 'output': 'An array of JSON objects, each representing an arrival or departure time for the specified route and stop.', 'format': 'application/json', 'path': '/realTimeArrivalDeparture', 'method': 'get'}, {'name': 'getScheduleRouteInfo', 'description': 'Obtain schedules and route information for all buses and metro trains, including stop locations, route maps, and estimated travel times.', 'parameters': {'routeId': 'Required. integer. The ID of the route to retrieve schedule and route information for.'}, 'output': 'A JSON object containing the route name, route map URL, estimated travel time, and an array of stop objects.', 'format': 'application/json', 'path': '/scheduleRouteInfo', 'method': 'get'}, {'name': 'getServiceAlerts', 'description': 'Access alerts and service notifications for individual routes or the entire transportation network.', 'parameters': {'routeId': 'integer. The ID of the route to retrieve alerts for.', 'stopId': 'integer. The ID of the stop to retrieve alerts for.'}, 'output': 'An array of JSON objects, each representing a service alert or notification.', 'format': 'application/json', 'path': '/serviceAlerts', 'method': 'get'}]"
            },
            {
                "role": "assistant",
                "content": "Node:\n1: Retrieve the specific address for the destination in Pinheiros to accurately calculate the taxi ride details from Congonhas Airport.\n2: Gather the route information for the specified route ID to calculate the distance and fare for a taxi ride from Congonhas Airport to Pinheiros.\n3: Calculate the taxi fare based on the detailed route information, including specific stops, to provide an accurate estimate from Congonhas Airport to Pinheiros.\nEdge: (START,1) (1,2) (2,3) (3,END)"
            }
        ],
        "target": "graph",
        "id": "toolalpaca_625",
        "category": "eval"
    },
    {
        "source": "toolalpaca",
        "conversations": [
            {
                "role": "system",
                "content": "You are a helpful task planner.\nFirst I will give you the task description and tools list you can use to finish the task, and your task is to plan a sequence of nodes which are subtasks to achieve the task. Each node of workflow is a subtask, and you can use the tools to complete the subtask.\nAfter you construct the plan, since some subtasks may not be dependent on each other, while others may have dependencies. Please convert these nodes of subtasks into a topology diagram based on the task relevance in the workflow. The Graph should start with START node, and end with END node. \nKeep your output in foramt:\nNode:\n1.{subtask_1}\n2.{subtask_2}\n...\nEdges:\n(START,1)\n...\n(n,END))"
            },
            {
                "role": "user",
                "content": "Task: Please give me directions to get to the nearest metro station from my current location.\nThe api list you can use: [{'name': 'getVehicleLocations', 'description': 'Retrieve the location of all vehicles on a specified route.', 'parameters': {'routeId': 'Required. integer. The ID of the route to retrieve vehicle locations for.'}, 'output': 'An array of JSON objects, each representing a vehicle on the specified route.', 'format': 'application/json', 'path': '/vehicleLocations', 'method': 'get'}, {'name': 'getRealTimeArrivalDeparture', 'description': 'Get real-time arrival and departure times for all stops on a specified route.', 'parameters': {'routeId': 'Required. integer. The ID of the route to retrieve arrival and departure times for.', 'stopId': 'Required. integer. The ID of the stop to retrieve arrival and departure times for.'}, 'output': 'An array of JSON objects, each representing an arrival or departure time for the specified route and stop.', 'format': 'application/json', 'path': '/realTimeArrivalDeparture', 'method': 'get'}, {'name': 'getScheduleRouteInfo', 'description': 'Obtain schedules and route information for all buses and metro trains, including stop locations, route maps, and estimated travel times.', 'parameters': {'routeId': 'Required. integer. The ID of the route to retrieve schedule and route information for.'}, 'output': 'A JSON object containing the route name, route map URL, estimated travel time, and an array of stop objects.', 'format': 'application/json', 'path': '/scheduleRouteInfo', 'method': 'get'}, {'name': 'getServiceAlerts', 'description': 'Access alerts and service notifications for individual routes or the entire transportation network.', 'parameters': {'routeId': 'integer. The ID of the route to retrieve alerts for.', 'stopId': 'integer. The ID of the stop to retrieve alerts for.'}, 'output': 'An array of JSON objects, each representing a service alert or notification.', 'format': 'application/json', 'path': '/serviceAlerts', 'method': 'get'}]"
            },
            {
                "role": "assistant",
                "content": "Node:\n1: Identify the nearest metro station from the current location using the appropriate vehicle location tracking system.\n2: Gather the schedule and route information related to the identified metro station to assist in planning the journey.\nEdge: (START,1) (1,2) (2,END)"
            }
        ],
        "target": "graph",
        "id": "toolalpaca_610",
        "category": "eval"
    },
    {
        "source": "toolalpaca",
        "conversations": [
            {
                "role": "system",
                "content": "You are a helpful task planner.\nFirst I will give you the task description and tools list you can use to finish the task, and your task is to plan a sequence of nodes which are subtasks to achieve the task. Each node of workflow is a subtask, and you can use the tools to complete the subtask.\nAfter you construct the plan, since some subtasks may not be dependent on each other, while others may have dependencies. Please convert these nodes of subtasks into a topology diagram based on the task relevance in the workflow. The Graph should start with START node, and end with END node. \nKeep your output in foramt:\nNode:\n1.{subtask_1}\n2.{subtask_2}\n...\nEdges:\n(START,1)\n...\n(n,END))"
            },
            {
                "role": "user",
                "content": "Task: I want to monitor the forex market for potential trading opportunities. Can you provide me with the 30-minute forex data for the GBP/JPY currency pair for the last two days? Additionally, analyze the EMA for this data.\nThe api list you can use: [{'name': 'getStockData', 'description': 'Retrieve real-time and historical stock data for a specific stock symbol.', 'parameters': {'symbol': 'Required. string. The stock symbol for which data is to be retrieved.', 'interval': \"string. One of: [1min, 5min, 15min, 30min, 60min, daily, weekly, monthly]. The time interval between data points (e.g., '1min', '5min', '15min', '30min', '60min', 'daily', 'weekly', 'monthly'). Default is 'daily'.\"}, 'output': 'Successful response.', 'format': 'application/json', 'path': '/stock', 'method': 'get'}, {'name': 'getCryptoData', 'description': 'Access intraday and historical prices of a specific cryptocurrency with real-time updates.', 'parameters': {'symbol': 'Required. string. The cryptocurrency symbol for which data is to be retrieved.', 'market': \"Required. string. The market in which the cryptocurrency is traded (e.g., 'USD', 'EUR', 'BTC').\", 'interval': \"string. One of: [1min, 5min, 15min, 30min, 60min, daily, weekly, monthly]. The time interval between data points (e.g., '1min', '5min', '15min', '30min', '60min', 'daily', 'weekly', 'monthly'). Default is 'daily'.\"}, 'output': 'Successful response.', 'format': 'application/json', 'path': '/crypto', 'method': 'get'}, {'name': 'getForexData', 'description': 'Retrieve forex data for a specific currency pair.', 'parameters': {'from_currency': 'Required. string. The base currency of the currency pair.', 'to_currency': 'Required. string. The quote currency of the currency pair.', 'interval': \"string. One of: [1min, 5min, 15min, 30min, 60min, daily, weekly, monthly]. The time interval between data points (e.g., '1min', '5min', '15min', '30min', '60min', 'daily', 'weekly', 'monthly'). Default is 'daily'.\"}, 'output': 'Successful response.', 'format': 'application/json', 'path': '/forex', 'method': 'get'}, {'name': 'getTechnicalIndicator', 'description': 'Analyze a specific technical indicator for a given stock, cryptocurrency, or forex data.', 'parameters': {'symbol': 'Required. string. The stock, cryptocurrency, or forex symbol for which the technical indicator is to be analyzed.', 'indicator': \"Required. string. The technical indicator to be analyzed (e.g., 'SMA', 'EMA', 'MACD', 'RSI').\", 'interval': \"string. One of: [1min, 5min, 15min, 30min, 60min, daily, weekly, monthly]. The time interval between data points (e.g., '1min', '5min', '15min', '30min', '60min', 'daily', 'weekly', 'monthly'). Default is 'daily'.\", 'parameters': 'Object.  Additional parameters specific to the chosen technical indicator.'}, 'output': 'Successful response.', 'format': 'application/json', 'path': '/technical', 'method': 'get'}]"
            },
            {
                "role": "assistant",
                "content": "Node:\n1: Retrieve and analyze the 30-minute interval forex data for the GBP/JPY currency pair over the past two days, including calculating the Exponential Moving Average (EMA) for this data.\n2: Analyze the Exponential Moving Average (EMA) for the retrieved 30-minute interval forex data of the GBP/JPY currency pair from the last two days.\nEdge: (START,1) (1,2) (2,END)"
            }
        ],
        "target": "graph",
        "id": "toolalpaca_306",
        "category": "eval"
    },
    {
        "source": "toolalpaca",
        "conversations": [
            {
                "role": "system",
                "content": "You are a helpful task planner.\nFirst I will give you the task description and tools list you can use to finish the task, and your task is to plan a sequence of nodes which are subtasks to achieve the task. Each node of workflow is a subtask, and you can use the tools to complete the subtask.\nAfter you construct the plan, since some subtasks may not be dependent on each other, while others may have dependencies. Please convert these nodes of subtasks into a topology diagram based on the task relevance in the workflow. The Graph should start with START node, and end with END node. \nKeep your output in foramt:\nNode:\n1.{subtask_1}\n2.{subtask_2}\n...\nEdges:\n(START,1)\n...\n(n,END))"
            },
            {
                "role": "user",
                "content": "Task: How can I use this API to improve my website's security and prevent fraud without compromising user privacy?\nThe api list you can use: [{'name': 'getVisitorId', 'description': 'Retrieves a unique visitor ID for the current user.', 'parameters': {}, 'output': 'Successful response.', 'format': 'application/json', 'path': '/getVisitorId', 'method': 'get'}, {'name': 'getBrowserData', 'description': \"Retrieves detailed information about the user's browser and device.\", 'parameters': {}, 'output': 'Successful response.', 'format': 'application/json', 'path': '/getBrowserData', 'method': 'get'}, {'name': 'getFonts', 'description': \"Retrieves a list of fonts installed on the user's device.\", 'parameters': {}, 'output': 'Successful response.', 'format': 'application/json', 'path': '/getFonts', 'method': 'get'}, {'name': 'getPlugins', 'description': \"Retrieves a list of plugins installed on the user's browser.\", 'parameters': {}, 'output': 'Successful response.', 'format': 'application/json', 'path': '/getPlugins', 'method': 'get'}, {'name': 'getCanvasData', 'description': \"Retrieves data about the user's canvas fingerprint.\", 'parameters': {}, 'output': 'Successful response.', 'format': 'application/json', 'path': '/getCanvasData', 'method': 'get'}, {'name': 'getWebGLData', 'description': \"Retrieves data about the user's WebGL fingerprint.\", 'parameters': {}, 'output': 'Successful response.', 'format': 'application/json', 'path': '/getWebGLData', 'method': 'get'}, {'name': 'getAudioData', 'description': \"Retrieves data about the user's audio fingerprint.\", 'parameters': {}, 'output': 'Successful response.', 'format': 'application/json', 'path': '/getAudioData', 'method': 'get'}, {'name': 'getTouchSupport', 'description': \"Retrieves data about the user's touch support.\", 'parameters': {}, 'output': 'Successful response.', 'format': 'application/json', 'path': '/getTouchSupport', 'method': 'get'}, {'name': 'getAdBlock', 'description': \"Retrieves data about the user's ad blocker status.\", 'parameters': {}, 'output': 'Successful response.', 'format': 'application/json', 'path': '/getAdBlock', 'method': 'get'}, {'name': 'getDoNotTrack', 'description': \"Retrieves data about the user's Do Not Track status.\", 'parameters': {}, 'output': 'Successful response.', 'format': 'application/json', 'path': '/getDoNotTrack', 'method': 'get'}]"
            },
            {
                "role": "assistant",
                "content": "Node:\n1: Collect browser data from users to enhance website security and prevent fraud, ensuring it aligns with privacy standards.\n2: Collect font information from the user's device to further enhance user identification and security measures on the website.\n3: Gather plugin data from user devices to improve user identification techniques while maintaining privacy.\nEdge: (START,1) (1,2) (1,3) (2,3) (3,END)"
            }
        ],
        "target": "graph",
        "id": "toolalpaca_593",
        "category": "eval"
    },
    {
        "source": "toolalpaca",
        "conversations": [
            {
                "role": "system",
                "content": "You are a helpful task planner.\nFirst I will give you the task description and tools list you can use to finish the task, and your task is to plan a sequence of nodes which are subtasks to achieve the task. Each node of workflow is a subtask, and you can use the tools to complete the subtask.\nAfter you construct the plan, since some subtasks may not be dependent on each other, while others may have dependencies. Please convert these nodes of subtasks into a topology diagram based on the task relevance in the workflow. The Graph should start with START node, and end with END node. \nKeep your output in foramt:\nNode:\n1.{subtask_1}\n2.{subtask_2}\n...\nEdges:\n(START,1)\n...\n(n,END))"
            },
            {
                "role": "user",
                "content": "Task: I'm curious about how the traffic in Manchester has changed over the past week. Can you please fetch the historical traffic data for Manchester from last Monday to today and show me a visualization of the data?\nThe api list you can use: [{'name': 'getRealTimeSensorData', 'description': 'Retrieve real-time data from urban sensors for a specific location and sensor type.', 'parameters': {'location': 'Required. string. The name of the location to retrieve data for.', 'sensorType': 'Required. string. The type of sensor data to retrieve (e.g., air quality, traffic, weather).'}, 'output': 'A JSON object containing the real-time sensor data for the specified location and sensor type, including sensor ID, timestamp, and sensor readings.', 'format': 'application/json', 'path': '/real-time-sensor-data', 'method': 'get'}, {'name': 'getHistoricalSensorData', 'description': 'Retrieve historical data from urban sensors for a specific location, sensor type, and time range.', 'parameters': {'location': 'Required. string. The name of the location to retrieve data for.', 'sensorType': 'Required. string. The type of sensor data to retrieve (e.g., air quality, traffic, weather).', 'startTime': 'Required. string. The start time of the time range in ISO 8601 format.', 'endTime': 'Required. string. The end time of the time range in ISO 8601 format.'}, 'output': 'A JSON object containing the historical sensor data for the specified location, sensor type, and time range, including sensor ID, timestamps, and sensor readings.', 'format': 'application/json', 'path': '/historical-sensor-data', 'method': 'get'}, {'name': 'getSensorLocations', 'description': 'Retrieve a list of available sensor locations.', 'parameters': {}, 'output': 'A JSON array containing the names of all available sensor locations.', 'format': 'application/json', 'path': '/sensor-locations', 'method': 'get'}, {'name': 'getSensorTypes', 'description': 'Retrieve a list of available sensor types.', 'parameters': {}, 'output': 'A JSON array containing the names of all available sensor types.', 'format': 'application/json', 'path': '/sensor-types', 'method': 'get'}, {'name': 'getSensorMetadata', 'description': 'Retrieve metadata for a specific sensor, including its location, type, and description.', 'parameters': {'sensorId': 'Required. string. The ID of the sensor to retrieve metadata for.'}, 'output': 'A JSON object containing the metadata for the specified sensor, including its location, type, and description.', 'format': 'application/json', 'path': '/sensor-metadata', 'method': 'get'}, {'name': 'getVisualizations', 'description': 'Retrieve built-in visualizations for a specific location and sensor type.', 'parameters': {'location': 'Required. string. The name of the location to retrieve visualizations for.', 'sensorType': 'Required. string. The type of sensor data to visualize (e.g., air quality, traffic, weather).'}, 'output': 'A JSON object containing the built-in visualizations for the specified location and sensor type, including visualization type, URL, and description.', 'format': 'application/json', 'path': '/visualizations', 'method': 'get'}]"
            },
            {
                "role": "assistant",
                "content": "Node:\n1: Retrieve historical traffic sensor data for Manchester from the specified start date to the end date.\n2: Create a visualization of the traffic data for Manchester using the retrieved historical sensor readings.\nEdge: (START,1) (1,2) (2,END)"
            }
        ],
        "target": "graph",
        "id": "toolalpaca_335",
        "category": "eval"
    },
    {
        "source": "toolalpaca",
        "conversations": [
            {
                "role": "system",
                "content": "You are a helpful task planner.\nFirst I will give you the task description and tools list you can use to finish the task, and your task is to plan a sequence of nodes which are subtasks to achieve the task. Each node of workflow is a subtask, and you can use the tools to complete the subtask.\nAfter you construct the plan, since some subtasks may not be dependent on each other, while others may have dependencies. Please convert these nodes of subtasks into a topology diagram based on the task relevance in the workflow. The Graph should start with START node, and end with END node. \nKeep your output in foramt:\nNode:\n1.{subtask_1}\n2.{subtask_2}\n...\nEdges:\n(START,1)\n...\n(n,END))"
            },
            {
                "role": "user",
                "content": "Task: Give me a list of all the banned cards in the Standard format of Magic The Gathering.\nThe api list you can use: [{'name': 'getCard', 'description': 'Retrieves detailed information about a specific Magic The Gathering card.', 'parameters': {'name': 'Required. string. The name of the card to retrieve.'}, 'output': 'Successful response.', 'format': 'application/json', 'path': '/card', 'method': 'get'}, {'name': 'searchCards', 'description': 'Searches for Magic The Gathering cards based on various criteria.', 'parameters': {'name': 'string. The name of the card to search for.', 'set': 'string. The set the card belongs to.', 'color': 'string. One of: [White, Blue, Black, Red, Green]. The color of the card.', 'type': 'string. The type of the card.', 'rarity': 'string. The rarity of the card.', 'artist': 'string. The name of the artist who illustrated the card.'}, 'output': 'Successful response.', 'format': 'application/json', 'path': '/cards', 'method': 'get'}, {'name': 'getSet', 'description': 'Retrieves information about a specific Magic The Gathering set.', 'parameters': {'code': 'Required. string. The code of the set to retrieve.'}, 'output': 'Successful response.', 'format': 'application/json', 'path': '/set', 'method': 'get'}, {'name': 'searchSets', 'description': 'Searches for Magic The Gathering sets based on various criteria.', 'parameters': {'name': 'string. The name of the set to search for.', 'block': 'string. The block the set belongs to.'}, 'output': 'Successful response.', 'format': 'application/json', 'path': '/sets', 'method': 'get'}, {'name': 'getArtist', 'description': 'Retrieves information about a specific Magic The Gathering artist.', 'parameters': {'name': 'Required. string. The name of the artist to retrieve.'}, 'output': 'Successful response.', 'format': 'application/json', 'path': '/artist', 'method': 'get'}]"
            },
            {
                "role": "assistant",
                "content": "Node:\n1: Identify the expansion sets currently included in the Standard format of Magic The Gathering.\n2: Search for cards from the sets Core Set 2019, Dominaria, and Ultimate Masters that are banned in the Standard format of Magic The Gathering.\nEdge: (START, 1) (1, 2) (2, END)"
            }
        ],
        "target": "graph",
        "id": "toolalpaca_586",
        "category": "eval"
    },
    {
        "source": "toolalpaca",
        "conversations": [
            {
                "role": "system",
                "content": "You are a helpful task planner.\nFirst I will give you the task description and tools list you can use to finish the task, and your task is to plan a sequence of nodes which are subtasks to achieve the task. Each node of workflow is a subtask, and you can use the tools to complete the subtask.\nAfter you construct the plan, since some subtasks may not be dependent on each other, while others may have dependencies. Please convert these nodes of subtasks into a topology diagram based on the task relevance in the workflow. The Graph should start with START node, and end with END node. \nKeep your output in foramt:\nNode:\n1.{subtask_1}\n2.{subtask_2}\n...\nEdges:\n(START,1)\n...\n(n,END))"
            },
            {
                "role": "user",
                "content": "Task: I need to know the weather conditions in London on July 14th, 2022. Can you find London's WOEID and provide me with historical weather data for that day?\nThe api list you can use: [{'name': 'searchLocation', 'description': 'Search for a location by its name or coordinates to retrieve its WOEID.', 'parameters': {'query': \"Required. string. The name of the location or its coordinates in the format 'latitude,longitude'.\"}, 'output': 'A list of matching locations with their WOEID, name, type, and coordinates.', 'format': 'application/json', 'path': '/location/search', 'method': 'get'}, {'name': 'getLocationWeather', 'description': 'Retrieve current weather information for a specific location using its WOEID.', 'parameters': {'woeid': 'Required. integer. The WOEID of the location.'}, 'output': 'Current weather information for the location, including temperature, humidity, wind speed and direction, visibility, atmospheric pressure, and more.', 'format': 'application/json', 'path': '/location/{woeid}', 'method': 'get'}, {'name': 'getHistoricalWeather', 'description': 'Fetch historical weather data for a specific location using its WOEID for the past 30 days.', 'parameters': {'woeid': 'Required. integer. The WOEID of the location.', 'date': \"Required. string. The date in the format 'YYYY-MM-DD'.\"}, 'output': 'Historical weather data for the specified date, including temperature, humidity, wind speed and direction, visibility, atmospheric pressure, and more.', 'format': 'application/json', 'path': '/location/{woeid}/{date}', 'method': 'get'}, {'name': 'getWeatherForecast', 'description': 'Explore weather forecasts for a specific location using its WOEID up to five days ahead.', 'parameters': {'woeid': 'Required. integer. The WOEID of the location.'}, 'output': 'A list of weather forecasts for the next five days, including date, temperature, humidity, wind speed and direction, visibility, atmospheric pressure, and more.', 'format': 'application/json', 'path': '/location/{woeid}/forecast', 'method': 'get'}, {'name': 'getDetailedWeatherInfo', 'description': 'Get detailed information about the weather conditions for a specific location using its WOEID, including sunrise and sunset times, air pressure, weather forecasts, and more.', 'parameters': {'woeid': 'Required. integer. The WOEID of the location.'}, 'output': 'Detailed weather information for the location, including sunrise and sunset times, air pressure, weather forecasts, and more.', 'format': 'application/json', 'path': '/location/{woeid}/detailed', 'method': 'get'}]"
            },
            {
                "role": "assistant",
                "content": "Node:\n1: Find the WOEID for London to use in querying its historical weather data for a specified date.\n2: Use the WOEID obtained for London to retrieve historical weather data for the specified date, July 14th, 2022.\nEdge: (START,1) (1,2) (2,END)"
            }
        ],
        "target": "graph",
        "id": "toolalpaca_12",
        "category": "eval"
    },
    {
        "source": "toolalpaca",
        "conversations": [
            {
                "role": "system",
                "content": "You are a helpful task planner.\nFirst I will give you the task description and tools list you can use to finish the task, and your task is to plan a sequence of nodes which are subtasks to achieve the task. Each node of workflow is a subtask, and you can use the tools to complete the subtask.\nAfter you construct the plan, since some subtasks may not be dependent on each other, while others may have dependencies. Please convert these nodes of subtasks into a topology diagram based on the task relevance in the workflow. The Graph should start with START node, and end with END node. \nKeep your output in foramt:\nNode:\n1.{subtask_1}\n2.{subtask_2}\n...\nEdges:\n(START,1)\n...\n(n,END))"
            },
            {
                "role": "user",
                "content": "Task: I'm planning a trip to France next month. Can you tell me about the current Covid-19 policies in place there and any recent updates on those policies?\nThe api list you can use: [{'name': 'getCountryPolicies', 'description': 'Retrieve a list of government policies and measures taken in response to Covid-19 for a specific country.', 'parameters': {'country': 'Required. string. The name or ISO code of the country for which you want to retrieve policy information.'}, 'output': 'A list of policy measures, including their names, descriptions, start and end dates, and any additional relevant information.', 'format': 'application/json', 'path': '/country-policies', 'method': 'get'}, {'name': 'getRegionPolicies', 'description': 'Retrieve a list of government policies and measures taken in response to Covid-19 for a specific region.', 'parameters': {'region': 'Required. string. The name or code of the region for which you want to retrieve policy information.'}, 'output': 'A list of policy measures, including their names, descriptions, start and end dates, and any additional relevant information.', 'format': 'application/json', 'path': '/region-policies', 'method': 'get'}, {'name': 'getPolicyDetails', 'description': 'Retrieve detailed information on a specific government policy measure related to Covid-19.', 'parameters': {'policyId': 'Required. integer. The unique identifier of the policy measure for which you want to retrieve detailed information.'}, 'output': 'Detailed information on the policy measure, including its name, description, start and end dates, implementing authority, and any additional relevant information.', 'format': 'application/json', 'path': '/policy-details', 'method': 'get'}, {'name': 'searchPolicies', 'description': 'Search for government policies and measures related to Covid-19 based on specific criteria, such as policy type, date range, or implementing authority.', 'parameters': {'policyType': 'string. One of: [Lockdown, Travel restrictions, Social distancing, Vaccination, Testing, Contact tracing, Quarantine]. The type of policy measure you want to search for.', 'startDate': 'string. The start date of the date range for which you want to search for policy measures.', 'endDate': 'string. The end date of the date range for which you want to search for policy measures.', 'implementingAuthority': 'string. The implementing authority of the policy measures you want to search for.'}, 'output': 'A list of policy measures that match the specified criteria, including their names, descriptions, start and end dates, and any additional relevant information.', 'format': 'application/json', 'path': '/search-policies', 'method': 'get'}, {'name': 'getLatestPolicyUpdates', 'description': 'Retrieve a list of the most recent changes to government policies and measures related to Covid-19.', 'parameters': {'limit': 'integer. The maximum number of policy updates to retrieve. Default is 10.'}, 'output': 'A list of the most recent policy updates, including their names, descriptions, start and end dates, implementing authority, and any additional relevant information.', 'format': 'application/json', 'path': '/latest-policy-updates', 'method': 'get'}]"
            },
            {
                "role": "assistant",
                "content": "Node:\n1: Retrieve the current Covid-19 policies and any recent updates for France.\n2: Find the latest updates on the Covid-19 policies in France by retrieving recent policy changes or announcements, specifying a limit to the number of records.\nEdge: (START,1) (1,2) (2,END)"
            }
        ],
        "target": "graph",
        "id": "toolalpaca_394",
        "category": "eval"
    },
    {
        "source": "toolalpaca",
        "conversations": [
            {
                "role": "system",
                "content": "You are a helpful task planner.\nFirst I will give you the task description and tools list you can use to finish the task, and your task is to plan a sequence of nodes which are subtasks to achieve the task. Each node of workflow is a subtask, and you can use the tools to complete the subtask.\nAfter you construct the plan, since some subtasks may not be dependent on each other, while others may have dependencies. Please convert these nodes of subtasks into a topology diagram based on the task relevance in the workflow. The Graph should start with START node, and end with END node. \nKeep your output in foramt:\nNode:\n1.{subtask_1}\n2.{subtask_2}\n...\nEdges:\n(START,1)\n...\n(n,END))"
            },
            {
                "role": "user",
                "content": "Task: I'm writing a report on the Chinese economy and would like to include the historical exchange rate trend between the Chinese Yuan (CNY) and the US Dollar (USD). Can you give me the exchange rate for January 1, 2019, July 1, 2019, January 1, 2020, and July 1, 2020?\nThe api list you can use: [{'name': 'getLatestExchangeRates', 'description': 'Retrieve the latest exchange rates for over 179 currencies worldwide.', 'parameters': {'baseCurrency': 'string. Optional. String. The base currency code to retrieve exchange rates for. Default is USD.', 'targetCurrencies': 'Array[string].  Optional. Array of Strings. A list of target currency codes to filter the results. If not provided, all available currencies will be returned.'}, 'output': 'Successful response.', 'format': 'application/json', 'path': '/latest', 'method': 'get'}, {'name': 'getHistoricalExchangeRate', 'description': 'Get the historical exchange rate for any currency pair at any time in the past.', 'parameters': {'date': \"Required. string. Required. String. The date in the format 'YYYY-MM-DD' for which the historical exchange rate is required.\", 'baseCurrency': 'Required. string. Required. String. The base currency code.', 'targetCurrency': 'Required. string. Required. String. The target currency code.'}, 'output': 'Successful response.', 'format': 'application/json', 'path': '/historical', 'method': 'get'}, {'name': 'calculateCurrencyConversion', 'description': 'Calculate currency conversion rates for any amount.', 'parameters': {'amount': 'Required. number. Required. Float. The amount to be converted.', 'baseCurrency': 'Required. string. Required. String. The base currency code.', 'targetCurrency': 'Required. string. Required. String. The target currency code.'}, 'output': 'Successful response.', 'format': 'application/json', 'path': '/conversion', 'method': 'get'}, {'name': 'listAvailableCurrencySymbols', 'description': 'List all available currency symbols and retrieve their details, such as name, code, and symbol.', 'parameters': {}, 'output': 'Successful response.', 'format': 'application/json', 'path': '/symbols', 'method': 'get'}, {'name': 'manageCurrencyConversionRates', 'description': 'Manage currency conversion rates for multiple countries and timezones.', 'parameters': {'countries': 'Array[string].  Optional. Array of Strings. A list of country codes to filter the results. If not provided, all available countries will be returned.', 'timezones': 'Array[string].  Optional. Array of Strings. A list of timezone identifiers to filter the results. If not provided, all available timezones will be returned.'}, 'output': 'Successful response.', 'format': 'application/json', 'path': '/conversion-rates', 'method': 'get'}]"
            },
            {
                "role": "assistant",
                "content": "Node:\n1: Retrieve historical exchange rates between the Chinese Yuan (CNY) and the US Dollar (USD) for specific dates.\n2: Continue retrieving historical exchange rates for the specified dates, next for July 1, 2019.\n3: Proceed with obtaining historical exchange rates for the remaining dates, focusing next on January 1, 2020.\n4: Complete the retrieval of historical exchange rates by obtaining the rate for the last requested date, July 1, 2020.\nEdge: (START,1) (1,2) (2,3) (3,4) (4,END)"
            }
        ],
        "target": "graph",
        "id": "toolalpaca_146",
        "category": "eval"
    },
    {
        "source": "toolalpaca",
        "conversations": [
            {
                "role": "system",
                "content": "You are a helpful task planner.\nFirst I will give you the task description and tools list you can use to finish the task, and your task is to plan a sequence of nodes which are subtasks to achieve the task. Each node of workflow is a subtask, and you can use the tools to complete the subtask.\nAfter you construct the plan, since some subtasks may not be dependent on each other, while others may have dependencies. Please convert these nodes of subtasks into a topology diagram based on the task relevance in the workflow. The Graph should start with START node, and end with END node. \nKeep your output in foramt:\nNode:\n1.{subtask_1}\n2.{subtask_2}\n...\nEdges:\n(START,1)\n...\n(n,END))"
            },
            {
                "role": "user",
                "content": "Task: Can you help me find datasets related to climate change? I need the title, description, and metadata for each dataset.\nThe api list you can use: [{'name': 'searchDataset', 'description': 'Search for datasets based on specific criteria.', 'parameters': {'q': 'Required. string. The search query.', 'sort': 'string. The field to sort the results by.', 'size': 'integer. The number of results to return.', 'role': 'integer. The starting index of the results.'}, 'output': 'A list of datasets that match the search criteria.', 'format': 'application/json', 'path': '/searchDataset', 'method': 'get'}, {'name': 'getDataset', 'description': 'Retrieve a specific dataset by its ID.', 'parameters': {'datasetId': 'Required. string. The ID of the dataset to retrieve.'}, 'output': 'The metadata and data for the specified dataset.', 'format': 'application/json', 'path': '/getDataset/{datasetId}', 'method': 'get'}, {'name': 'listTopics', 'description': 'List all the available topics for datasets.', 'parameters': {}, 'output': 'A list of topics.', 'format': 'application/json', 'path': '/listTopics', 'method': 'get'}, {'name': 'listAgencies', 'description': 'List all the available agencies that provide datasets.', 'parameters': {}, 'output': 'A list of agencies.', 'format': 'application/json', 'path': '/listAgencies', 'method': 'get'}, {'name': 'getMapData', 'description': 'Retrieve geospatial data for a specific dataset.', 'parameters': {'datasetId': 'Required. string. The ID of the dataset to retrieve geospatial data for.', 'bbox': 'string. The bounding box to limit the results to.'}, 'output': 'The geospatial data for the specified dataset.', 'format': 'application/json', 'path': '/getMapData/{datasetId}', 'method': 'get'}, {'name': 'downloadData', 'description': 'Download a specific dataset in a specified format.', 'parameters': {'datasetId': 'Required. string. The ID of the dataset to download.', 'format': 'Required. string. One of: [csv, json, xml]. The format to download the data in.'}, 'output': 'The downloaded data in the specified format.', 'format': 'text/csv', 'path': '/downloadData/{datasetId}', 'method': 'get'}]"
            },
            {
                "role": "assistant",
                "content": "Node:\n1: Search for datasets related to climate change, focusing on retrieving the title, description, and metadata for each dataset.\n2: Retrieve detailed information including title, description, and metadata for a specific climate change dataset using its dataset ID.\n3: Continue retrieving detailed information for the remaining datasets related to climate change by using their respective dataset IDs.\nEdge: (START,1) (1,2) (1,3) (2,END) (3,END)"
            }
        ],
        "target": "graph",
        "id": "toolalpaca_548",
        "category": "eval"
    },
    {
        "source": "toolalpaca",
        "conversations": [
            {
                "role": "system",
                "content": "You are a helpful task planner.\nFirst I will give you the task description and tools list you can use to finish the task, and your task is to plan a sequence of nodes which are subtasks to achieve the task. Each node of workflow is a subtask, and you can use the tools to complete the subtask.\nAfter you construct the plan, since some subtasks may not be dependent on each other, while others may have dependencies. Please convert these nodes of subtasks into a topology diagram based on the task relevance in the workflow. The Graph should start with START node, and end with END node. \nKeep your output in foramt:\nNode:\n1.{subtask_1}\n2.{subtask_2}\n...\nEdges:\n(START,1)\n...\n(n,END))"
            },
            {
                "role": "user",
                "content": "Task: I need to scrape some data from a website, but I want to use a static proxy instead of the default rotating proxy. Please extract the structured data using a static proxy and then search for the desired information within the extracted data.\nThe api list you can use: [{'name': 'scrapeStructuredData', 'description': 'Scrape structured data from a given website URL', 'parameters': {'url': 'string. The URL of the website to scrape.', 'selector': 'string. A CSS selector to target specific elements on the page.', 'proxy': 'string. The type of proxy to use. One of: [rotating, static, none].'}, 'output': 'Returns a JSON object containing the structured data extracted from the website, including human-friendly counts and other statistics.', 'format': 'application/json', 'path': '/scrapeStructuredData', 'method': 'post'}, {'name': 'renderJavaScriptContent', 'description': 'Render JavaScript-based content from a given website URL', 'parameters': {'url': 'string. The URL of the website to render JavaScript content from.', 'proxy': 'string. The type of proxy to use. One of: [rotating, static, none].'}, 'output': 'Returns a JSON object containing the rendered JavaScript content from the website, ready for integration with your applications.', 'format': 'application/json', 'path': '/renderJavaScriptContent', 'method': 'post'}, {'name': 'manageRotatingProxies', 'description': 'Manage rotating proxies for web scraping', 'parameters': {'action': 'string. The action to perform on the rotating proxies.', 'proxy': \"string. The proxy to add or remove, if the action is 'add' or 'remove'.\"}, 'output': 'Returns a JSON object containing the result of the action performed on the rotating proxies, such as the list of proxies or a confirmation message for adding or removing a proxy.', 'format': 'application/json', 'path': '/manageRotatingProxies', 'method': 'post'}, {'name': 'searchForField', 'description': 'Search for a specific field or value within the structured data returned by the scrapeStructuredData function', 'parameters': {'data': 'Object. The structured data returned by the scrapeStructuredData function.', 'field': 'string. The field or value to search for within the structured data.'}, 'output': 'Returns a JSON object containing the search results, including the field or value found and its location within the structured data.', 'format': 'application/json', 'path': '/searchForField', 'method': 'post'}, {'name': 'listAvailableSelectors', 'description': 'List available CSS selectors for a given website URL', 'parameters': {'url': 'string. The URL of the website to list available CSS selectors for.'}, 'output': 'Returns a JSON object containing a list of available CSS selectors for the given website URL, allowing users to target specific elements on the page when using the scrapeStructuredData function.', 'format': 'application/json', 'path': '/listAvailableSelectors', 'method': 'post'}]"
            },
            {
                "role": "assistant",
                "content": "Node:\n1: Scrape structured data from a website using a static proxy, and subsequently search within this data for specific information.\n2: Search for a specific field in the structured data that was previously extracted using a static proxy.\nEdge: (START,1) (1,2) (2,END)"
            }
        ],
        "target": "graph",
        "id": "toolalpaca_372",
        "category": "eval"
    },
    {
        "source": "toolalpaca",
        "conversations": [
            {
                "role": "system",
                "content": "You are a helpful task planner.\nFirst I will give you the task description and tools list you can use to finish the task, and your task is to plan a sequence of nodes which are subtasks to achieve the task. Each node of workflow is a subtask, and you can use the tools to complete the subtask.\nAfter you construct the plan, since some subtasks may not be dependent on each other, while others may have dependencies. Please convert these nodes of subtasks into a topology diagram based on the task relevance in the workflow. The Graph should start with START node, and end with END node. \nKeep your output in foramt:\nNode:\n1.{subtask_1}\n2.{subtask_2}\n...\nEdges:\n(START,1)\n...\n(n,END))"
            },
            {
                "role": "user",
                "content": "Task: Generate a list of all the disposable email addresses I've used in the past month.\nThe api list you can use: [{'name': 'createEmailAddress', 'description': 'Creates a temporary email address that can be used for up to one hour.', 'parameters': {'lang': \"string. The language of the email interface. Default is 'en'. One of: [en, fr, es, de, it, ru, ja, ko, zh].\", 'email_user': 'string. The username part of the email address. If not provided, a random username will be generated.', 'email_address': 'string. The domain part of the email address. If not provided, a random domain will be used.'}, 'output': 'Temporary email address created successfully.', 'format': 'application/json', 'path': '/createEmailAddress', 'method': 'post'}, {'name': 'checkEmail', 'description': 'Retrieves messages addressed to a temporary email address.', 'parameters': {'email_addr': 'Required. string. The temporary email address to check for messages.', 'seq': 'integer. The sequence number of the first message to retrieve. Default is 0.', 'offset': 'integer. The number of messages to skip before retrieving. Default is 0.', 'zone': \"string. The time zone of the email interface. Default is 'UTC'.\"}, 'output': 'Messages retrieved successfully.', 'format': 'application/json', 'path': '/checkEmail', 'method': 'get'}, {'name': 'getEmail', 'description': 'Displays the contents of a message addressed to a temporary email address.', 'parameters': {'email_addr': 'Required. string. The temporary email address of the message to retrieve.', 'mail_id': 'Required. string. The unique ID of the message to retrieve.', 'zone': \"string. The time zone of the email interface. Default is 'UTC'.\", 'type': \"string. One of: [text, html]. The type of message to retrieve. Valid values are 'text' and 'html'. Default is 'text'.\"}, 'output': 'Message retrieved successfully.', 'format': 'application/json', 'path': '/getEmail', 'method': 'get'}]"
            },
            {
                "role": "assistant",
                "content": "Node:\n1: Retrieve a list of all disposable email addresses used in the past month.\n2: Check for messages sent to the specified disposable email address 'sulkerg03j@guerrillamailblock.com' from the past month.\nEdge: (START,1) (1,2) (2,END)"
            }
        ],
        "target": "graph",
        "id": "toolalpaca_667",
        "category": "eval"
    },
    {
        "source": "toolalpaca",
        "conversations": [
            {
                "role": "system",
                "content": "You are a helpful task planner.\nFirst I will give you the task description and tools list you can use to finish the task, and your task is to plan a sequence of nodes which are subtasks to achieve the task. Each node of workflow is a subtask, and you can use the tools to complete the subtask.\nAfter you construct the plan, since some subtasks may not be dependent on each other, while others may have dependencies. Please convert these nodes of subtasks into a topology diagram based on the task relevance in the workflow. The Graph should start with START node, and end with END node. \nKeep your output in foramt:\nNode:\n1.{subtask_1}\n2.{subtask_2}\n...\nEdges:\n(START,1)\n...\n(n,END))"
            },
            {
                "role": "user",
                "content": "Task: I'm a social media manager and need to make sure all the images we post are safe for work. Can you use the imageModeration API to check if any NSFW content is present in the images?\nThe api list you can use: [{'name': 'imageModeration', 'description': 'Utilizes machine learning algorithms to classify and identify images based on their content, while blocking unwanted images or blurring out sensitive or offensive material.', 'parameters': {'image': 'Required. string. The base64-encoded image data.', 'categories': 'Array[string]. A list of categories to classify the image into. If not provided, the API will classify the image into all available categories.'}, 'output': 'The moderation result of the image, including whether it is safe or not, and any blocked or blurred regions.', 'format': 'application/json', 'path': '/image-moderation', 'method': 'post'}, {'name': 'imageCensoring', 'description': 'Allows users to censor specific parts of an image, such as faces, to protect the privacy of individuals or prevent unauthorized usage.', 'parameters': {'image': 'Required. string. The base64-encoded image data.', 'regions': \"Required. Array[Object{type: string. The type of region to censor, such as 'face' or 'text'., x: integer. The x-coordinate of the top-left corner of the region., y: integer. The y-coordinate of the top-left corner of the region., width: integer. The width of the region., height: integer. The height of the region.}. ]. A list of regions to censor, including their coordinates and type.\"}, 'output': 'The base64-encoded image data with the specified regions censored.', 'format': 'application/json', 'path': '/image-censoring', 'method': 'post'}]"
            },
            {
                "role": "assistant",
                "content": "Node:\n1: Use the image moderation tool to verify if images contain any NSFW content.\n2: Ensure that images are assessed for content related to nudity, violence, drugs, alcohol, gambling, weapons, hate, and spam using the image moderation tool.\nEdge: (START,1) (1,2) (2,END)"
            }
        ],
        "target": "graph",
        "id": "toolalpaca_927",
        "category": "eval"
    },
    {
        "source": "toolalpaca",
        "conversations": [
            {
                "role": "system",
                "content": "You are a helpful task planner.\nFirst I will give you the task description and tools list you can use to finish the task, and your task is to plan a sequence of nodes which are subtasks to achieve the task. Each node of workflow is a subtask, and you can use the tools to complete the subtask.\nAfter you construct the plan, since some subtasks may not be dependent on each other, while others may have dependencies. Please convert these nodes of subtasks into a topology diagram based on the task relevance in the workflow. The Graph should start with START node, and end with END node. \nKeep your output in foramt:\nNode:\n1.{subtask_1}\n2.{subtask_2}\n...\nEdges:\n(START,1)\n...\n(n,END))"
            },
            {
                "role": "user",
                "content": "Task: I'd like to know how the weather will be in Berlin over the next few days. Get Berlin's WOEID and show me the weather forecasts for the next five days so I can plan accordingly.\nThe api list you can use: [{'name': 'searchLocation', 'description': 'Search for a location by its name or coordinates to retrieve its WOEID.', 'parameters': {'query': \"Required. string. The name of the location or its coordinates in the format 'latitude,longitude'.\"}, 'output': 'A list of matching locations with their WOEID, name, type, and coordinates.', 'format': 'application/json', 'path': '/location/search', 'method': 'get'}, {'name': 'getLocationWeather', 'description': 'Retrieve current weather information for a specific location using its WOEID.', 'parameters': {'woeid': 'Required. integer. The WOEID of the location.'}, 'output': 'Current weather information for the location, including temperature, humidity, wind speed and direction, visibility, atmospheric pressure, and more.', 'format': 'application/json', 'path': '/location/{woeid}', 'method': 'get'}, {'name': 'getHistoricalWeather', 'description': 'Fetch historical weather data for a specific location using its WOEID for the past 30 days.', 'parameters': {'woeid': 'Required. integer. The WOEID of the location.', 'date': \"Required. string. The date in the format 'YYYY-MM-DD'.\"}, 'output': 'Historical weather data for the specified date, including temperature, humidity, wind speed and direction, visibility, atmospheric pressure, and more.', 'format': 'application/json', 'path': '/location/{woeid}/{date}', 'method': 'get'}, {'name': 'getWeatherForecast', 'description': 'Explore weather forecasts for a specific location using its WOEID up to five days ahead.', 'parameters': {'woeid': 'Required. integer. The WOEID of the location.'}, 'output': 'A list of weather forecasts for the next five days, including date, temperature, humidity, wind speed and direction, visibility, atmospheric pressure, and more.', 'format': 'application/json', 'path': '/location/{woeid}/forecast', 'method': 'get'}, {'name': 'getDetailedWeatherInfo', 'description': 'Get detailed information about the weather conditions for a specific location using its WOEID, including sunrise and sunset times, air pressure, weather forecasts, and more.', 'parameters': {'woeid': 'Required. integer. The WOEID of the location.'}, 'output': 'Detailed weather information for the location, including sunrise and sunset times, air pressure, weather forecasts, and more.', 'format': 'application/json', 'path': '/location/{woeid}/detailed', 'method': 'get'}]"
            },
            {
                "role": "assistant",
                "content": "Node:\n1: Retrieve the WOEID for Berlin to use in subsequent weather forecast requests.\n2: Retrieve the five-day weather forecast for Berlin using the WOEID obtained.\nEdge: (START,1) (1,2) (2,END)"
            }
        ],
        "target": "graph",
        "id": "toolalpaca_8",
        "category": "eval"
    },
    {
        "source": "toolalpaca",
        "conversations": [
            {
                "role": "system",
                "content": "You are a helpful task planner.\nFirst I will give you the task description and tools list you can use to finish the task, and your task is to plan a sequence of nodes which are subtasks to achieve the task. Each node of workflow is a subtask, and you can use the tools to complete the subtask.\nAfter you construct the plan, since some subtasks may not be dependent on each other, while others may have dependencies. Please convert these nodes of subtasks into a topology diagram based on the task relevance in the workflow. The Graph should start with START node, and end with END node. \nKeep your output in foramt:\nNode:\n1.{subtask_1}\n2.{subtask_2}\n...\nEdges:\n(START,1)\n...\n(n,END))"
            },
            {
                "role": "user",
                "content": "Task: I want to know how the D.C. government spends its budget. Can you find a dataset about financial data and show me the records for the last fiscal year?\nThe api list you can use: [{'name': 'getListOfDatasets', 'description': 'Retrieve a list of available datasets from the District of Columbia Open Data API.', 'parameters': {}, 'output': 'A list of datasets, including their names, descriptions, and unique identifiers.', 'format': 'application/json', 'path': '/datasets', 'method': 'get'}, {'name': 'queryDataset', 'description': 'Query for specific data from a particular dataset.', 'parameters': {'datasetId': 'Required. string. The unique identifier of the dataset to query.', 'queryParameters': 'Object.  A set of key-value pairs to filter the data based on specific criteria.'}, 'output': 'A list of data records from the specified dataset, filtered based on the provided query parameters.', 'format': 'application/json', 'path': '/datasets/{datasetId}/query', 'method': 'get'}, {'name': 'filterDataByDateRange', 'description': 'Filter data from a dataset based on a specific date range.', 'parameters': {'datasetId': 'Required. string. The unique identifier of the dataset to query.', 'startDate': 'Required. string. The start date of the date range.', 'endDate': 'Required. string. The end date of the date range.'}, 'output': 'A list of data records from the specified dataset, filtered based on the provided date range.', 'format': 'application/json', 'path': '/datasets/{datasetId}/filter-by-date', 'method': 'get'}, {'name': 'filterDataByGeographicLocation', 'description': 'Filter data from a dataset based on a specific geographic location.', 'parameters': {'datasetId': 'Required. string. The unique identifier of the dataset to query.', 'latitude': 'Required. number. The latitude of the geographic location.', 'longitude': 'Required. number. The longitude of the geographic location.', 'radius': 'number. The radius (in meters) around the specified location to include in the results. Default is 1000 meters.'}, 'output': 'A list of data records from the specified dataset, filtered based on the provided geographic location and radius.', 'format': 'application/json', 'path': '/datasets/{datasetId}/filter-by-location', 'method': 'get'}, {'name': 'searchDatasets', 'description': 'Search for datasets based on keywords or phrases.', 'parameters': {'searchQuery': 'Required. string. The keywords or phrases to search for in the dataset names and descriptions.'}, 'output': 'A list of datasets that match the search query, including their names, descriptions, and unique identifiers.', 'format': 'application/json', 'path': '/datasets/search', 'method': 'get'}]"
            },
            {
                "role": "assistant",
                "content": "Node:\n1: Search for datasets related to \"financial data\" to find information regarding the D.C. government's budget spending.\n2: Query the \"Financial Data\" dataset to retrieve records, focusing on filtering the results based on the specified date range for the last fiscal year.\n3: Filter the financial records of the D.C. government from the \"Financial Data\" dataset to display only those within the last fiscal year's date range.\nEdge: (START,1) (1,2) (2,3) (3,END)"
            }
        ],
        "target": "graph",
        "id": "toolalpaca_403",
        "category": "eval"
    },
    {
        "source": "toolalpaca",
        "conversations": [
            {
                "role": "system",
                "content": "You are a helpful task planner.\nFirst I will give you the task description and tools list you can use to finish the task, and your task is to plan a sequence of nodes which are subtasks to achieve the task. Each node of workflow is a subtask, and you can use the tools to complete the subtask.\nAfter you construct the plan, since some subtasks may not be dependent on each other, while others may have dependencies. Please convert these nodes of subtasks into a topology diagram based on the task relevance in the workflow. The Graph should start with START node, and end with END node. \nKeep your output in foramt:\nNode:\n1.{subtask_1}\n2.{subtask_2}\n...\nEdges:\n(START,1)\n...\n(n,END))"
            },
            {
                "role": "user",
                "content": "Task: I'm looking for countries that have \"land\" in their name. Can you find some examples and give me their names, ISO codes, and a brief summary of each country's details?\nThe api list you can use: [{'name': 'getCountryDetails', 'description': 'Retrieve basic information on a specific country, including its name, capital, flag, and population.', 'parameters': {'country': 'Required. string. The name or ISO code of the country for which details are to be retrieved.'}, 'output': 'Successful response.', 'format': 'application/json', 'path': '/country/{country}', 'method': 'get'}, {'name': 'getRegionalBlocs', 'description': 'Get information on the regional blocs a given country belongs to.', 'parameters': {'country': 'Required. string. The name or ISO code of the country for which regional blocs information is to be retrieved.'}, 'output': 'Successful response.', 'format': 'application/json', 'path': '/regionalblocs/{country}', 'method': 'get'}, {'name': 'getCurrencyInformation', 'description': \"Access information on a specific country's currency, including its name, symbol, and exchange rate.\", 'parameters': {'country': 'Required. string. The name or ISO code of the country for which currency information is to be retrieved.'}, 'output': 'Successful response.', 'format': 'application/json', 'path': '/currency/{country}', 'method': 'get'}, {'name': 'searchCountries', 'description': 'Search for countries based on a query, such as a partial name or ISO code.', 'parameters': {'query': 'Required. string. The search query to find matching countries.'}, 'output': 'Successful response.', 'format': 'application/json', 'path': '/search/{query}', 'method': 'get'}, {'name': 'listCountries', 'description': 'List all countries available in the API.', 'parameters': {'region': \"string. Filter countries by the specified region (e.g., 'Europe', 'Asia').\"}, 'output': 'Successful response.', 'format': 'application/json', 'path': '/list', 'method': 'get'}]"
            },
            {
                "role": "assistant",
                "content": "Node:\n1: Retrieve a list of countries containing the word \"land\" in their name, including their names, ISO codes, and summaries of each country's details.\n2: Acquire extensive details about Finland using its ISO code 'FI', including population, area, capital, flag, and languages spoken.\n3: Fetch information about the regional blocs or organizations that Finland is a member of, using its ISO code 'FI'.\n4: Retrieve currency information for Finland using its ISO code 'FI', including details about the currency used in the country.\nEdge: (START,1) (1,2) (1,3) (1,4) (2,END) (3,END) (4,END)"
            }
        ],
        "target": "graph",
        "id": "toolalpaca_272",
        "category": "eval"
    }
]